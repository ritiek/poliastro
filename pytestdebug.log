versions pytest-3.4.1, py-1.5.2, python-3.6.4.final.0
cwd=/home/ritiek/poliastro
args=['--debug']

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x7f3d89f96160>
    pytest_plugin_registered [hook]
        plugin: <Session 'poliastro'>
        manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x7f3d89f96160>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f3d7c96f828>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_doctestplus.plugin.DoctestPlus object at 0x7f3d7c96fb38>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
    find_module called for: unittest.mock [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f3d7c98e588>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
    find_module called for: py._io [assertion]
    find_module called for: py._io.terminalwriter [assertion]
    find_module called for: termios [assertion]
    find_module called for: fcntl [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f3d89f96160>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/usr/local/lib/python3.6/site-packages/_pytest/mark.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/usr/local/lib/python3.6/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/usr/local/lib/python3.6/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/usr/local/lib/python3.6/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/usr/local/lib/python3.6/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/usr/local/lib/python3.6/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/usr/local/lib/python3.6/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/usr/local/lib/python3.6/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/usr/local/lib/python3.6/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/usr/local/lib/python3.6/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/usr/local/lib/python3.6/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/usr/local/lib/python3.6/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/usr/local/lib/python3.6/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/usr/local/lib/python3.6/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/usr/local/lib/python3.6/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/usr/local/lib/python3.6/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/usr/local/lib/python3.6/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/usr/local/lib/python3.6/site-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/usr/local/lib/python3.6/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/usr/local/lib/python3.6/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/usr/local/lib/python3.6/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/usr/local/lib/python3.6/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/usr/local/lib/python3.6/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/usr/local/lib/python3.6/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/usr/local/lib/python3.6/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_rerunfailures' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_remotedata.plugin' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_openfiles.plugin' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_doctestplus.plugin' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_arraydiff.plugin' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'hypothesis.extra.pytestplugin' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.capture.CaptureManager object at 0x7f3d8a009908>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session 'poliastro'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f3d7c96f828>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_doctestplus.plugin.DoctestPlus object at 0x7f3d7c96fb38>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f3d7c98e588>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f3d7c9a4048>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session 'poliastro'>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f3d89f96160>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/usr/local/lib/python3.6/site-packages/_pytest/mark.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/usr/local/lib/python3.6/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/usr/local/lib/python3.6/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/usr/local/lib/python3.6/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/usr/local/lib/python3.6/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/usr/local/lib/python3.6/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/usr/local/lib/python3.6/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/usr/local/lib/python3.6/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/usr/local/lib/python3.6/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/usr/local/lib/python3.6/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/usr/local/lib/python3.6/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/usr/local/lib/python3.6/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/usr/local/lib/python3.6/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/usr/local/lib/python3.6/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/usr/local/lib/python3.6/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/usr/local/lib/python3.6/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/usr/local/lib/python3.6/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/usr/local/lib/python3.6/site-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/usr/local/lib/python3.6/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/usr/local/lib/python3.6/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/usr/local/lib/python3.6/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/usr/local/lib/python3.6/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/usr/local/lib/python3.6/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/usr/local/lib/python3.6/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/usr/local/lib/python3.6/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_rerunfailures' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_remotedata.plugin' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_openfiles.plugin' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_doctestplus.plugin' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_arraydiff.plugin' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'hypothesis.extra.pytestplugin' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.capture.CaptureManager object at 0x7f3d8a009908>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session 'poliastro'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f3d7c96f828>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_doctestplus.plugin.DoctestPlus object at 0x7f3d7c96fb38>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f3d7c98e588>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f3d7c9a4048>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x7f3d7c93b898>
          manager: <_pytest.config.PytestPluginManager object at 0x7f3d8d24e0b8>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x7f3d89f96160>
          startdir: /home/ritiek/poliastro
      finish pytest_report_header --> [['rootdir: /home/ritiek/poliastro, inifile: setup.cfg', 'plugins: rerunfailures-4.0, remotedata-0.2.0, openfiles-0.2.0, mock-1.6.3, doctestplus-0.1.2, cov-2.5.1, arraydiff-0.2, hypothesis-3.45.0'], ['using: pytest-3.4.1 pylib-1.5.2', 'setuptools registered plugins:', '  pytest-rerunfailures-4.0 at /usr/local/lib/python3.6/site-packages/pytest_rerunfailures.py', '  pytest-remotedata-0.2.0 at /usr/local/lib/python3.6/site-packages/pytest_remotedata/plugin.py', '  pytest-openfiles-0.2.0 at /usr/local/lib/python3.6/site-packages/pytest_openfiles/plugin.py', '  pytest-mock-1.6.3 at /usr/local/lib/python3.6/site-packages/pytest_mock.py', '  pytest-doctestplus-0.1.2 at /usr/local/lib/python3.6/site-packages/pytest_doctestplus/plugin.py', '  pytest-cov-2.5.1 at /usr/local/lib/python3.6/site-packages/pytest_cov/plugin.py', '  pytest-arraydiff-0.2 at /usr/local/lib/python3.6/site-packages/pytest_arraydiff/plugin.py', '  hypothesis-3.45.0 at /usr/local/lib/python3.6/site-packages/hypothesis/extra/pytestplugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session 'poliastro'>
    perform_collect <Session 'poliastro'> ['/home/ritiek/poliastro'] [collection]
        pytest_collectstart [hook]
            collector: <Session 'poliastro'>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session 'poliastro'>
        processing argument /home/ritiek/poliastro [collection]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/bin
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/bin
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/tests
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/tests
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/.git
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/.pytest_cache
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/.pytest_cache
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/docs
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/.codeclimate.yml
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/.codeclimate.yml
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/.coverage
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/.coverage
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/.coveragerc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/.coveragerc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/.gitignore
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/.gitignore
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/.travis.yml
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/.travis.yml
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/AUTHORS
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/AUTHORS
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/CODE_OF_CONDUCT.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/CODE_OF_CONDUCT.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/CONTRIBUTING.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/CONTRIBUTING.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/COPYING
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/COPYING
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/ISSUE_TEMPLATE.md
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/ISSUE_TEMPLATE.md
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/MANIFEST.in
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/MANIFEST.in
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/README.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/README.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/appveyor.yml
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/appveyor.yml
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/index.ipynb
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/index.ipynb
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/pytestdebug.log
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/pytestdebug.log
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/readthedocs.yml
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/readthedocs.yml
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/requirements.txt
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/requirements.txt
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/setup.cfg
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/setup.cfg
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/setup.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/setup.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'setup.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/.pytest_cache/v
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/.pytest_cache/v
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/.pytest_cache/v/cache
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/.pytest_cache/v/cache
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/.pytest_cache/v/cache/lastfailed
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/.pytest_cache/v/cache/lastfailed
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/bin/pre_commit.sh
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/bin/pre_commit.sh
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/docs/source
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/Makefile
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/Makefile
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/docs/source/examples
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/logo
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/docs/source/logo
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/_static
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/docs/source/_static
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/about.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/about.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/api.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/api.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/changelog.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/changelog.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/conf.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/conf.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/dastcom5 parameters.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/dastcom5 parameters.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/form.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/form.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/getting_started.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/getting_started.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/index.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/index.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/jupyter.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/jupyter.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/references.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/references.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/success.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/success.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/user_guide.rst
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/user_guide.rst
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/_static/css
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/docs/source/_static/css
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/_static/curtis.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/_static/curtis.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/_static/hohmann.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/_static/hohmann.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/_static/logo_text.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/_static/logo_text.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/_static/molniya.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/_static/molniya.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/_static/msl.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/_static/msl.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/_static/neos.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/_static/neos.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/_static/css/custom.css
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/_static/css/custom.css
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/3DPlot.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/3DPlot.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Catch that asteroid!.ipynb
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Catch that asteroid!.ipynb
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Comparing Hohmann and bielliptic transfers.ipynb
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Comparing Hohmann and bielliptic transfers.ipynb
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Exploring the New Horizons launch.ipynb
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Exploring the New Horizons launch.ipynb
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Florence.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Florence.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Going to Jupiter with Python using Jupyter and poliastro.ipynb
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Going to Jupiter with Python using Jupyter and poliastro.ipynb
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Going to Mars with Python using poliastro.ipynb
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Going to Mars with Python using poliastro.ipynb
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/NEOS.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/NEOS.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Plotting in 3D.ipynb
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Plotting in 3D.ipynb
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Propagation using Cowell's formulation.ipynb
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Propagation using Cowell's formulation.ipynb
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Revisiting Lambert's problem in Python.ipynb
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Revisiting Lambert's problem in Python.ipynb
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Studying Hohmann transfers.ipynb
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Studying Hohmann transfers.ipynb
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Using NEOS package.ipynb
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Using NEOS package.ipynb
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Visualizing the SpaceX Tesla Roadster trip to Mars.ipynb
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/Visualizing the SpaceX Tesla Roadster trip to Mars.ipynb
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/benchmark.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/benchmark.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/cowell.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/cowell.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/hohmann-bielliptic-transfers.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/hohmann-bielliptic-transfers.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/hohmann.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/hohmann.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/hohmann_bielliptic.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/hohmann_bielliptic.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/jupiter.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/jupiter.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/lambert.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/lambert.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/logo_text.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/logo_text.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/molniya.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/molniya.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/new_horizons.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/new_horizons.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/examples/trans_30_260.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/examples/trans_30_260.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/logo/logo.png
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/logo/logo.png
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/logo/logo.svg
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/logo/logo.svg
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/docs/source/logo/logo_text.svg
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/docs/source/logo/logo_text.svg
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__init__.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__init__.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/__init__.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/bodies.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/bodies.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/bodies.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/cli.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/cli.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/cli.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/constants.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/constants.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/constants.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/coordinates.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/coordinates.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/coordinates.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/examples.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/examples.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/examples.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/frames.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/frames.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/frames.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/hyper.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/hyper.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/hyper.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/jit.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/jit.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/jit.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/maneuver.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/maneuver.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/maneuver.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/patched_conics.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/patched_conics.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/patched_conics.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/plotting.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/plotting.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/plotting.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/stumpff.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/stumpff.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/stumpff.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/testing.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/testing.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/testing.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/util.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/util.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/util.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/__init__.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/__init__.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/bodies.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/bodies.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/cli.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/cli.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/constants.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/constants.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/coordinates.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/coordinates.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/examples.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/examples.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/frames.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/frames.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/hyper.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/hyper.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/jit.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/jit.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/maneuver.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/maneuver.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/patched_conics.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/patched_conics.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/plotting.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/plotting.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/stumpff.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/stumpff.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/testing.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/testing.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/util.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/__pycache__/util.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/__pycache__
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/__pycache__
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/__init__.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/__init__.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/iod/__init__.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/izzo.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/izzo.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/iod/izzo.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/vallado.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/vallado.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/iod/vallado.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/__pycache__/__init__.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/__pycache__/__init__.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/__pycache__/izzo.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/__pycache__/izzo.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/__pycache__/vallado.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/iod/__pycache__/vallado.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/__pycache__
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/__pycache__
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/__init__.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/__init__.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/neos/__init__.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/dastcom5.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/dastcom5.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/neos/dastcom5.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/neows.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/neows.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/neos/neows.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/__pycache__/__init__.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/__pycache__/__init__.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/__pycache__/dastcom5.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/__pycache__/dastcom5.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/__pycache__/neows.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/neos/__pycache__/neows.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_bodies.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_bodies.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_bodies.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_bodies.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_bodies.py'>, <Module 'src/poliastro/tests/test_bodies.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_coordinates.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_coordinates.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_coordinates.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_coordinates.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_coordinates.py'>, <Module 'src/poliastro/tests/test_coordinates.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_examples.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_examples.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_examples.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_examples.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_examples.py'>, <Module 'src/poliastro/tests/test_examples.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_hyper.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_hyper.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_hyper.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_hyper.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_hyper.py'>, <Module 'src/poliastro/tests/test_hyper.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_iod.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_iod.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_iod.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_iod.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_iod.py'>, <Module 'src/poliastro/tests/test_iod.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_jit.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_jit.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_jit.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_jit.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_jit.py'>, <Module 'src/poliastro/tests/test_jit.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_maneuver.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_maneuver.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_maneuver.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_maneuver.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_maneuver.py'>, <Module 'src/poliastro/tests/test_maneuver.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_patched_conics.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_patched_conics.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_patched_conics.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_patched_conics.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_patched_conics.py'>, <Module 'src/poliastro/tests/test_patched_conics.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_plotting.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_plotting.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_plotting.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_plotting.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_plotting.py'>, <Module 'src/poliastro/tests/test_plotting.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_plotting3d.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_plotting3d.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_plotting3d.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_plotting3d.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_plotting3d.py'>, <Module 'src/poliastro/tests/test_plotting3d.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_stumpff.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_stumpff.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_stumpff.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_stumpff.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_stumpff.py'>, <Module 'src/poliastro/tests/test_stumpff.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_twobody.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_twobody.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_twobody.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_twobody.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_twobody.py'>, <Module 'src/poliastro/tests/test_twobody.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_util.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/test_util.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/test_util.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/test_util.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/test_util.py'>, <Module 'src/poliastro/tests/test_util.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_bodies.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_bodies.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_coordinates.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_coordinates.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_examples.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_examples.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_hyper.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_hyper.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_iod.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_iod.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_jit.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_jit.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_maneuver.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_maneuver.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_patched_conics.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_patched_conics.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_plotting.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_plotting.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_plotting3d.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_plotting3d.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_stumpff.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_stumpff.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_twobody.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_twobody.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_util.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_util.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/__pycache__
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/__pycache__
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/center.html
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/center.html
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/none.html
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/none.html
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/table.html
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/table.html
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/test_dastcom5.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/test_dastcom5.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/test_dastcom5.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/tests_neos/test_dastcom5.py'>, <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/test_neos_neows.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/test_neos_neows.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/test_neos_neows.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/tests_neos/test_neos_neows.py'>, <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/__pycache__/test_dastcom5.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/__pycache__/test_dastcom5.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/__pycache__/test_neos_neows.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/__pycache__/test_neos_neows.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_angles.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_angles.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_angles.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/tests_twobody/test_angles.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_angles.py'>, <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_decorators.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_decorators.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_decorators.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_decorators.py'>, <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_orbit.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_orbit.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_orbit.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_orbit.py'>, <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_propagation.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_propagation.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_propagation.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_propagation.py'>, <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_sample.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_sample.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_sample.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/tests_twobody/test_sample.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_sample.py'>, <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_states.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_states.py
                parent: <Session 'poliastro'>
              pytest_pycollect_makemodule [hook]
                  path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_states.py
                  parent: <Session 'poliastro'>
              finish pytest_pycollect_makemodule --> <Module 'src/poliastro/tests/tests_twobody/test_states.py'> [hook]
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_states.py'>, <Module 'src/poliastro/tests/tests_twobody/test_states.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_angles.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_angles.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_decorators.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_decorators.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_orbit.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_orbit.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_propagation.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_propagation.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_sample.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_sample.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_states.cpython-36-PYTEST.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_states.cpython-36-PYTEST.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__init__.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__init__.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/twobody/__init__.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/_base.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/_base.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/twobody/_base.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/angles.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/angles.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/twobody/angles.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/classical.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/classical.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/twobody/classical.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/decorators.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/decorators.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/twobody/decorators.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/equinoctial.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/equinoctial.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/twobody/equinoctial.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/orbit.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/orbit.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/twobody/orbit.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/propagation.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/propagation.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/twobody/propagation.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/rv.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/rv.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'src/poliastro/twobody/rv.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/__init__.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/__init__.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/_base.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/_base.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/angles.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/angles.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/classical.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/classical.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/decorators.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/decorators.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/equinoctial.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/equinoctial.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/orbit.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/orbit.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/propagation.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/propagation.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/rv.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/src/poliastro/twobody/__pycache__/rv.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/tests/__pycache__
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /home/ritiek/poliastro/tests/__pycache__
                parent: <Session 'poliastro'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/tests/benchmarks.py
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/tests/benchmarks.py
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [<DocTestModulePlus 'tests/benchmarks.py'>] [hook]
            pytest_ignore_collect [hook]
                path: /home/ritiek/poliastro/tests/__pycache__/benchmarks.cpython-36.pyc
                config: <_pytest.config.Config object at 0x7f3d89f96160>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /home/ritiek/poliastro/tests/__pycache__/benchmarks.cpython-36.pyc
                parent: <Session 'poliastro'>
            finish pytest_collect_file --> [] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=74 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=74 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'setup.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'setup.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'setup.py'>
      finish pytest_make_collect_report --> <CollectReport 'setup.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'setup.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/__init__.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/__init__.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/__init__.py'>
      find_module called for: poliastro [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/bodies.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/bodies.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/bodies.py'>
      find_module called for: poliastro.bodies [assertion]
      find_module called for: astropy [assertion]
      find_module called for: astropy.version [assertion]
      find_module called for: astropy._compiler [assertion]
      find_module called for: astropy.cython_version [assertion]
      find_module called for: astropy.utils [assertion]
      find_module called for: astropy.utils.codegen [assertion]
      find_module called for: astropy.utils.introspection [assertion]
      find_module called for: astropy.utils.decorators [assertion]
      find_module called for: astropy.utils.exceptions [assertion]
      find_module called for: astropy.utils.misc [assertion]
      find_module called for: unicodedata [assertion]
      find_module called for: astropy.config [assertion]
      find_module called for: astropy.config.paths [assertion]
      find_module called for: astropy.config.configuration [assertion]
      find_module called for: astropy.extern [assertion]
      find_module called for: astropy.extern.configobj [assertion]
      find_module called for: astropy.extern.configobj.configobj [assertion]
      find_module called for: astropy.extern.configobj.validate [assertion]
      find_module called for: astropy.config.affiliated [assertion]
      find_module called for: astropy.tests [assertion]
      find_module called for: astropy.tests.runner [assertion]
      find_module called for: astropy.logger [assertion]
      find_module called for: astropy.utils._compiler [assertion]
      find_module called for: astropy.units [assertion]
      find_module called for: astropy.units.core [assertion]
      find_module called for: astropy.units.utils [assertion]
      find_module called for: astropy.units.format [assertion]
      find_module called for: astropy.units.format.base [assertion]
      find_module called for: astropy.units.format.generic [assertion]
      find_module called for: astropy.units.format.utils [assertion]
      find_module called for: astropy.units.format.cds [assertion]
      find_module called for: astropy.units.format.console [assertion]
      find_module called for: astropy.units.format.fits [assertion]
      find_module called for: astropy.units.format.latex [assertion]
      find_module called for: astropy.units.format.ogip [assertion]
      find_module called for: astropy.units.format.unicode_format [assertion]
      find_module called for: astropy.units.format.vounit [assertion]
      find_module called for: astropy.units.quantity [assertion]
      find_module called for: astropy.utils.compat [assertion]
      find_module called for: astropy.utils.compat.misc [assertion]
      find_module called for: astropy.utils.compat.numpycompat [assertion]
      find_module called for: astropy.utils.data_info [assertion]
      find_module called for: astropy.utils.metadata [assertion]
      find_module called for: astropy.units.quantity_helper [assertion]
      find_module called for: scipy [assertion]
      find_module called for: scipy.__config__ [assertion]
      find_module called for: scipy.version [assertion]
      find_module called for: scipy._lib [assertion]
      find_module called for: scipy._lib._version [assertion]
      find_module called for: scipy._lib.six [assertion]
      find_module called for: scipy._lib._ccallback [assertion]
      find_module called for: scipy._lib._ccallback_c [assertion]
      find_module called for: scipy._lib.ctypes [assertion]
      find_module called for: scipy.special [assertion]
      find_module called for: scipy.special.sf_error [assertion]
      find_module called for: scipy.special._ufuncs [assertion]
      find_module called for: scipy.special._ufuncs_cxx [assertion]
      find_module called for: scipy.special.numpy [assertion]
      find_module called for: scipy.special.basic [assertion]
      find_module called for: scipy.special.specfun [assertion]
      find_module called for: scipy.special.orthogonal [assertion]
      find_module called for: scipy.linalg [assertion]
      find_module called for: scipy.linalg.linalg_version [assertion]
      find_module called for: scipy.linalg.misc [assertion]
      find_module called for: scipy.linalg.blas [assertion]
      find_module called for: scipy.linalg._fblas [assertion]
      find_module called for: scipy.linalg._cblas [assertion]
      find_module called for: scipy.linalg.lapack [assertion]
      find_module called for: scipy.linalg._flapack [assertion]
      find_module called for: scipy.linalg._clapack [assertion]
      find_module called for: scipy._lib._util [assertion]
      find_module called for: scipy.linalg.basic [assertion]
      find_module called for: scipy.linalg.flinalg [assertion]
      find_module called for: scipy.linalg._flinalg [assertion]
      find_module called for: scipy.linalg.decomp [assertion]
      find_module called for: scipy.linalg.decomp_svd [assertion]
      find_module called for: scipy.linalg._solve_toeplitz [assertion]
      find_module called for: scipy.linalg.numpy [assertion]
      find_module called for: scipy.linalg.numpy [assertion]
      find_module called for: scipy.linalg.decomp_lu [assertion]
      find_module called for: scipy.linalg.decomp_cholesky [assertion]
      find_module called for: scipy.linalg.decomp_qr [assertion]
      find_module called for: scipy.linalg._decomp_qz [assertion]
      find_module called for: scipy.linalg.decomp_schur [assertion]
      find_module called for: scipy.linalg._decomp_polar [assertion]
      find_module called for: scipy.linalg.matfuncs [assertion]
      find_module called for: scipy.linalg.special_matrices [assertion]
      find_module called for: scipy.linalg._expm_frechet [assertion]
      find_module called for: scipy.linalg._matfuncs_sqrtm [assertion]
      find_module called for: scipy.linalg._solvers [assertion]
      find_module called for: scipy.linalg._procrustes [assertion]
      find_module called for: scipy.linalg._decomp_update [assertion]
      find_module called for: scipy.linalg.cython_blas [assertion]
      find_module called for: scipy.linalg.cython_lapack [assertion]
      find_module called for: scipy.linalg.numpy [assertion]
      find_module called for: scipy.linalg.numpy [assertion]
      find_module called for: numpy.dual [assertion]
      find_module called for: scipy.special._comb [assertion]
      find_module called for: scipy.special._logsumexp [assertion]
      find_module called for: scipy.special.spfun_stats [assertion]
      find_module called for: scipy.special._ellip_harm [assertion]
      find_module called for: scipy.special._ellip_harm_2 [assertion]
      find_module called for: scipy.special.ctypes [assertion]
      find_module called for: scipy.special.numpy [assertion]
      find_module called for: scipy.special.scipy [assertion]
      find_module called for: scipy.integrate [assertion]
      find_module called for: scipy.integrate.quadrature [assertion]
      find_module called for: scipy.integrate.odepack [assertion]
      find_module called for: scipy.integrate._odepack [assertion]
      find_module called for: scipy.integrate.quadpack [assertion]
      find_module called for: scipy.integrate._quadpack [assertion]
      find_module called for: scipy.integrate._ode [assertion]
      find_module called for: scipy.integrate.vode [assertion]
      find_module called for: scipy.integrate._dop [assertion]
      find_module called for: scipy.integrate.lsoda [assertion]
      find_module called for: scipy.integrate._bvp [assertion]
      find_module called for: scipy.sparse [assertion]
      find_module called for: scipy.sparse.base [assertion]
      find_module called for: scipy.sparse.sputils [assertion]
      find_module called for: scipy.sparse.csr [assertion]
      find_module called for: scipy.sparse._sparsetools [assertion]
      find_module called for: scipy.sparse.compressed [assertion]
      find_module called for: scipy.sparse.data [assertion]
      find_module called for: scipy.sparse.dia [assertion]
      find_module called for: scipy.sparse.csc [assertion]
      find_module called for: scipy.sparse.lil [assertion]
      find_module called for: scipy.sparse._csparsetools [assertion]
      find_module called for: scipy.sparse.numpy [assertion]
      find_module called for: scipy.sparse.dok [assertion]
      find_module called for: scipy.sparse.coo [assertion]
      find_module called for: scipy.sparse.bsr [assertion]
      find_module called for: scipy.sparse.construct [assertion]
      find_module called for: scipy.sparse.extract [assertion]
      find_module called for: scipy.sparse._matrix_io [assertion]
      find_module called for: scipy.sparse.csgraph [assertion]
      find_module called for: scipy.sparse.csgraph._components [assertion]
      find_module called for: scipy.sparse.csgraph._laplacian [assertion]
      find_module called for: scipy.sparse.csgraph._shortest_path [assertion]
      find_module called for: scipy.sparse.csgraph.warnings [assertion]
      find_module called for: scipy.sparse.csgraph.numpy [assertion]
      find_module called for: scipy.sparse.csgraph.scipy [assertion]
      find_module called for: scipy.sparse.csgraph.scipy [assertion]
      find_module called for: scipy.sparse.csgraph._validation [assertion]
      find_module called for: scipy.sparse.csgraph._tools [assertion]
      find_module called for: scipy.sparse.csgraph.numpy [assertion]
      find_module called for: scipy.sparse.csgraph.scipy [assertion]
      find_module called for: scipy.sparse.csgraph._traversal [assertion]
      find_module called for: scipy.sparse.csgraph.numpy [assertion]
      find_module called for: scipy.sparse.csgraph.scipy [assertion]
      find_module called for: scipy.sparse.csgraph.scipy [assertion]
      find_module called for: scipy.sparse.csgraph.scipy [assertion]
      find_module called for: scipy.sparse.csgraph._min_spanning_tree [assertion]
      find_module called for: scipy.sparse.csgraph.numpy [assertion]
      find_module called for: scipy.sparse.csgraph.scipy [assertion]
      find_module called for: scipy.sparse.csgraph.scipy [assertion]
      find_module called for: scipy.sparse.csgraph._reordering [assertion]
      find_module called for: scipy.sparse.csgraph.numpy [assertion]
      find_module called for: scipy.sparse.csgraph.warnings [assertion]
      find_module called for: scipy.sparse.csgraph.scipy [assertion]
      find_module called for: scipy.sparse.linalg [assertion]
      find_module called for: scipy.sparse.linalg.isolve [assertion]
      find_module called for: scipy.sparse.linalg.isolve.iterative [assertion]
      find_module called for: scipy.sparse.linalg.isolve._iterative [assertion]
      find_module called for: scipy.sparse.linalg.interface [assertion]
      find_module called for: scipy._lib.decorator [assertion]
      find_module called for: scipy.sparse.linalg.isolve.utils [assertion]
      find_module called for: scipy._lib._threadsafety [assertion]
      find_module called for: scipy.sparse.linalg.isolve.minres [assertion]
      find_module called for: scipy.sparse.linalg.isolve.lgmres [assertion]
      find_module called for: scipy.sparse.linalg.isolve.lsqr [assertion]
      find_module called for: scipy.sparse.linalg.isolve.lsmr [assertion]
      find_module called for: scipy.sparse.linalg.dsolve [assertion]
      find_module called for: scipy.sparse.linalg.dsolve.linsolve [assertion]
      find_module called for: scipy.sparse.linalg.dsolve._superlu [assertion]
      find_module called for: scikits [assertion]
      find_module called for: scipy.sparse.linalg.dsolve._add_newdocs [assertion]
      find_module called for: scipy.sparse.linalg.eigen [assertion]
      find_module called for: scipy.sparse.linalg.eigen.arpack [assertion]
      find_module called for: scipy.sparse.linalg.eigen.arpack.arpack [assertion]
      find_module called for: scipy.sparse.linalg.eigen.arpack._arpack [assertion]
      find_module called for: scipy.sparse.linalg.eigen.lobpcg [assertion]
      find_module called for: scipy.sparse.linalg.eigen.lobpcg.lobpcg [assertion]
      find_module called for: scipy.sparse.linalg.matfuncs [assertion]
      find_module called for: scipy.sparse.linalg._onenormest [assertion]
      find_module called for: scipy.sparse.linalg._norm [assertion]
      find_module called for: scipy.sparse.linalg._expm_multiply [assertion]
      find_module called for: scipy.optimize [assertion]
      find_module called for: scipy.optimize.optimize [assertion]
      find_module called for: scipy.optimize.linesearch [assertion]
      find_module called for: scipy.optimize.minpack2 [assertion]
      find_module called for: scipy.optimize._minimize [assertion]
      find_module called for: scipy.optimize._trustregion_dogleg [assertion]
      find_module called for: scipy.optimize._trustregion [assertion]
      find_module called for: scipy.optimize._trustregion_ncg [assertion]
      find_module called for: scipy.optimize.lbfgsb [assertion]
      find_module called for: scipy.optimize._lbfgsb [assertion]
      find_module called for: scipy.optimize.tnc [assertion]
      find_module called for: scipy.optimize.moduleTNC [assertion]
      find_module called for: scipy.optimize.cobyla [assertion]
      find_module called for: scipy.optimize._cobyla [assertion]
      find_module called for: scipy.optimize.slsqp [assertion]
      find_module called for: scipy.optimize._slsqp [assertion]
      find_module called for: scipy.optimize._root [assertion]
      find_module called for: scipy.optimize.minpack [assertion]
      find_module called for: scipy.optimize._minpack [assertion]
      find_module called for: scipy.optimize._lsq [assertion]
      find_module called for: scipy.optimize._lsq.least_squares [assertion]
      find_module called for: scipy.optimize._numdiff [assertion]
      find_module called for: scipy.optimize._group_columns [assertion]
      find_module called for: scipy.optimize.numpy [assertion]
      find_module called for: scipy.optimize._lsq.trf [assertion]
      find_module called for: scipy.optimize._lsq.common [assertion]
      find_module called for: scipy.optimize._lsq.dogbox [assertion]
      find_module called for: scipy.optimize._lsq.lsq_linear [assertion]
      find_module called for: scipy.optimize._lsq.trf_linear [assertion]
      find_module called for: scipy.optimize._lsq.givens_elimination [assertion]
      find_module called for: scipy.optimize._lsq.numpy [assertion]
      find_module called for: scipy.optimize._lsq.bvls [assertion]
      find_module called for: scipy.optimize._spectral [assertion]
      find_module called for: scipy.optimize.nonlin [assertion]
      find_module called for: scipy.optimize.zeros [assertion]
      find_module called for: scipy.optimize._zeros [assertion]
      find_module called for: scipy.optimize.nnls [assertion]
      find_module called for: scipy.optimize._nnls [assertion]
      find_module called for: scipy.optimize._basinhopping [assertion]
      find_module called for: scipy.optimize._linprog [assertion]
      find_module called for: scipy.optimize._hungarian [assertion]
      find_module called for: scipy.optimize._differentialevolution [assertion]
      find_module called for: scipy.special.scipy [assertion]
      find_module called for: scipy.special.lambertw [assertion]
      find_module called for: scipy.special._spherical_bessel [assertion]
      find_module called for: astropy.units.decorators [assertion]
      find_module called for: astropy.units.physical [assertion]
      find_module called for: astropy.units.si [assertion]
      find_module called for: astropy.constants [assertion]
      find_module called for: astropy.constants.constant [assertion]
      find_module called for: astropy.constants.si [assertion]
      find_module called for: astropy.constants.codata2014 [assertion]
      find_module called for: astropy.constants.iau2015 [assertion]
      find_module called for: astropy.constants.cgs [assertion]
      find_module called for: astropy.constants.utils [assertion]
      find_module called for: astropy.units.astrophys [assertion]
      find_module called for: astropy.extern.ply [assertion]
      find_module called for: astropy.extern.ply.yacc [assertion]
      find_module called for: astropy.units.format.generic_parsetab [assertion]
      find_module called for: astropy.extern.ply.lex [assertion]
      find_module called for: astropy.units.format.generic_lextab [assertion]
      find_module called for: astropy.units.cgs [assertion]
      find_module called for: astropy.units.imperial [assertion]
      find_module called for: astropy.units.function [assertion]
      find_module called for: astropy.units.function.core [assertion]
      find_module called for: astropy.units.function.logarithmic [assertion]
      find_module called for: astropy.units.function.magnitude_zero_points [assertion]
      find_module called for: astropy.units.function.units [assertion]
      find_module called for: astropy.units.function.mixin [assertion]
      find_module called for: astropy.units.equivalencies [assertion]
      find_module called for: poliastro.constants [assertion]
      find_module called for: astropy.time [assertion]
      find_module called for: astropy.time.formats [assertion]
      find_module called for: astropy._erfa [assertion]
      find_module called for: astropy._erfa.core [assertion]
      find_module called for: astropy._erfa._core [assertion]
      find_module called for: astropy.time.utils [assertion]
      find_module called for: astropy.time.core [assertion]
      find_module called for: _strptime [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/bodies.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/bodies.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/cli.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/cli.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/cli.py'>
      find_module called for: poliastro.cli [assertion]
      find_module called for: poliastro.neos [assertion]
      find_module called for: poliastro.neos.neows [assertion]
      find_module called for: bs4 [assertion]
      find_module called for: bs4.builder [assertion]
      find_module called for: bs4.element [assertion]
      find_module called for: bs4.dammit [assertion]
      find_module called for: html [assertion]
      find_module called for: html.entities [assertion]
      find_module called for: cchardet [assertion]
      find_module called for: chardet [assertion]
      find_module called for: chardet.compat [assertion]
      find_module called for: chardet.universaldetector [assertion]
      find_module called for: chardet.charsetgroupprober [assertion]
      find_module called for: chardet.enums [assertion]
      find_module called for: chardet.charsetprober [assertion]
      find_module called for: chardet.escprober [assertion]
      find_module called for: chardet.codingstatemachine [assertion]
      find_module called for: chardet.escsm [assertion]
      find_module called for: chardet.latin1prober [assertion]
      find_module called for: chardet.mbcsgroupprober [assertion]
      find_module called for: chardet.utf8prober [assertion]
      find_module called for: chardet.mbcssm [assertion]
      find_module called for: chardet.sjisprober [assertion]
      find_module called for: chardet.mbcharsetprober [assertion]
      find_module called for: chardet.chardistribution [assertion]
      find_module called for: chardet.euctwfreq [assertion]
      find_module called for: chardet.euckrfreq [assertion]
      find_module called for: chardet.gb2312freq [assertion]
      find_module called for: chardet.big5freq [assertion]
      find_module called for: chardet.jisfreq [assertion]
      find_module called for: chardet.jpcntx [assertion]
      find_module called for: chardet.eucjpprober [assertion]
      find_module called for: chardet.gb2312prober [assertion]
      find_module called for: chardet.euckrprober [assertion]
      find_module called for: chardet.cp949prober [assertion]
      find_module called for: chardet.big5prober [assertion]
      find_module called for: chardet.euctwprober [assertion]
      find_module called for: chardet.sbcsgroupprober [assertion]
      find_module called for: chardet.sbcharsetprober [assertion]
      find_module called for: chardet.langcyrillicmodel [assertion]
      find_module called for: chardet.langgreekmodel [assertion]
      find_module called for: chardet.langbulgarianmodel [assertion]
      find_module called for: chardet.langthaimodel [assertion]
      find_module called for: chardet.langhebrewmodel [assertion]
      find_module called for: chardet.hebrewprober [assertion]
      find_module called for: chardet.langturkishmodel [assertion]
      find_module called for: chardet.version [assertion]
      find_module called for: iconv_codec [assertion]
      find_module called for: bs4.builder._htmlparser [assertion]
      find_module called for: html.parser [assertion]
      find_module called for: _markupbase [assertion]
      find_module called for: bs4.builder._html5lib [assertion]
      find_module called for: html5lib [assertion]
      find_module called for: html5lib.html5parser [assertion]
      find_module called for: html5lib.inputstream [assertion]
      find_module called for: html5lib.constants [assertion]
      find_module called for: html5lib.utils [assertion]
      find_module called for: xml.etree [assertion]
      find_module called for: xml.etree.cElementTree [assertion]
      find_module called for: xml.etree.ElementTree [assertion]
      find_module called for: xml.etree.ElementPath [assertion]
      find_module called for: _elementtree [assertion]
      find_module called for: html5lib.tokenizer [assertion]
      find_module called for: html5lib.trie [assertion]
      find_module called for: html5lib.trie.py [assertion]
      find_module called for: html5lib.trie._base [assertion]
      find_module called for: html5lib.trie.datrie [assertion]
      find_module called for: datrie [assertion]
      find_module called for: html5lib.treebuilders [assertion]
      find_module called for: html5lib.treebuilders._base [assertion]
      find_module called for: html5lib.treewalkers [assertion]
      find_module called for: html5lib.serializer [assertion]
      find_module called for: html5lib.serializer.htmlserializer [assertion]
      find_module called for: xml.sax [assertion]
      find_module called for: xml.sax.xmlreader [assertion]
      find_module called for: xml.sax.handler [assertion]
      find_module called for: xml.sax._exceptions [assertion]
      find_module called for: xml.sax.saxutils [assertion]
      find_module called for: bs4.builder._lxml [assertion]
      find_module called for: lxml [assertion]
      find_module called for: lxml.etree [assertion]
      find_module called for: backports_abc [assertion]
      find_module called for: __builtin__ [assertion]
      find_module called for: lxml._elementpath [assertion]
      find_module called for: gzip [assertion]
      find_module called for: rnc2rng [assertion]
      find_module called for: requests [assertion]
      find_module called for: urllib3 [assertion]
      find_module called for: urllib3.connectionpool [assertion]
      find_module called for: urllib3.exceptions [assertion]
      find_module called for: urllib3.packages [assertion]
      find_module called for: urllib3.packages.ssl_match_hostname [assertion]
      find_module called for: urllib3.packages.six [assertion]
      find_module called for: urllib3.packages.six.moves [assertion]
      find_module called for: urllib3.packages.six.moves.http_client [assertion]
      find_module called for: queue [assertion]
      find_module called for: urllib3.connection [assertion]
      find_module called for: urllib3.util [assertion]
      find_module called for: urllib3.util.connection [assertion]
      find_module called for: urllib3.util.wait [assertion]
      find_module called for: urllib3.util.selectors [assertion]
      find_module called for: urllib3.util.request [assertion]
      find_module called for: urllib3.util.response [assertion]
      find_module called for: urllib3.util.ssl_ [assertion]
      find_module called for: hmac [assertion]
      find_module called for: urllib3.util.timeout [assertion]
      find_module called for: urllib3.util.retry [assertion]
      find_module called for: urllib3.util.url [assertion]
      find_module called for: urllib3._collections [assertion]
      find_module called for: urllib3.request [assertion]
      find_module called for: urllib3.filepost [assertion]
      find_module called for: urllib3.fields [assertion]
      find_module called for: mimetypes [assertion]
      find_module called for: winreg [assertion]
      find_module called for: urllib3.packages.six.moves.urllib [assertion]
      find_module called for: urllib3.packages.six.moves.urllib.parse [assertion]
      find_module called for: urllib3.response [assertion]
      find_module called for: urllib3.poolmanager [assertion]
      find_module called for: requests.exceptions [assertion]
      find_module called for: urllib3.contrib [assertion]
      find_module called for: urllib3.contrib.pyopenssl [assertion]
      find_module called for: OpenSSL [assertion]
      find_module called for: OpenSSL.rand [assertion]
      find_module called for: OpenSSL._util [assertion]
      find_module called for: cryptography [assertion]
      find_module called for: cryptography.__about__ [assertion]
      find_module called for: cryptography.hazmat [assertion]
      find_module called for: cryptography.hazmat.bindings [assertion]
      find_module called for: cryptography.hazmat.bindings.openssl [assertion]
      find_module called for: cryptography.hazmat.bindings.openssl.binding [assertion]
      find_module called for: cryptography.exceptions [assertion]
      find_module called for: cryptography.hazmat.bindings._openssl [assertion]
      find_module called for: _cffi_backend [assertion]
      find_module called for: cryptography.hazmat.bindings.openssl._conditional [assertion]
      find_module called for: OpenSSL.crypto [assertion]
      find_module called for: cryptography.hazmat.primitives [assertion]
      find_module called for: cryptography.hazmat.primitives.asymmetric [assertion]
      find_module called for: cryptography.hazmat.primitives.asymmetric.dsa [assertion]
      find_module called for: cryptography.utils [assertion]
      find_module called for: cryptography.hazmat.primitives.asymmetric.rsa [assertion]
      find_module called for: cryptography.hazmat.backends [assertion]
      find_module called for: cryptography.hazmat.backends.multibackend [assertion]
      find_module called for: cryptography.hazmat.backends.interfaces [assertion]
      find_module called for: OpenSSL.SSL [assertion]
      find_module called for: OpenSSL.version [assertion]
      find_module called for: cryptography.x509 [assertion]
      find_module called for: cryptography.x509.base [assertion]
      find_module called for: cryptography.hazmat.primitives.asymmetric.ec [assertion]
      find_module called for: cryptography.x509.extensions [assertion]
      find_module called for: pyasn1 [assertion]
      find_module called for: pyasn1.codec [assertion]
      find_module called for: pyasn1.codec.der [assertion]
      find_module called for: pyasn1.codec.der.decoder [assertion]
      find_module called for: pyasn1.codec.cer [assertion]
      find_module called for: pyasn1.codec.cer.decoder [assertion]
      find_module called for: pyasn1.type [assertion]
      find_module called for: pyasn1.type.univ [assertion]
      find_module called for: pyasn1.type.base [assertion]
      find_module called for: pyasn1.type.constraint [assertion]
      find_module called for: pyasn1.type.error [assertion]
      find_module called for: pyasn1.error [assertion]
      find_module called for: pyasn1.type.tagmap [assertion]
      find_module called for: pyasn1.type.tag [assertion]
      find_module called for: pyasn1.type.namedtype [assertion]
      find_module called for: pyasn1.type.namedval [assertion]
      find_module called for: pyasn1.codec.ber [assertion]
      find_module called for: pyasn1.codec.ber.eoo [assertion]
      find_module called for: pyasn1.compat [assertion]
      find_module called for: pyasn1.compat.octets [assertion]
      find_module called for: pyasn1.codec.ber.decoder [assertion]
      find_module called for: pyasn1.type.char [assertion]
      find_module called for: pyasn1.type.useful [assertion]
      find_module called for: pyasn1.debug [assertion]
      find_module called for: cryptography.hazmat.primitives.constant_time [assertion]
      find_module called for: cryptography.hazmat.bindings._constant_time [assertion]
      find_module called for: cryptography.hazmat.primitives.serialization [assertion]
      find_module called for: cryptography.x509.general_name [assertion]
      find_module called for: idna [assertion]
      find_module called for: idna.package_data [assertion]
      find_module called for: idna.core [assertion]
      find_module called for: idna.idnadata [assertion]
      find_module called for: idna.intranges [assertion]
      find_module called for: cryptography.x509.name [assertion]
      find_module called for: cryptography.x509.oid [assertion]
      find_module called for: cryptography.hazmat.primitives.hashes [assertion]
      find_module called for: cryptography.hazmat.backends.openssl [assertion]
      find_module called for: cryptography.hazmat.backends.openssl.backend [assertion]
      find_module called for: cryptography.hazmat.backends.openssl.ciphers [assertion]
      find_module called for: cryptography.hazmat.primitives.ciphers [assertion]
      find_module called for: cryptography.hazmat.primitives.ciphers.base [assertion]
      find_module called for: cryptography.hazmat.primitives.ciphers.modes [assertion]
      find_module called for: cryptography.hazmat.backends.openssl.cmac [assertion]
      find_module called for: cryptography.hazmat.primitives.interfaces [assertion]
      find_module called for: cryptography.hazmat.backends.openssl.dsa [assertion]
      find_module called for: cryptography.hazmat.backends.openssl.utils [assertion]
      find_module called for: cryptography.hazmat.backends.openssl.ec [assertion]
      find_module called for: cryptography.hazmat.backends.openssl.encode_asn1 [assertion]
      find_module called for: cryptography.hazmat.backends.openssl.decode_asn1 [assertion]
      find_module called for: cryptography.hazmat.backends.openssl.hashes [assertion]
      find_module called for: cryptography.hazmat.backends.openssl.hmac [assertion]
      find_module called for: cryptography.hazmat.backends.openssl.rsa [assertion]
      find_module called for: cryptography.hazmat.primitives.asymmetric.padding [assertion]
      find_module called for: cryptography.hazmat.backends.openssl.x509 [assertion]
      find_module called for: cryptography.hazmat.primitives.ciphers.algorithms [assertion]
      find_module called for: urllib3.packages.backports [assertion]
      find_module called for: urllib3.packages.backports.makefile [assertion]
      find_module called for: requests.__version__ [assertion]
      find_module called for: requests.utils [assertion]
      find_module called for: cgi [assertion]
      find_module called for: requests.certs [assertion]
      find_module called for: certifi [assertion]
      find_module called for: certifi.core [assertion]
      find_module called for: requests._internal_utils [assertion]
      find_module called for: requests.compat [assertion]
      find_module called for: simplejson [assertion]
      find_module called for: http.cookiejar [assertion]
      find_module called for: http.cookies [assertion]
      find_module called for: requests.cookies [assertion]
      find_module called for: requests.structures [assertion]
      find_module called for: requests.packages [assertion]
      find_module called for: requests.models [assertion]
      find_module called for: encodings.idna [assertion]
      find_module called for: stringprep [assertion]
      find_module called for: requests.hooks [assertion]
      find_module called for: requests.auth [assertion]
      find_module called for: requests.status_codes [assertion]
      find_module called for: requests.api [assertion]
      find_module called for: requests.sessions [assertion]
      find_module called for: requests.adapters [assertion]
      find_module called for: urllib3.contrib.socks [assertion]
      find_module called for: socks [assertion]
      find_module called for: poliastro.twobody [assertion]
      find_module called for: poliastro.twobody.orbit [assertion]
      find_module called for: astropy.coordinates [assertion]
      find_module called for: astropy.coordinates.errors [assertion]
      find_module called for: astropy.coordinates.angles [assertion]
      find_module called for: astropy.coordinates.angle_utilities [assertion]
      find_module called for: astropy.coordinates.baseframe [assertion]
      find_module called for: astropy.coordinates.transformations [assertion]
      find_module called for: astropy.coordinates.representation [assertion]
      find_module called for: astropy.coordinates.distances [assertion]
      find_module called for: astropy.coordinates.attributes [assertion]
      find_module called for: astropy.coordinates.earth [assertion]
      find_module called for: astropy.utils.data [assertion]
      find_module called for: shelve [assertion]
      find_module called for: astropy.coordinates.sites [assertion]
      find_module called for: astropy.coordinates.builtin_frames [assertion]
      find_module called for: astropy.coordinates.builtin_frames.baseradec [assertion]
      find_module called for: astropy.coordinates.builtin_frames.icrs [assertion]
      find_module called for: astropy.coordinates.builtin_frames.fk5 [assertion]
      find_module called for: astropy.coordinates.earth_orientation [assertion]
      find_module called for: astropy.coordinates.matrix_utilities [assertion]
      find_module called for: astropy.coordinates.builtin_frames.utils [assertion]
      find_module called for: astropy.utils.iers [assertion]
      find_module called for: astropy.utils.iers.iers [assertion]
      find_module called for: urlparse [assertion]
      find_module called for: astropy.table [assertion]
      find_module called for: astropy.table.column [assertion]
      find_module called for: astropy.utils.console [assertion]
      find_module called for: astropy.table.groups [assertion]
      find_module called for: astropy.table.index [assertion]
      find_module called for: astropy.table.bst [assertion]
      find_module called for: bintrees [assertion]
      find_module called for: astropy.table.sorted_array [assertion]
      find_module called for: astropy.table.pprint [assertion]
      find_module called for: astropy.table.np_utils [assertion]
      find_module called for: astropy.table._np_utils [assertion]
      find_module called for: astropy.table.numpy [assertion]
      find_module called for: astropy.table.numpy [assertion]
      find_module called for: astropy.table.numpy [assertion]
      find_module called for: numpy.lib.recfunctions [assertion]
      find_module called for: numpy.ma.mrecords [assertion]
      find_module called for: astropy.table._column_mixins [assertion]
      find_module called for: astropy.table.sys [assertion]
      find_module called for: astropy.table.numpy [assertion]
      find_module called for: astropy.table.table [assertion]
      find_module called for: astropy.io [assertion]
      find_module called for: astropy.io.registry [assertion]
      find_module called for: astropy.table.row [assertion]
      find_module called for: astropy.table.info [assertion]
      find_module called for: astropy.table.operations [assertion]
      find_module called for: astropy.table.serialize [assertion]
      find_module called for: astropy.table.jsviewer [assertion]
      find_module called for: astropy.io.ascii [assertion]
      find_module called for: astropy.io.ascii.core [assertion]
      find_module called for: csv [assertion]
      find_module called for: _csv [assertion]
      find_module called for: astropy.io.ascii.connect [assertion]
      find_module called for: astropy.io.ascii.basic [assertion]
      find_module called for: astropy.io.ascii.fastbasic [assertion]
      find_module called for: astropy.io.ascii.cparser [assertion]
      find_module called for: backports_abc [assertion]
      find_module called for: astropy.io.ascii.csv [assertion]
      find_module called for: astropy.io.ascii.os [assertion]
      find_module called for: astropy.io.ascii.math [assertion]
      find_module called for: astropy.io.ascii.multiprocessing [assertion]
      find_module called for: astropy.io.ascii.mmap [assertion]
      find_module called for: mmap [assertion]
      find_module called for: astropy.io.ascii.warnings [assertion]
      find_module called for: astropy.io.ascii.numpy [assertion]
      find_module called for: astropy.io.ascii.numpy [assertion]
      find_module called for: astropy.io.ascii.Queue [assertion]
      find_module called for: Queue [assertion]
      find_module called for: astropy.io.ascii.queue [assertion]
      find_module called for: astropy.io.ascii.cds [assertion]
      find_module called for: astropy.io.ascii.fixedwidth [assertion]
      find_module called for: astropy.io.ascii.ecsv [assertion]
      find_module called for: astropy.table.meta [assertion]
      find_module called for: astropy.io.ascii.latex [assertion]
      find_module called for: astropy.io.ascii.html [assertion]
      find_module called for: astropy.utils.xml [assertion]
      find_module called for: astropy.utils.xml.writer [assertion]
      find_module called for: bleach [assertion]
      find_module called for: html5lib.sanitizer [assertion]
      find_module called for: bleach.callbacks [assertion]
      find_module called for: bleach.encoding [assertion]
      find_module called for: bleach.sanitizer [assertion]
      find_module called for: bleach.version [assertion]
      find_module called for: astropy.utils.xml._iterparser [assertion]
      find_module called for: astropy.io.ascii.ipac [assertion]
      find_module called for: astropy.io.ascii.daophot [assertion]
      find_module called for: astropy.io.ascii.misc [assertion]
      find_module called for: astropy.io.ascii.sextractor [assertion]
      find_module called for: astropy.io.ascii.rst [assertion]
      find_module called for: astropy.io.ascii.ui [assertion]
      find_module called for: yaml [assertion]
      find_module called for: yaml.error [assertion]
      find_module called for: yaml.tokens [assertion]
      find_module called for: yaml.events [assertion]
      find_module called for: yaml.nodes [assertion]
      find_module called for: yaml.loader [assertion]
      find_module called for: yaml.reader [assertion]
      find_module called for: yaml.scanner [assertion]
      find_module called for: yaml.parser [assertion]
      find_module called for: yaml.composer [assertion]
      find_module called for: yaml.constructor [assertion]
      find_module called for: yaml.resolver [assertion]
      find_module called for: yaml.dumper [assertion]
      find_module called for: yaml.emitter [assertion]
      find_module called for: yaml.serializer [assertion]
      find_module called for: yaml.representer [assertion]
      find_module called for: yaml.cyaml [assertion]
      find_module called for: _yaml [assertion]
      find_module called for: astropy.io.fits [assertion]
      find_module called for: astropy.io.fits.card [assertion]
      find_module called for: astropy.io.fits.util [assertion]
      find_module called for: distutils [assertion]
      find_module called for: distutils.version [assertion]
      find_module called for: astropy.io.fits.verify [assertion]
      find_module called for: astropy.io.fits.column [assertion]
      find_module called for: astropy.io.fits._numpy_hacks [assertion]
      find_module called for: astropy.io.fits.convenience [assertion]
      find_module called for: astropy.io.fits.diff [assertion]
      find_module called for: astropy.io.fits.header [assertion]
      find_module called for: astropy.io.fits.file [assertion]
      find_module called for: astropy.io.fits.hdu [assertion]
      find_module called for: astropy.io.fits.hdu.base [assertion]
      find_module called for: astropy.io.fits.hdu.compressed [assertion]
      find_module called for: gc [assertion]
      find_module called for: astropy.io.fits.hdu.image [assertion]
      find_module called for: astropy.io.fits.hdu.table [assertion]
      find_module called for: astropy.io.fits.fitsrec [assertion]
      find_module called for: astropy.io.fits.compression [assertion]
      find_module called for: astropy.io.fits.hdu.groups [assertion]
      find_module called for: astropy.io.fits.hdu.hdulist [assertion]
      find_module called for: astropy.io.fits.hdu.nonstandard [assertion]
      find_module called for: astropy.io.fits.hdu.streaming [assertion]
      find_module called for: astropy.io.fits.connect [assertion]
      find_module called for: astropy.io.misc [assertion]
      find_module called for: astropy.io.misc.pickle_helpers [assertion]
      find_module called for: astropy.io.misc.connect [assertion]
      find_module called for: astropy.io.misc.hdf5 [assertion]
      find_module called for: astropy.io.votable [assertion]
      find_module called for: astropy.io.votable.table [assertion]
      find_module called for: astropy.io.votable.exceptions [assertion]
      find_module called for: astropy.io.votable.tree [assertion]
      find_module called for: astropy.utils.collections [assertion]
      find_module called for: astropy.io.votable.converters [assertion]
      find_module called for: astropy.io.votable.ucd [assertion]
      find_module called for: astropy.io.votable.util [assertion]
      find_module called for: astropy.io.votable.xmlutil [assertion]
      find_module called for: astropy.utils.xml.check [assertion]
      find_module called for: astropy.utils.xml.validate [assertion]
      find_module called for: astropy.io.votable.tablewriter [assertion]
      find_module called for: astropy.utils.xml.iterparser [assertion]
      find_module called for: astropy.io.votable.connect [assertion]
      find_module called for: astropy.coordinates.builtin_frames.fk4 [assertion]
      find_module called for: astropy.coordinates.builtin_frames.galactic [assertion]
      find_module called for: astropy.coordinates.builtin_frames.galactocentric [assertion]
      find_module called for: astropy.coordinates.builtin_frames.lsr [assertion]
      find_module called for: astropy.coordinates.builtin_frames.supergalactic [assertion]
      find_module called for: astropy.coordinates.builtin_frames.altaz [assertion]
      find_module called for: astropy.coordinates.builtin_frames.gcrs [assertion]
      find_module called for: astropy.coordinates.builtin_frames.cirs [assertion]
      find_module called for: astropy.coordinates.builtin_frames.itrs [assertion]
      find_module called for: astropy.coordinates.builtin_frames.hcrs [assertion]
      find_module called for: astropy.coordinates.builtin_frames.ecliptic [assertion]
      find_module called for: astropy.coordinates.builtin_frames.skyoffset [assertion]
      find_module called for: astropy.coordinates.builtin_frames.icrs_fk5_transforms [assertion]
      find_module called for: astropy.coordinates.builtin_frames.fk4_fk5_transforms [assertion]
      find_module called for: astropy.coordinates.builtin_frames.galactic_transforms [assertion]
      find_module called for: astropy.coordinates.builtin_frames.supergalactic_transforms [assertion]
      find_module called for: astropy.coordinates.builtin_frames.icrs_cirs_transforms [assertion]
      find_module called for: astropy.coordinates.builtin_frames.cirs_observed_transforms [assertion]
      find_module called for: astropy.coordinates.builtin_frames.intermediate_rotation_transforms [assertion]
      find_module called for: astropy.coordinates.builtin_frames.ecliptic_transforms [assertion]
      find_module called for: astropy.coordinates.name_resolve [assertion]
      find_module called for: astropy.coordinates.sky_coordinate [assertion]
      find_module called for: astropy.wcs [assertion]
      find_module called for: astropy.wcs.wcs [assertion]
      find_module called for: astropy.wcs._docutil [assertion]
      find_module called for: astropy.wcs._wcs [assertion]
      find_module called for: astropy.wcs.utils [assertion]
      find_module called for: astropy.utils.state [assertion]
      find_module called for: astropy.coordinates.matching [assertion]
      find_module called for: astropy.coordinates.funcs [assertion]
      find_module called for: astropy.coordinates.calculation [assertion]
      find_module called for: astropy.coordinates.solar_system [assertion]
      find_module called for: astropy.coordinates.orbital_elements [assertion]
      find_module called for: poliastro.twobody.angles [assertion]
      find_module called for: poliastro.twobody.propagation [assertion]
      find_module called for: poliastro.jit [assertion]
      find_module called for: numba [assertion]
      find_module called for: numba.config [assertion]
      find_module called for: llvmlite [assertion]
      find_module called for: llvmlite._version [assertion]
      find_module called for: llvmlite.binding [assertion]
      find_module called for: llvmlite.binding.dylib [assertion]
      find_module called for: llvmlite.binding.ffi [assertion]
      find_module called for: llvmlite.binding.common [assertion]
      find_module called for: llvmlite.utils [assertion]
      find_module called for: llvmlite.six [assertion]
      find_module called for: llvmlite.binding.executionengine [assertion]
      find_module called for: llvmlite.binding.targets [assertion]
      find_module called for: llvmlite.binding.object_file [assertion]
      find_module called for: llvmlite.binding.initfini [assertion]
      find_module called for: llvmlite.binding.linker [assertion]
      find_module called for: llvmlite.binding.module [assertion]
      find_module called for: llvmlite.binding.value [assertion]
      find_module called for: llvmlite.binding.options [assertion]
      find_module called for: llvmlite.binding.passmanagers [assertion]
      find_module called for: llvmlite.binding.transforms [assertion]
      find_module called for: llvmlite.binding.analysis [assertion]
      find_module called for: llvmlite.ir [assertion]
      find_module called for: llvmlite.ir.types [assertion]
      find_module called for: llvmlite.ir._utils [assertion]
      find_module called for: llvmlite.ir.values [assertion]
      find_module called for: llvmlite.ir.module [assertion]
      find_module called for: llvmlite.ir.context [assertion]
      find_module called for: llvmlite.ir.builder [assertion]
      find_module called for: llvmlite.ir.instructions [assertion]
      find_module called for: llvmlite.ir.transforms [assertion]
      find_module called for: numba.errors [assertion]
      find_module called for: numba.six [assertion]
      find_module called for: numba.runtests [assertion]
      find_module called for: numba.types [assertion]
      find_module called for: numba.types.abstract [assertion]
      find_module called for: numba.utils [assertion]
      find_module called for: timeit [assertion]
      find_module called for: cStringIO [assertion]
      find_module called for: numba.types.containers [assertion]
      find_module called for: numba.types.common [assertion]
      find_module called for: numba.types.misc [assertion]
      find_module called for: numba.typeconv [assertion]
      find_module called for: numba.typeconv.castgraph [assertion]
      find_module called for: numba.types.functions [assertion]
      find_module called for: numba.types.iterators [assertion]
      find_module called for: numba.types.npytypes [assertion]
      find_module called for: numba.types.scalars [assertion]
      find_module called for: numba.npdatetime [assertion]
      find_module called for: numba.special [assertion]
      find_module called for: numba.typing [assertion]
      find_module called for: numba.typing.context [assertion]
      find_module called for: numba.typeconv.rules [assertion]
      find_module called for: numba.typeconv.typeconv [assertion]
      find_module called for: numba.typeconv._typeconv [assertion]
      find_module called for: numba.typing.templates [assertion]
      find_module called for: numba.typing.typeof [assertion]
      find_module called for: numba.numpy_support [assertion]
      find_module called for: numba.smartarray [assertion]
      find_module called for: numba.tracing [assertion]
      find_module called for: numba.parfor [assertion]
      find_module called for: numba.ir [assertion]
      find_module called for: numba.ir_utils [assertion]
      find_module called for: numba.analysis [assertion]
      find_module called for: numba.controlflow [assertion]
      find_module called for: numba.cgutils [assertion]
      find_module called for: numba.targets [assertion]
      find_module called for: numba.targets.imputils [assertion]
      find_module called for: numba.rewrites [assertion]
      find_module called for: numba.rewrites.registry [assertion]
      find_module called for: numba.rewrites.static_getitem [assertion]
      find_module called for: numba.rewrites.static_raise [assertion]
      find_module called for: numba.rewrites.static_binop [assertion]
      find_module called for: numba.rewrites.ir_print [assertion]
      find_module called for: numba.rewrites.macros [assertion]
      find_module called for: numba.array_analysis [assertion]
      find_module called for: numba.typing.npydecl [assertion]
      find_module called for: numba.extending [assertion]
      find_module called for: numba.datamodel [assertion]
      find_module called for: numba.datamodel.manager [assertion]
      find_module called for: numba.datamodel.packer [assertion]
      find_module called for: numba.datamodel.registry [assertion]
      find_module called for: numba.datamodel.models [assertion]
      find_module called for: numba.pythonapi [assertion]
      find_module called for: llvmlite.llvmpy [assertion]
      find_module called for: llvmlite.llvmpy.core [assertion]
      find_module called for: numba.ctypes_support [assertion]
      find_module called for: numba.lowering [assertion]
      find_module called for: numba._dynfunc [assertion]
      find_module called for: numba.funcdesc [assertion]
      find_module called for: numba.itanium_mangler [assertion]
      find_module called for: numba.generators [assertion]
      find_module called for: numba.targets.removerefctpass [assertion]
      find_module called for: numba.debuginfo [assertion]
      find_module called for: numba._helperlib [assertion]
      find_module called for: numba.postproc [assertion]
      find_module called for: numba.transforms [assertion]
      find_module called for: numba.interpreter [assertion]
      find_module called for: numba.dataflow [assertion]
      find_module called for: numba.typeinfer [assertion]
      find_module called for: numba.stencilparfor [assertion]
      find_module called for: numba.decorators [assertion]
      find_module called for: numba.sigutils [assertion]
      find_module called for: numba.targets.registry [assertion]
      find_module called for: numba.targets.cpu [assertion]
      find_module called for: numba.callwrapper [assertion]
      find_module called for: numba.targets.base [assertion]
      find_module called for: numba.llvmthreadsafe [assertion]
      find_module called for: numba.targets.arrayobj [assertion]
      find_module called for: numba.targets.quicksort [assertion]
      find_module called for: numba.targets.slicing [assertion]
      find_module called for: numba.six.moves [assertion]
      find_module called for: numba.targets.builtins [assertion]
      find_module called for: numba.typing.builtins [assertion]
      find_module called for: numba.targets.callconv [assertion]
      find_module called for: numba.targets.codegen [assertion]
      find_module called for: llvmlite.llvmpy.passes [assertion]
      find_module called for: numba.runtime [assertion]
      find_module called for: numba.runtime.nrt [assertion]
      find_module called for: numba.runtime.nrtdynmod [assertion]
      find_module called for: numba.runtime._nrt_python [assertion]
      find_module called for: numba.runtime.nrtopt [assertion]
      find_module called for: numba.targets.externals [assertion]
      find_module called for: numba.targets.intrinsics [assertion]
      find_module called for: numba.targets.listobj [assertion]
      find_module called for: numba.targets.setobj [assertion]
      find_module called for: numba.targets.options [assertion]
      find_module called for: numba.targets.fastmathpass [assertion]
      find_module called for: numba.targets.descriptors [assertion]
      find_module called for: numba.dispatcher [assertion]
      find_module called for: numba._dispatcher [assertion]
      find_module called for: numba.compiler [assertion]
      find_module called for: numba.bytecode [assertion]
      find_module called for: numba.objmode [assertion]
      find_module called for: numba.annotations [assertion]
      find_module called for: numba.annotations.type_annotations [assertion]
      find_module called for: numba.io_support [assertion]
      find_module called for: cStringIO [assertion]
      find_module called for: StringIO [assertion]
      find_module called for: numba.inline_closurecall [assertion]
      find_module called for: numba.targets.rangeobj [assertion]
      find_module called for: numba.unsafe [assertion]
      find_module called for: numba.unsafe.ndarray [assertion]
      find_module called for: numba.serialize [assertion]
      find_module called for: numba.caching [assertion]
      find_module called for: numba.appdirs [assertion]
      find_module called for: numba.stencil [assertion]
      find_module called for: numba.npyufunc [assertion]
      find_module called for: numba.npyufunc.decorators [assertion]
      find_module called for: numba.npyufunc._internal [assertion]
      find_module called for: numba.npyufunc.dufunc [assertion]
      find_module called for: numba.npyufunc.ufuncbuilder [assertion]
      find_module called for: numba.npyufunc.sigparse [assertion]
      find_module called for: numba.npyufunc.wrappers [assertion]
      find_module called for: numba.npyufunc.parallel [assertion]
      find_module called for: numba.npyufunc.array_exprs [assertion]
      find_module called for: numba.npyufunc.parfor [assertion]
      find_module called for: numba.jitclass [assertion]
      find_module called for: numba.jitclass.decorators [assertion]
      find_module called for: numba.jitclass.base [assertion]
      find_module called for: numba.jitclass._box [assertion]
      find_module called for: numba.jitclass.boxing [assertion]
      find_module called for: numba._version [assertion]
      find_module called for: poliastro.stumpff [assertion]
      find_module called for: numba.targets.boxing [assertion]
      find_module called for: poliastro.twobody.rv [assertion]
      find_module called for: poliastro.util [assertion]
      find_module called for: poliastro.twobody.classical [assertion]
      find_module called for: poliastro.twobody.equinoctial [assertion]
      find_module called for: poliastro.twobody._base [assertion]
      find_module called for: poliastro.neos.dastcom5 [assertion]
      find_module called for: pandas [assertion]
      find_module called for: pytz [assertion]
      find_module called for: pytz.exceptions [assertion]
      find_module called for: pytz.lazy [assertion]
      find_module called for: UserDict [assertion]
      find_module called for: pytz.tzinfo [assertion]
      find_module called for: pytz.tzfile [assertion]
      find_module called for: cStringIO [assertion]
      find_module called for: dateutil [assertion]
      find_module called for: dateutil._version [assertion]
      find_module called for: pandas.compat [assertion]
      find_module called for: __builtin__ [assertion]
      find_module called for: pandas.compat.chainmap [assertion]
      find_module called for: dateutil.parser [assertion]
      find_module called for: dateutil.relativedelta [assertion]
      find_module called for: dateutil._common [assertion]
      find_module called for: dateutil.tz [assertion]
      find_module called for: dateutil.tz.tz [assertion]
      find_module called for: dateutil.tz._common [assertion]
      find_module called for: dateutil.tz.win [assertion]
      find_module called for: six.moves.winreg [assertion]
      find_module called for: pandas.compat.numpy [assertion]
      find_module called for: pandas._libs [assertion]
      find_module called for: pandas._libs.tslib [assertion]
      find_module called for: pandas._libs.tslibs [assertion]
      find_module called for: pandas._libs.tslibs.timedeltas [assertion]
      find_module called for: pandas._libs.tslibs.sys [assertion]
      find_module called for: pandas._libs.tslibs.timezones [assertion]
      find_module called for: pandas._libs.tslibs.dateutil [assertion]
      find_module called for: pandas._libs.tslibs.sys [assertion]
      find_module called for: pandas._libs.tslibs.dateutil [assertion]
      find_module called for: pandas._libs.tslibs.pytz [assertion]
      find_module called for: pandas._libs.tslibs.pytz [assertion]
      find_module called for: pandas._libs.tslibs.numpy [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.sys [assertion]
      find_module called for: pandas._libs.datetime [assertion]
      find_module called for: pandas._libs.datetime [assertion]
      find_module called for: pandas._libs.tslibs.parsing [assertion]
      find_module called for: backports_abc [assertion]
      find_module called for: pandas._libs.tslibs.sys [assertion]
      find_module called for: pandas._libs.tslibs.re [assertion]
      find_module called for: pandas._libs.tslibs.datetime [assertion]
      find_module called for: pandas._libs.tslibs.time [assertion]
      find_module called for: pandas._libs.tslibs.numpy [assertion]
      find_module called for: pandas._libs.tslibs.io [assertion]
      find_module called for: pandas._libs.tslibs.dateutil [assertion]
      find_module called for: pandas._libs.tslibs.dateutil [assertion]
      find_module called for: pandas._libs.tslibs.dateutil [assertion]
      find_module called for: pandas._libs.tslibs.dateutil [assertion]
      find_module called for: pandas._libs.tslibs.dateutil [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.collections [assertion]
      find_module called for: pandas._libs.warnings [assertion]
      find_module called for: pandas._libs.tslibs.fields [assertion]
      find_module called for: pandas._libs.tslibs.numpy [assertion]
      find_module called for: pandas._libs.pytz [assertion]
      find_module called for: pandas._libs.hashtable [assertion]
      find_module called for: pandas._libs.lib [assertion]
      find_module called for: backports_abc [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.sys [assertion]
      find_module called for: pandas._libs.interval [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.numbers [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.distutils [assertion]
      find_module called for: pandas._libs.sys [assertion]
      find_module called for: pandas._libs.decimal [assertion]
      find_module called for: pandas._libs.datetime [assertion]
      find_module called for: backports_abc [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas.core [assertion]
      find_module called for: pandas.core.config_init [assertion]
      find_module called for: pandas.core.config [assertion]
      find_module called for: pandas.io [assertion]
      find_module called for: pandas.io.formats [assertion]
      find_module called for: pandas.io.formats.printing [assertion]
      find_module called for: pandas.core.dtypes [assertion]
      find_module called for: pandas.core.dtypes.inference [assertion]
      find_module called for: pandas.io.formats.console [assertion]
      find_module called for: pandas.io.formats.terminal [assertion]
      find_module called for: pandas.core.api [assertion]
      find_module called for: pandas.core.algorithms [assertion]
      find_module called for: pandas.core.dtypes.cast [assertion]
      find_module called for: pandas.core.dtypes.common [assertion]
      find_module called for: pandas._libs.algos [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas.core.dtypes.dtypes [assertion]
      find_module called for: pandas.core.dtypes.generic [assertion]
      find_module called for: pandas.core.dtypes.missing [assertion]
      find_module called for: pandas.core.common [assertion]
      find_module called for: pandas.api [assertion]
      find_module called for: pandas.api.types [assertion]
      find_module called for: pandas.core.dtypes.api [assertion]
      find_module called for: pandas.core.dtypes.concat [assertion]
      find_module called for: pandas.errors [assertion]
      find_module called for: pandas.core.categorical [assertion]
      find_module called for: pandas.core.accessor [assertion]
      find_module called for: pandas.core.base [assertion]
      find_module called for: pandas.util [assertion]
      find_module called for: pandas.util._decorators [assertion]
      find_module called for: pandas._libs.properties [assertion]
      find_module called for: pandas.core.util [assertion]
      find_module called for: pandas.core.util.hashing [assertion]
      find_module called for: pandas._libs.hashing [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas.util._validators [assertion]
      find_module called for: pandas.core.nanops [assertion]
      find_module called for: bottleneck [assertion]
      find_module called for: pandas.compat.numpy.function [assertion]
      find_module called for: pandas.core.missing [assertion]
      find_module called for: pandas.core.groupby [assertion]
      find_module called for: pandas.core.index [assertion]
      find_module called for: pandas.core.indexes [assertion]
      find_module called for: pandas.core.indexes.api [assertion]
      find_module called for: pandas.core.indexes.base [assertion]
      find_module called for: pandas._libs.index [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.datetime [assertion]
      find_module called for: pandas._libs.join [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas.core.indexes.frozen [assertion]
      find_module called for: pandas.core.sorting [assertion]
      find_module called for: pandas.core.ops [assertion]
      find_module called for: pandas.core.strings [assertion]
      find_module called for: pandas.core.indexes.category [assertion]
      find_module called for: pandas.core.indexes.multi [assertion]
      find_module called for: pandas.core.indexes.interval [assertion]
      find_module called for: pandas.core.indexes.datetimes [assertion]
      find_module called for: pandas.core.indexes.numeric [assertion]
      find_module called for: pandas.tseries [assertion]
      find_module called for: pandas.tseries.frequencies [assertion]
      find_module called for: pandas.tseries.offsets [assertion]
      find_module called for: pandas.core.tools [assertion]
      find_module called for: pandas.core.tools.datetimes [assertion]
      find_module called for: pandas._libs.tslibs.strptime [assertion]
      find_module called for: pandas._libs.tslibs.time [assertion]
      find_module called for: pandas._libs.tslibs.locale [assertion]
      find_module called for: pandas._libs.tslibs.calendar [assertion]
      find_module called for: pandas._libs.tslibs.re [assertion]
      find_module called for: pandas._libs.tslibs.thread [assertion]
      find_module called for: thread [assertion]
      find_module called for: pandas._libs.tslibs._thread [assertion]
      find_module called for: pandas._libs.tslibs.numpy [assertion]
      find_module called for: pandas._libs.tslibs.datetime [assertion]
      find_module called for: dateutil.easter [assertion]
      find_module called for: pandas._libs.tslibs.frequencies [assertion]
      find_module called for: pandas._libs.tslibs.re [assertion]
      find_module called for: pandas._libs.tslibs.numpy [assertion]
      find_module called for: pandas.core.indexes.datetimelike [assertion]
      find_module called for: pandas.core.tools.timedeltas [assertion]
      find_module called for: pandas._libs.period [assertion]
      find_module called for: pandas._libs.datetime [assertion]
      find_module called for: pandas._libs.operator [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas.core.indexes.timedeltas [assertion]
      find_module called for: pandas.core.indexes.range [assertion]
      find_module called for: pandas.core.indexes.period [assertion]
      find_module called for: pandas.core.frame [assertion]
      find_module called for: pandas.core.generic [assertion]
      find_module called for: pandas.core.indexing [assertion]
      find_module called for: pandas.core.internals [assertion]
      find_module called for: pandas.core.sparse [assertion]
      find_module called for: pandas.core.sparse.array [assertion]
      find_module called for: pandas._libs.sparse [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.operator [assertion]
      find_module called for: pandas._libs.sys [assertion]
      find_module called for: pandas._libs.distutils [assertion]
      find_module called for: pandas.io.formats.format [assertion]
      find_module called for: pandas.io.common [assertion]
      find_module called for: pandas.io.formats.common [assertion]
      find_module called for: pandas.core.series [assertion]
      find_module called for: pandas.core.indexes.accessors [assertion]
      find_module called for: pandas.plotting [assertion]
      find_module called for: pandas.plotting._misc [assertion]
      find_module called for: pandas.plotting._style [assertion]
      find_module called for: pandas.plotting._compat [assertion]
      find_module called for: pandas.plotting._tools [assertion]
      find_module called for: pandas.plotting._core [assertion]
      find_module called for: pandas.plotting._converter [assertion]
      find_module called for: matplotlib [assertion]
      find_module called for: distutils.sysconfig [assertion]
      find_module called for: distutils.errors [assertion]
      find_module called for: matplotlib.cbook [assertion]
      find_module called for: matplotlib.compat [assertion]
      find_module called for: matplotlib.compat.subprocess [assertion]
      find_module called for: matplotlib.rcsetup [assertion]
      find_module called for: matplotlib.fontconfig_pattern [assertion]
      find_module called for: pyparsing [assertion]
      find_module called for: matplotlib.colors [assertion]
      find_module called for: matplotlib._color_data [assertion]
      find_module called for: cycler [assertion]
      find_module called for: matplotlib._version [assertion]
      find_module called for: matplotlib.units [assertion]
      find_module called for: matplotlib.dates [assertion]
      find_module called for: dateutil.rrule [assertion]
      find_module called for: matplotlib.ticker [assertion]
      find_module called for: matplotlib.transforms [assertion]
      find_module called for: matplotlib._path [assertion]
      find_module called for: matplotlib.path [assertion]
      find_module called for: pandas.core.window [assertion]
      find_module called for: pandas._libs.window [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.random [assertion]
      find_module called for: pandas.core.panel [assertion]
      find_module called for: pandas.core.reshape [assertion]
      find_module called for: pandas.core.reshape.util [assertion]
      find_module called for: pandas._libs.groupby [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas.core.panel4d [assertion]
      find_module called for: pandas.core.panelnd [assertion]
      find_module called for: pandas.core.reshape.reshape [assertion]
      find_module called for: pandas.core.sparse.api [assertion]
      find_module called for: pandas.core.sparse.list [assertion]
      find_module called for: pandas.core.sparse.series [assertion]
      find_module called for: pandas.core.sparse.scipy_sparse [assertion]
      find_module called for: pandas.core.sparse.frame [assertion]
      find_module called for: pandas._libs.reshape [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas.core.tools.numeric [assertion]
      find_module called for: pandas.util._depr_module [assertion]
      find_module called for: pandas.stats [assertion]
      find_module called for: pandas.stats.api [assertion]
      find_module called for: pandas.stats.moments [assertion]
      find_module called for: pandas.tseries.api [assertion]
      find_module called for: pandas.core.computation [assertion]
      find_module called for: pandas.core.computation.api [assertion]
      find_module called for: pandas.core.computation.eval [assertion]
      find_module called for: pandas.core.computation.scope [assertion]
      find_module called for: pandas.core.computation.engines [assertion]
      find_module called for: pandas.core.computation.align [assertion]
      find_module called for: pandas.core.computation.common [assertion]
      find_module called for: pandas.core.computation.ops [assertion]
      find_module called for: pandas.core.reshape.api [assertion]
      find_module called for: pandas.core.reshape.concat [assertion]
      find_module called for: pandas.core.reshape.merge [assertion]
      find_module called for: pandas.core.reshape.pivot [assertion]
      find_module called for: pandas.core.reshape.tile [assertion]
      find_module called for: pandas.tools [assertion]
      find_module called for: pandas.tools.plotting [assertion]
      find_module called for: pandas.util._print_versions [assertion]
      find_module called for: pandas.io.api [assertion]
      find_module called for: pandas.io.parsers [assertion]
      find_module called for: pandas.io.date_converters [assertion]
      find_module called for: pandas._libs.parsers [assertion]
      find_module called for: pandas._libs.warnings [assertion]
      find_module called for: pandas._libs.csv [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.time [assertion]
      find_module called for: pandas._libs.os [assertion]
      find_module called for: pandas._libs.sys [assertion]
      find_module called for: pandas.io.clipboards [assertion]
      find_module called for: pandas.io.excel [assertion]
      find_module called for: pandas._libs.json [assertion]
      find_module called for: pandas.compat.openpyxl_compat [assertion]
      find_module called for: pandas.io.pytables [assertion]
      find_module called for: pandas.core.computation.pytables [assertion]
      find_module called for: pandas.core.computation.expr [assertion]
      find_module called for: pandas.io.json [assertion]
      find_module called for: pandas.io.json.json [assertion]
      find_module called for: pandas.io.json.normalize [assertion]
      find_module called for: pandas.io.json.table_schema [assertion]
      find_module called for: pandas.io.html [assertion]
      find_module called for: pandas.io.sql [assertion]
      find_module called for: pandas.io.sas [assertion]
      find_module called for: pandas.io.sas.sasreader [assertion]
      find_module called for: pandas.io.feather_format [assertion]
      find_module called for: pandas.io.parquet [assertion]
      find_module called for: pandas.io.stata [assertion]
      find_module called for: pandas.io.pickle [assertion]
      find_module called for: pandas.compat.pickle_compat [assertion]
      find_module called for: pandas.io.packers [assertion]
      find_module called for: pandas.io.msgpack [assertion]
      find_module called for: pandas.io.msgpack.exceptions [assertion]
      find_module called for: pandas.io.msgpack._version [assertion]
      find_module called for: pandas.io.msgpack._packer [assertion]
      find_module called for: pandas.io.msgpack.pandas [assertion]
      find_module called for: pandas.io.msgpack.pandas [assertion]
      find_module called for: pandas.io.msgpack.numpy [assertion]
      find_module called for: pandas.io.msgpack._unpacker [assertion]
      find_module called for: pandas.io.msgpack.pandas [assertion]
      find_module called for: pandas.io.msgpack.pandas [assertion]
      find_module called for: pandas.util._move [assertion]
      find_module called for: blosc [assertion]
      find_module called for: pandas.io.gbq [assertion]
      find_module called for: pandas.util._tester [assertion]
      find_module called for: pandas.testing [assertion]
      find_module called for: pandas.util.testing [assertion]
      find_module called for: pandas._libs.testing [assertion]
      find_module called for: pandas._libs.numpy [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._libs.pandas [assertion]
      find_module called for: pandas._version [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/cli.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/cli.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/constants.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/constants.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/constants.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/constants.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/constants.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/coordinates.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/coordinates.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/coordinates.py'>
      find_module called for: poliastro.coordinates [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/coordinates.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/coordinates.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/examples.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/examples.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/examples.py'>
      find_module called for: poliastro.examples [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/examples.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/examples.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/frames.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/frames.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/frames.py'>
      find_module called for: poliastro.frames [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/frames.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/frames.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/hyper.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/hyper.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/hyper.py'>
      find_module called for: poliastro.hyper [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/hyper.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/hyper.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/jit.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/jit.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/jit.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/jit.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/jit.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/maneuver.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/maneuver.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/maneuver.py'>
      find_module called for: poliastro.maneuver [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/maneuver.py' lenresult=1 outcome='passed'> [hook]
    genitems <DoctestItem 'poliastro.maneuver.Maneuver'> [collection]
      pytest_itemcollected [hook]
          item: <DoctestItem 'poliastro.maneuver.Maneuver'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/maneuver.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/patched_conics.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/patched_conics.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/patched_conics.py'>
      find_module called for: poliastro.patched_conics [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/patched_conics.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/patched_conics.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/plotting.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/plotting.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/plotting.py'>
      find_module called for: poliastro.plotting [assertion]
      find_module called for: typing [assertion]
      find_module called for: matplotlib.pyplot [assertion]
      find_module called for: matplotlib.colorbar [assertion]
      find_module called for: matplotlib.artist [assertion]
      find_module called for: matplotlib.docstring [assertion]
      find_module called for: matplotlib.collections [assertion]
      find_module called for: matplotlib.cm [assertion]
      find_module called for: matplotlib._cm [assertion]
      find_module called for: matplotlib._cm_listed [assertion]
      find_module called for: matplotlib.mlab [assertion]
      find_module called for: matplotlib.lines [assertion]
      find_module called for: matplotlib.markers [assertion]
      find_module called for: matplotlib.contour [assertion]
      find_module called for: matplotlib._cntr [assertion]
      find_module called for: matplotlib._contour [assertion]
      find_module called for: matplotlib.font_manager [assertion]
      find_module called for: matplotlib.afm [assertion]
      find_module called for: matplotlib._mathtext_data [assertion]
      find_module called for: matplotlib.ft2font [assertion]
      find_module called for: matplotlib.text [assertion]
      find_module called for: matplotlib.patches [assertion]
      find_module called for: matplotlib.bezier [assertion]
      find_module called for: matplotlib.backend_bases [assertion]
      find_module called for: matplotlib.widgets [assertion]
      find_module called for: matplotlib._pylab_helpers [assertion]
      find_module called for: matplotlib.tight_bbox [assertion]
      find_module called for: matplotlib.textpath [assertion]
      find_module called for: matplotlib.mathtext [assertion]
      find_module called for: matplotlib._png [assertion]
      find_module called for: matplotlib.dviread [assertion]
      find_module called for: six.moves.urllib.parse [assertion]
      find_module called for: matplotlib.backend_tools [assertion]
      find_module called for: PIL [assertion]
      find_module called for: PIL.Image [assertion]
      find_module called for: FixTk [assertion]
      find_module called for: PIL._imaging [assertion]
      find_module called for: PIL.ImageMode [assertion]
      find_module called for: PIL._binary [assertion]
      find_module called for: PIL._util [assertion]
      find_module called for: cffi [assertion]
      find_module called for: cffi.api [assertion]
      find_module called for: cffi.lock [assertion]
      find_module called for: cffi.error [assertion]
      find_module called for: cffi.model [assertion]
      find_module called for: matplotlib.texmanager [assertion]
      find_module called for: matplotlib.blocking_input [assertion]
      find_module called for: matplotlib.gridspec [assertion]
      find_module called for: matplotlib.style [assertion]
      find_module called for: matplotlib.style.core [assertion]
      find_module called for: matplotlib.figure [assertion]
      find_module called for: matplotlib.image [assertion]
      find_module called for: matplotlib._image [assertion]
      find_module called for: matplotlib.axes [assertion]
      find_module called for: matplotlib.axes._subplots [assertion]
      find_module called for: matplotlib.axes._axes [assertion]
      find_module called for: matplotlib.legend [assertion]
      find_module called for: matplotlib.offsetbox [assertion]
      find_module called for: matplotlib.container [assertion]
      find_module called for: matplotlib.legend_handler [assertion]
      find_module called for: matplotlib.quiver [assertion]
      find_module called for: matplotlib.stackplot [assertion]
      find_module called for: matplotlib.streamplot [assertion]
      find_module called for: matplotlib.table [assertion]
      find_module called for: matplotlib.tri [assertion]
      find_module called for: matplotlib.tri.triangulation [assertion]
      find_module called for: matplotlib._tri [assertion]
      find_module called for: matplotlib._qhull [assertion]
      find_module called for: matplotlib.tri.tricontour [assertion]
      find_module called for: matplotlib.tri.tritools [assertion]
      find_module called for: matplotlib.tri.trifinder [assertion]
      find_module called for: matplotlib.tri.triinterpolate [assertion]
      find_module called for: matplotlib.tri.trirefine [assertion]
      find_module called for: matplotlib.tri.tripcolor [assertion]
      find_module called for: matplotlib.tri.triplot [assertion]
      find_module called for: matplotlib.axes._base [assertion]
      find_module called for: matplotlib.axis [assertion]
      find_module called for: matplotlib.scale [assertion]
      find_module called for: matplotlib.spines [assertion]
      find_module called for: matplotlib.projections [assertion]
      find_module called for: matplotlib.projections.geo [assertion]
      find_module called for: matplotlib.projections.polar [assertion]
      find_module called for: matplotlib.backends [assertion]
      find_module called for: matplotlib.backends.backend_tkagg [assertion]
      find_module called for: tkinter [assertion]
      find_module called for: _tkinter [assertion]
      find_module called for: tkinter.constants [assertion]
      find_module called for: tkinter.filedialog [assertion]
      find_module called for: tkinter.dialog [assertion]
      find_module called for: tkinter.commondialog [assertion]
      find_module called for: matplotlib.backends.tkagg [assertion]
      find_module called for: matplotlib.backends._tkagg [assertion]
      find_module called for: matplotlib.backends.backend_agg [assertion]
      find_module called for: matplotlib.backends._backend_agg [assertion]
      find_module called for: matplotlib.backends.windowing [assertion]
      find_module called for: matplotlib.backend_managers [assertion]
      find_module called for: plotly [assertion]
      find_module called for: plotly.plotly [assertion]
      find_module called for: plotly.plotly.plotly [assertion]
      find_module called for: webbrowser [assertion]
      find_module called for: plotly.exceptions [assertion]
      find_module called for: plotly.api [assertion]
      find_module called for: plotly.api.utils [assertion]
      find_module called for: plotly.files [assertion]
      find_module called for: plotly.session [assertion]
      find_module called for: plotly.tools [assertion]
      find_module called for: plotly.optional_imports [assertion]
      find_module called for: plotly.utils [assertion]
      find_module called for: decorator [assertion]
      find_module called for: sage [assertion]
      find_module called for: IPython [assertion]
      find_module called for: IPython.core [assertion]
      find_module called for: IPython.core.getipython [assertion]
      find_module called for: IPython.core.release [assertion]
      find_module called for: IPython.core.application [assertion]
      find_module called for: traitlets [assertion]
      find_module called for: traitlets.traitlets [assertion]
      find_module called for: traitlets.utils [assertion]
      find_module called for: traitlets.utils.getargspec [assertion]
      find_module called for: traitlets.utils.importstring [assertion]
      find_module called for: ipython_genutils [assertion]
      find_module called for: ipython_genutils._version [assertion]
      find_module called for: ipython_genutils.py3compat [assertion]
      find_module called for: ipython_genutils.encoding [assertion]
      find_module called for: traitlets.utils.sentinel [assertion]
      find_module called for: traitlets.utils.bunch [assertion]
      find_module called for: traitlets._version [assertion]
      find_module called for: traitlets.config [assertion]
      find_module called for: traitlets.config.application [assertion]
      find_module called for: traitlets.config.configurable [assertion]
      find_module called for: traitlets.config.loader [assertion]
      find_module called for: ipython_genutils.path [assertion]
      find_module called for: ipython_genutils.text [assertion]
      find_module called for: ipython_genutils.importstring [assertion]
      find_module called for: IPython.core.crashhandler [assertion]
      find_module called for: IPython.core.ultratb [assertion]
      find_module called for: pydoc [assertion]
      find_module called for: IPython.core.debugger [assertion]
      find_module called for: IPython.utils [assertion]
      find_module called for: IPython.utils.PyColorize [assertion]
      find_module called for: IPython.utils.coloransi [assertion]
      find_module called for: IPython.utils.ipstruct [assertion]
      find_module called for: IPython.utils.colorable [assertion]
      find_module called for: pygments [assertion]
      find_module called for: pygments.util [assertion]
      find_module called for: IPython.utils.py3compat [assertion]
      find_module called for: IPython.utils.encoding [assertion]
      find_module called for: IPython.core.excolors [assertion]
      find_module called for: IPython.testing [assertion]
      find_module called for: IPython.testing.skipdoctest [assertion]
      find_module called for: IPython.core.display_trap [assertion]
      find_module called for: IPython.utils.openpy [assertion]
      find_module called for: IPython.utils.path [assertion]
      find_module called for: IPython.utils.process [assertion]
      find_module called for: IPython.utils._process_posix [assertion]
      find_module called for: pexpect [assertion]
      find_module called for: pexpect.exceptions [assertion]
      find_module called for: pexpect.utils [assertion]
      find_module called for: pexpect.expect [assertion]
      find_module called for: pexpect.pty_spawn [assertion]
      find_module called for: pty [assertion]
      find_module called for: tty [assertion]
      find_module called for: ptyprocess [assertion]
      find_module called for: ptyprocess.ptyprocess [assertion]
      find_module called for: resource [assertion]
      find_module called for: ptyprocess.util [assertion]
      find_module called for: pexpect.spawnbase [assertion]
      find_module called for: pexpect.run [assertion]
      find_module called for: IPython.utils._process_common [assertion]
      find_module called for: IPython.utils.decorators [assertion]
      find_module called for: IPython.utils.data [assertion]
      find_module called for: IPython.utils.terminal [assertion]
      find_module called for: IPython.utils.sysinfo [assertion]
      find_module called for: IPython.utils._sysinfo [assertion]
      find_module called for: IPython.core.profiledir [assertion]
      find_module called for: IPython.paths [assertion]
      find_module called for: IPython.utils.importstring [assertion]
      find_module called for: IPython.terminal [assertion]
      find_module called for: IPython.terminal.embed [assertion]
      find_module called for: IPython.core.compilerop [assertion]
      find_module called for: IPython.core.magic_arguments [assertion]
      find_module called for: IPython.core.error [assertion]
      find_module called for: IPython.utils.text [assertion]
      find_module called for: IPython.core.magic [assertion]
      find_module called for: getopt [assertion]
      find_module called for: IPython.core.oinspect [assertion]
      find_module called for: IPython.core.page [assertion]
      find_module called for: IPython.core.display [assertion]
      find_module called for: IPython.lib [assertion]
      find_module called for: IPython.lib.security [assertion]
      find_module called for: getpass [assertion]
      find_module called for: IPython.lib.pretty [assertion]
      find_module called for: IPython.utils.dir2 [assertion]
      find_module called for: IPython.utils.wildcard [assertion]
      find_module called for: pygments.lexers [assertion]
      find_module called for: pygments.lexers._mapping [assertion]
      find_module called for: pygments.modeline [assertion]
      find_module called for: pygments.plugin [assertion]
      find_module called for: pygments.lexers.python [assertion]
      find_module called for: pygments.lexer [assertion]
      find_module called for: pygments.filter [assertion]
      find_module called for: pygments.filters [assertion]
      find_module called for: pygments.token [assertion]
      find_module called for: pygments.regexopt [assertion]
      find_module called for: pygments.unistring [assertion]
      find_module called for: pygments.formatters [assertion]
      find_module called for: pygments.formatters._mapping [assertion]
      find_module called for: pygments.formatters.html [assertion]
      find_module called for: pygments.formatter [assertion]
      find_module called for: pygments.styles [assertion]
      find_module called for: ctags [assertion]
      find_module called for: IPython.core.inputsplitter [assertion]
      find_module called for: IPython.core.inputtransformer [assertion]
      find_module called for: IPython.core.splitinput [assertion]
      find_module called for: IPython.utils.tokenize2 [assertion]
      find_module called for: IPython.core.interactiveshell [assertion]
      find_module called for: runpy [assertion]
      find_module called for: pickleshare [assertion]
      find_module called for: cPickle [assertion]
      find_module called for: IPython.core.prefilter [assertion]
      find_module called for: IPython.core.autocall [assertion]
      find_module called for: IPython.core.macro [assertion]
      find_module called for: IPython.core.alias [assertion]
      find_module called for: IPython.core.builtin_trap [assertion]
      find_module called for: IPython.core.events [assertion]
      find_module called for: IPython.core.displayhook [assertion]
      find_module called for: IPython.core.displaypub [assertion]
      find_module called for: IPython.core.extensions [assertion]
      find_module called for: IPython.core.formatters [assertion]
      find_module called for: IPython.utils.sentinel [assertion]
      find_module called for: IPython.core.history [assertion]
      find_module called for: sqlite3 [assertion]
      find_module called for: sqlite3.dbapi2 [assertion]
      find_module called for: _sqlite3 [assertion]
      find_module called for: IPython.core.logger [assertion]
      find_module called for: IPython.core.payload [assertion]
      find_module called for: IPython.core.usage [assertion]
      find_module called for: IPython.display [assertion]
      find_module called for: IPython.lib.display [assertion]
      find_module called for: IPython.utils.io [assertion]
      find_module called for: IPython.utils.capture [assertion]
      find_module called for: IPython.utils.strdispatch [assertion]
      find_module called for: IPython.core.hooks [assertion]
      find_module called for: IPython.utils.syspathcontext [assertion]
      find_module called for: IPython.utils.tempdir [assertion]
      find_module called for: IPython.utils.contexts [assertion]
      find_module called for: docrepr [assertion]
      find_module called for: IPython.terminal.interactiveshell [assertion]
      find_module called for: prompt_toolkit [assertion]
      find_module called for: prompt_toolkit.interface [assertion]
      find_module called for: prompt_toolkit.application [assertion]
      find_module called for: prompt_toolkit.buffer [assertion]
      find_module called for: prompt_toolkit.auto_suggest [assertion]
      find_module called for: prompt_toolkit.filters [assertion]
      find_module called for: prompt_toolkit.filters.base [assertion]
      find_module called for: prompt_toolkit.utils [assertion]
      find_module called for: wcwidth [assertion]
      find_module called for: wcwidth.wcwidth [assertion]
      find_module called for: wcwidth.table_wide [assertion]
      find_module called for: wcwidth.table_zero [assertion]
      find_module called for: prompt_toolkit.filters.cli [assertion]
      find_module called for: prompt_toolkit.enums [assertion]
      find_module called for: prompt_toolkit.key_binding [assertion]
      find_module called for: prompt_toolkit.key_binding.vi_state [assertion]
      find_module called for: prompt_toolkit.cache [assertion]
      find_module called for: prompt_toolkit.filters.types [assertion]
      find_module called for: prompt_toolkit.filters.utils [assertion]
      find_module called for: prompt_toolkit.clipboard [assertion]
      find_module called for: prompt_toolkit.clipboard.base [assertion]
      find_module called for: prompt_toolkit.selection [assertion]
      find_module called for: prompt_toolkit.clipboard.in_memory [assertion]
      find_module called for: prompt_toolkit.completion [assertion]
      find_module called for: prompt_toolkit.document [assertion]
      find_module called for: prompt_toolkit.history [assertion]
      find_module called for: prompt_toolkit.search_state [assertion]
      find_module called for: prompt_toolkit.validation [assertion]
      find_module called for: prompt_toolkit.buffer_mapping [assertion]
      find_module called for: prompt_toolkit.key_binding.bindings [assertion]
      find_module called for: prompt_toolkit.key_binding.bindings.basic [assertion]
      find_module called for: prompt_toolkit.keys [assertion]
      find_module called for: prompt_toolkit.layout [assertion]
      find_module called for: prompt_toolkit.layout.containers [assertion]
      find_module called for: prompt_toolkit.layout.controls [assertion]
      find_module called for: prompt_toolkit.mouse_events [assertion]
      find_module called for: prompt_toolkit.token [assertion]
      find_module called for: prompt_toolkit.layout.lexers [assertion]
      find_module called for: prompt_toolkit.layout.utils [assertion]
      find_module called for: prompt_toolkit.layout.processors [assertion]
      find_module called for: prompt_toolkit.reactive [assertion]
      find_module called for: prompt_toolkit.layout.screen [assertion]
      find_module called for: prompt_toolkit.layout.dimension [assertion]
      find_module called for: prompt_toolkit.layout.margins [assertion]
      find_module called for: prompt_toolkit.renderer [assertion]
      find_module called for: prompt_toolkit.layout.mouse_handlers [assertion]
      find_module called for: prompt_toolkit.output [assertion]
      find_module called for: prompt_toolkit.styles [assertion]
      find_module called for: prompt_toolkit.styles.base [assertion]
      find_module called for: prompt_toolkit.styles.defaults [assertion]
      find_module called for: prompt_toolkit.styles.from_dict [assertion]
      find_module called for: prompt_toolkit.styles.utils [assertion]
      find_module called for: prompt_toolkit.styles.from_pygments [assertion]
      find_module called for: pygments.style [assertion]
      find_module called for: pygments.styles.default [assertion]
      find_module called for: prompt_toolkit.key_binding.bindings.named_commands [assertion]
      find_module called for: prompt_toolkit.key_binding.bindings.completion [assertion]
      find_module called for: prompt_toolkit.key_binding.registry [assertion]
      find_module called for: prompt_toolkit.key_binding.input_processor [assertion]
      find_module called for: prompt_toolkit.key_binding.bindings.emacs [assertion]
      find_module called for: prompt_toolkit.key_binding.bindings.scroll [assertion]
      find_module called for: prompt_toolkit.key_binding.bindings.vi [assertion]
      find_module called for: prompt_toolkit.key_binding.digraphs [assertion]
      find_module called for: prompt_toolkit.key_binding.defaults [assertion]
      find_module called for: prompt_toolkit.eventloop [assertion]
      find_module called for: prompt_toolkit.eventloop.base [assertion]
      find_module called for: prompt_toolkit.eventloop.callbacks [assertion]
      find_module called for: prompt_toolkit.input [assertion]
      find_module called for: prompt_toolkit.terminal [assertion]
      find_module called for: prompt_toolkit.terminal.vt100_input [assertion]
      find_module called for: prompt_toolkit.shortcuts [assertion]
      find_module called for: prompt_toolkit.layout.menus [assertion]
      find_module called for: prompt_toolkit.layout.prompt [assertion]
      find_module called for: prompt_toolkit.layout.toolbars [assertion]
      find_module called for: prompt_toolkit.terminal.vt100_output [assertion]
      find_module called for: prompt_toolkit.key_binding.manager [assertion]
      find_module called for: IPython.terminal.debugger [assertion]
      find_module called for: IPython.core.completer [assertion]
      find_module called for: IPython.core.latex_symbols [assertion]
      find_module called for: IPython.utils.generics [assertion]
      find_module called for: simplegeneric [assertion]
      find_module called for: jedi [assertion]
      find_module called for: jedi.api [assertion]
      find_module called for: parso [assertion]
      find_module called for: parso.parser [assertion]
      find_module called for: parso.tree [assertion]
      find_module called for: parso._compatibility [assertion]
      find_module called for: parso.pgen2 [assertion]
      find_module called for: parso.pgen2.parse [assertion]
      find_module called for: parso.python [assertion]
      find_module called for: parso.python.tokenize [assertion]
      find_module called for: parso.python.token [assertion]
      find_module called for: parso.utils [assertion]
      find_module called for: parso.grammar [assertion]
      find_module called for: parso.pgen2.pgen [assertion]
      find_module called for: parso.pgen2.grammar [assertion]
      find_module called for: parso.python.diff [assertion]
      find_module called for: parso.python.parser [assertion]
      find_module called for: parso.python.tree [assertion]
      find_module called for: parso.python.prefix [assertion]
      find_module called for: parso.cache [assertion]
      find_module called for: parso.python.errors [assertion]
      find_module called for: parso.normalizer [assertion]
      find_module called for: parso.python.pep8 [assertion]
      find_module called for: parso.python.fstring [assertion]
      find_module called for: jedi.parser_utils [assertion]
      find_module called for: jedi._compatibility [assertion]
      find_module called for: jedi.debug [assertion]
      find_module called for: colorama [assertion]
      find_module called for: colorama.initialise [assertion]
      find_module called for: colorama.ansitowin32 [assertion]
      find_module called for: colorama.ansi [assertion]
      find_module called for: colorama.winterm [assertion]
      find_module called for: colorama.win32 [assertion]
      find_module called for: jedi.settings [assertion]
      find_module called for: jedi.cache [assertion]
      find_module called for: jedi.api.classes [assertion]
      find_module called for: jedi.common [assertion]
      find_module called for: jedi.evaluate [assertion]
      find_module called for: jedi.evaluate.representation [assertion]
      find_module called for: jedi.evaluate.cache [assertion]
      find_module called for: jedi.evaluate.compiled [assertion]
      find_module called for: jedi.evaluate.filters [assertion]
      find_module called for: jedi.evaluate.flow_analysis [assertion]
      find_module called for: jedi.evaluate.context [assertion]
      find_module called for: jedi.evaluate.compiled.getattr_static [assertion]
      find_module called for: jedi.evaluate.compiled.fake [assertion]
      find_module called for: jedi.evaluate.recursion [assertion]
      find_module called for: jedi.evaluate.iterable [assertion]
      find_module called for: jedi.evaluate.helpers [assertion]
      find_module called for: jedi.evaluate.analysis [assertion]
      find_module called for: jedi.evaluate.pep0484 [assertion]
      find_module called for: jedi.evaluate.precedence [assertion]
      find_module called for: jedi.evaluate.docstrings [assertion]
      find_module called for: numpydoc [assertion]
      find_module called for: numpydoc.numpydoc [assertion]
      find_module called for: sphinx [assertion]
      find_module called for: sphinx.cmd [assertion]
      find_module called for: sphinx.cmd.build [assertion]
      find_module called for: sphinx.deprecation [assertion]
      find_module called for: numpydoc.docscrape_sphinx [assertion]
      find_module called for: jinja2 [assertion]
      find_module called for: jinja2.environment [assertion]
      find_module called for: jinja2.nodes [assertion]
      find_module called for: jinja2.utils [assertion]
      find_module called for: jinja2._compat [assertion]
      find_module called for: markupsafe [assertion]
      find_module called for: markupsafe._compat [assertion]
      find_module called for: markupsafe._speedups [assertion]
      find_module called for: jinja2.defaults [assertion]
      find_module called for: jinja2.filters [assertion]
      find_module called for: jinja2.runtime [assertion]
      find_module called for: jinja2.exceptions [assertion]
      find_module called for: jinja2.tests [assertion]
      find_module called for: jinja2.lexer [assertion]
      find_module called for: jinja2._identifier [assertion]
      find_module called for: jinja2.parser [assertion]
      find_module called for: jinja2.compiler [assertion]
      find_module called for: jinja2.visitor [assertion]
      find_module called for: jinja2.optimizer [assertion]
      find_module called for: jinja2.idtracking [assertion]
      find_module called for: jinja2.loaders [assertion]
      find_module called for: jinja2.bccache [assertion]
      find_module called for: jinja2.asyncsupport [assertion]
      find_module called for: asyncio [assertion]
      find_module called for: asyncio.selectors [assertion]
      find_module called for: asyncio.base_events [assertion]
      find_module called for: concurrent [assertion]
      find_module called for: concurrent.futures [assertion]
      find_module called for: concurrent.futures._base [assertion]
      find_module called for: concurrent.futures.process [assertion]
      find_module called for: multiprocessing.connection [assertion]
      find_module called for: _multiprocessing [assertion]
      find_module called for: _winapi [assertion]
      find_module called for: concurrent.futures.thread [assertion]
      find_module called for: asyncio.compat [assertion]
      find_module called for: asyncio.coroutines [assertion]
      find_module called for: asyncio.constants [assertion]
      find_module called for: asyncio.events [assertion]
      find_module called for: asyncio.base_futures [assertion]
      find_module called for: asyncio.log [assertion]
      find_module called for: asyncio.futures [assertion]
      find_module called for: _asyncio [assertion]
      find_module called for: asyncio.base_tasks [assertion]
      find_module called for: asyncio.tasks [assertion]
      find_module called for: asyncio.locks [assertion]
      find_module called for: asyncio.protocols [assertion]
      find_module called for: asyncio.queues [assertion]
      find_module called for: asyncio.streams [assertion]
      find_module called for: asyncio.subprocess [assertion]
      find_module called for: asyncio.transports [assertion]
      find_module called for: asyncio.unix_events [assertion]
      find_module called for: asyncio.base_subprocess [assertion]
      find_module called for: asyncio.selector_events [assertion]
      find_module called for: asyncio.sslproto [assertion]
      find_module called for: jinja2.asyncfilters [assertion]
      find_module called for: jinja2.sandbox [assertion]
      find_module called for: UserDict [assertion]
      find_module called for: sets [assertion]
      find_module called for: sphinx.jinja2glue [assertion]
      find_module called for: sphinx.application [assertion]
      find_module called for: docutils [assertion]
      find_module called for: docutils.nodes [assertion]
      find_module called for: docutils.parsers [assertion]
      find_module called for: docutils.parsers.rst [assertion]
      find_module called for: docutils.statemachine [assertion]
      find_module called for: docutils.utils [assertion]
      find_module called for: docutils.io [assertion]
      find_module called for: docutils._compat [assertion]
      find_module called for: docutils.utils.error_reporting [assertion]
      find_module called for: docutils.parsers.rst.states [assertion]
      find_module called for: docutils.parsers.rst.directives [assertion]
      find_module called for: docutils.parsers.rst.languages [assertion]
      find_module called for: docutils.parsers.rst.languages.en [assertion]
      find_module called for: docutils.parsers.rst.tableparser [assertion]
      find_module called for: docutils.parsers.rst.roles [assertion]
      find_module called for: docutils.utils.code_analyzer [assertion]
      find_module called for: docutils.utils.punctuation_chars [assertion]
      find_module called for: docutils.utils.roman [assertion]
      find_module called for: docutils.utils.urischemes [assertion]
      find_module called for: docutils.frontend [assertion]
      find_module called for: docutils.transforms [assertion]
      find_module called for: docutils.languages [assertion]
      find_module called for: docutils.transforms.universal [assertion]
      find_module called for: docutils.utils.smartquotes [assertion]
      find_module called for: sphinx.locale [assertion]
      find_module called for: sphinx.config [assertion]
      find_module called for: sphinx.errors [assertion]
      find_module called for: sphinx.util [assertion]
      find_module called for: sphinx.util.logging [assertion]
      find_module called for: logging.handlers [assertion]
      find_module called for: sphinx.util.console [assertion]
      find_module called for: sphinx.util.fileutil [assertion]
      find_module called for: sphinx.util.osutil [assertion]
      find_module called for: filecmp [assertion]
      find_module called for: sphinx.util.smartypants [assertion]
      find_module called for: sphinx.util.docutils [assertion]
      find_module called for: sphinx.util.nodes [assertion]
      find_module called for: sphinx.addnodes [assertion]
      find_module called for: sphinx.util.matching [assertion]
      find_module called for: sphinx.util.i18n [assertion]
      find_module called for: babel [assertion]
      find_module called for: babel.core [assertion]
      find_module called for: babel.localedata [assertion]
      find_module called for: babel._compat [assertion]
      find_module called for: babel.plural [assertion]
      find_module called for: babel.dates [assertion]
      find_module called for: babel.util [assertion]
      find_module called for: babel.localtime [assertion]
      find_module called for: babel.localtime._unix [assertion]
      find_module called for: babel.messages [assertion]
      find_module called for: babel.messages.catalog [assertion]
      find_module called for: babel.messages.plurals [assertion]
      find_module called for: babel.messages.mofile [assertion]
      find_module called for: babel.messages.pofile [assertion]
      find_module called for: sphinx.util.pycompat [assertion]
      find_module called for: sphinx.environment [assertion]
      find_module called for: sphinx.versioning [assertion]
      find_module called for: sphinx.transforms [assertion]
      find_module called for: docutils.transforms.parts [assertion]
      find_module called for: Levenshtein [assertion]
      find_module called for: sphinx.environment.adapters [assertion]
      find_module called for: sphinx.environment.adapters.indexentries [assertion]
      find_module called for: sphinx.environment.adapters.toctree [assertion]
      find_module called for: sphinx.io [assertion]
      find_module called for: docutils.core [assertion]
      find_module called for: docutils.readers [assertion]
      find_module called for: docutils.writers [assertion]
      find_module called for: docutils.readers.doctree [assertion]
      find_module called for: docutils.readers.standalone [assertion]
      find_module called for: docutils.transforms.frontmatter [assertion]
      find_module called for: docutils.transforms.references [assertion]
      find_module called for: docutils.transforms.misc [assertion]
      find_module called for: sphinx.transforms.compact_bullet_list [assertion]
      find_module called for: sphinx.transforms.i18n [assertion]
      find_module called for: sphinx.domains [assertion]
      find_module called for: sphinx.domains.std [assertion]
      find_module called for: sphinx.directives [assertion]
      find_module called for: sphinx.util.docfields [assertion]
      find_module called for: sphinx.directives.code [assertion]
      find_module called for: sphinx.directives.other [assertion]
      find_module called for: docutils.parsers.rst.directives.admonitions [assertion]
      find_module called for: docutils.parsers.rst.directives.misc [assertion]
      find_module called for: docutils.parsers.rst.directives.body [assertion]
      find_module called for: sphinx.directives.patches [assertion]
      find_module called for: docutils.parsers.rst.directives.images [assertion]
      find_module called for: docutils.parsers.rst.directives.html [assertion]
      find_module called for: docutils.transforms.components [assertion]
      find_module called for: docutils.parsers.rst.directives.tables [assertion]
      find_module called for: sphinx.roles [assertion]
      find_module called for: sphinx.util.rst [assertion]
      find_module called for: sphinx.util.parallel [assertion]
      find_module called for: sphinx.util.websupport [assertion]
      find_module called for: sphinxcontrib.websupport [assertion]
      find_module called for: sphinxcontrib.websupport.core [assertion]
      find_module called for: sphinx.util.jsonimpl [assertion]
      find_module called for: sphinxcontrib.websupport.errors [assertion]
      find_module called for: sphinxcontrib.websupport.search [assertion]
      find_module called for: sphinxcontrib.websupport.storage [assertion]
      find_module called for: sphinxcontrib.websupport.version [assertion]
      find_module called for: sphinxcontrib.websupport.utils [assertion]
      find_module called for: sphinx.events [assertion]
      find_module called for: sphinx.extension [assertion]
      find_module called for: sphinx.registry [assertion]
      find_module called for: sphinx.parsers [assertion]
      find_module called for: sphinx.util.tags [assertion]
      find_module called for: numpydoc.docscrape [assertion]
      find_module called for: sphinx.domains.c [assertion]
      find_module called for: sphinx.domains.python [assertion]
      find_module called for: jedi.evaluate.param [assertion]
      find_module called for: jedi.evaluate.imports [assertion]
      find_module called for: jedi.evaluate.sys_path [assertion]
      find_module called for: jedi.evaluate.site [assertion]
      find_module called for: jedi.evaluate.parser_cache [assertion]
      find_module called for: jedi.evaluate.stdlib [assertion]
      find_module called for: jedi.evaluate.instance [assertion]
      find_module called for: jedi.evaluate.finder [assertion]
      find_module called for: jedi.api.keywords [assertion]
      find_module called for: pydoc_data [assertion]
      find_module called for: pydoc_data.topics [assertion]
      find_module called for: jedi.api.interpreter [assertion]
      find_module called for: jedi.evaluate.compiled.mixed [assertion]
      find_module called for: jedi.api.usages [assertion]
      find_module called for: jedi.api.helpers [assertion]
      find_module called for: jedi.api.completion [assertion]
      find_module called for: IPython.terminal.ptutils [assertion]
      find_module called for: IPython.terminal.shortcuts [assertion]
      find_module called for: IPython.terminal.magics [assertion]
      find_module called for: IPython.lib.clipboard [assertion]
      find_module called for: IPython.terminal.pt_inputhooks [assertion]
      find_module called for: IPython.terminal.prompts [assertion]
      find_module called for: IPython.terminal.ipapp [assertion]
      find_module called for: IPython.core.magics [assertion]
      find_module called for: IPython.core.magics.auto [assertion]
      find_module called for: IPython.core.magics.basic [assertion]
      find_module called for: IPython.core.magics.code [assertion]
      find_module called for: IPython.core.magics.config [assertion]
      find_module called for: IPython.core.magics.display [assertion]
      find_module called for: IPython.core.magics.execution [assertion]
      find_module called for: cProfile [assertion]
      find_module called for: _lsprof [assertion]
      find_module called for: profile [assertion]
      find_module called for: pstats [assertion]
      find_module called for: IPython.utils.module_paths [assertion]
      find_module called for: IPython.utils.timing [assertion]
      find_module called for: IPython.core.magics.extension [assertion]
      find_module called for: IPython.core.magics.history [assertion]
      find_module called for: IPython.core.magics.logging [assertion]
      find_module called for: IPython.core.magics.namespace [assertion]
      find_module called for: IPython.core.magics.osm [assertion]
      find_module called for: IPython.core.magics.pylab [assertion]
      find_module called for: IPython.core.pylabtools [assertion]
      find_module called for: IPython.core.magics.script [assertion]
      find_module called for: IPython.lib.backgroundjobs [assertion]
      find_module called for: IPython.core.shellapp [assertion]
      find_module called for: IPython.extensions [assertion]
      find_module called for: IPython.extensions.storemagic [assertion]
      find_module called for: IPython.utils.frame [assertion]
      find_module called for: plotly.matplotlylib [assertion]
      find_module called for: plotly.matplotlylib.renderer [assertion]
      find_module called for: plotly.graph_objs [assertion]
      find_module called for: plotly.graph_objs.graph_objs [assertion]
      find_module called for: plotly.graph_reference [assertion]
      find_module called for: plotly.graph_objs.graph_objs_tools [assertion]
      find_module called for: plotly.matplotlylib.mplexporter [assertion]
      find_module called for: plotly.matplotlylib.mplexporter.renderers [assertion]
      find_module called for: plotly.matplotlylib.mplexporter.renderers.base [assertion]
      find_module called for: plotly.matplotlylib.mplexporter.utils [assertion]
      find_module called for: plotly.matplotlylib.mplexporter._py3k_compat [assertion]
      find_module called for: plotly.matplotlylib.mplexporter.renderers.vega_renderer [assertion]
      find_module called for: plotly.matplotlylib.mplexporter.exporter [assertion]
      find_module called for: plotly.matplotlylib.mplexporter.renderers.vincent_renderer [assertion]
      find_module called for: plotly.matplotlylib.mplexporter.renderers.fake_renderer [assertion]
      find_module called for: plotly.matplotlylib.mpltools [assertion]
      find_module called for: sage_salvus [assertion]
      find_module called for: plotly.api.v1 [assertion]
      find_module called for: plotly.api.v1.clientresp [assertion]
      find_module called for: plotly.config [assertion]
      find_module called for: plotly.version [assertion]
      find_module called for: plotly.api.v1.utils [assertion]
      find_module called for: plotly.api.v2 [assertion]
      find_module called for: plotly.api.v2.dash_apps [assertion]
      find_module called for: plotly.api.v2.utils [assertion]
      find_module called for: plotly.api.v2.dashboards [assertion]
      find_module called for: plotly.api.v2.files [assertion]
      find_module called for: plotly.api.v2.folders [assertion]
      find_module called for: plotly.api.v2.grids [assertion]
      find_module called for: plotly.api.v2.images [assertion]
      find_module called for: plotly.api.v2.plot_schema [assertion]
      find_module called for: plotly.api.v2.plots [assertion]
      find_module called for: plotly.api.v2.spectacle_presentations [assertion]
      find_module called for: plotly.api.v2.users [assertion]
      find_module called for: plotly.plotly.chunked_requests [assertion]
      find_module called for: plotly.plotly.chunked_requests.chunked_request [assertion]
      find_module called for: plotly.grid_objs [assertion]
      find_module called for: plotly.grid_objs.grid_objs [assertion]
      find_module called for: plotly.dashboard_objs [assertion]
      find_module called for: plotly.dashboard_objs.dashboard_objs [assertion]
      find_module called for: plotly.offline [assertion]
      find_module called for: plotly.offline.offline [assertion]
      find_module called for: plotly.colors [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/plotting.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/plotting.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/stumpff.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/stumpff.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/stumpff.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/stumpff.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/stumpff.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/testing.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/testing.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/testing.py'>
      find_module called for: poliastro.testing [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/testing.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/testing.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/util.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/util.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/util.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/util.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/util.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/iod/__init__.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/iod/__init__.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/iod/__init__.py'>
      find_module called for: poliastro.iod [assertion]
      find_module called for: poliastro.iod.izzo [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/iod/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/iod/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/iod/izzo.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/iod/izzo.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/iod/izzo.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/iod/izzo.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/iod/izzo.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/iod/vallado.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/iod/vallado.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/iod/vallado.py'>
      find_module called for: poliastro.iod.vallado [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/iod/vallado.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/iod/vallado.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/neos/__init__.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/neos/__init__.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/neos/__init__.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/neos/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/neos/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/neos/dastcom5.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/neos/dastcom5.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/neos/dastcom5.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/neos/dastcom5.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/neos/dastcom5.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/neos/neows.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/neos/neows.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/neos/neows.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/neos/neows.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/neos/neows.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_bodies.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_bodies.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_bodies.py'>
      find_module called for: test_bodies [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_bodies.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_bodies.py' [assertion]
      find_module called for: astropy.tests.helper [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_bodies.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_bodies.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_bodies.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_bodies.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_bodies.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __name__
            obj: test_bodies
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __spec__
            obj: ModuleSpec(name='test_bodies', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_bodies.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_bodies.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: assert_quantity_allclose
            obj: <function assert_quantity_allclose at 0x7f3d5d811c80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: bodies
            obj: <module 'poliastro.bodies' from '/home/ritiek/poliastro/src/poliastro/bodies.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: test_body_has_k_given_in_constructor
            obj: <function test_body_has_k_given_in_constructor at 0x7f3d5d811268>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d851b38>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_body_has_k_given_in_constructor'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: test_body_from_parameters_raises_valueerror_if_k_units_not_correct
            obj: <function test_body_from_parameters_raises_valueerror_if_k_units_not_correct at 0x7f3d5d811e18>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d818240>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: test_body_printing_has_name_and_symbol
            obj: <function test_body_printing_has_name_and_symbol at 0x7f3d5d811ea0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d818320>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_body_printing_has_name_and_symbol'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: test_earth_has_k_given_in_literature
            obj: <function test_earth_has_k_given_in_literature at 0x7f3d5d811f28>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d818400>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_earth_has_k_given_in_literature'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: test_body_kwargs
            obj: <function test_body_kwargs at 0x7f3d5d819048>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d8184e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_body_kwargs'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: test_from_relative
            obj: <function test_from_relative at 0x7f3d5d8190d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d8185c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_from_relative'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_bodies.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_bodies.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function 'test_body_has_k_given_in_constructor'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_body_has_k_given_in_constructor'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_body_printing_has_name_and_symbol'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_body_printing_has_name_and_symbol'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_earth_has_k_given_in_literature'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_earth_has_k_given_in_literature'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_body_kwargs'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_body_kwargs'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_from_relative'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_from_relative'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_bodies.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_coordinates.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_coordinates.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_coordinates.py'>
      find_module called for: test_coordinates [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_coordinates.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_coordinates.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_coordinates.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_coordinates.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_coordinates.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_coordinates.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_coordinates.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __name__
            obj: test_coordinates
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __spec__
            obj: ModuleSpec(name='test_coordinates', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_coordinates.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_coordinates.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: time
            obj: <module 'astropy.time' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/time/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: assert_quantity_allclose
            obj: <function assert_quantity_allclose at 0x7f3d5d811c80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: norm
            obj: <function norm at 0x7f3d7e3aa2f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: coordinates
            obj: <module 'poliastro.coordinates' from '/home/ritiek/poliastro/src/poliastro/coordinates.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: bodies
            obj: <module 'poliastro.bodies' from '/home/ritiek/poliastro/src/poliastro/bodies.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: molniya
            obj: 6650 x 46550 km x 63.4 deg orbit around Earth (♁)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: Orbit
            obj: <class 'poliastro.twobody.orbit.Orbit'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: test_body_centered_to_icrs_transformation
            obj: <function test_body_centered_to_icrs_transformation at 0x7f3d5d819510>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d8186d8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_body_centered_to_icrs_transformation'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: test_icrs_to_body_centered_transformation
            obj: <function test_icrs_to_body_centered_transformation at 0x7f3d5d819488>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d8186a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_icrs_to_body_centered_transformation'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: test_inertial_body_centered_to_pqw
            obj: <function test_inertial_body_centered_to_pqw at 0x7f3d5d819598>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d8189b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_inertial_body_centered_to_pqw'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_coordinates.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_coordinates.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function 'test_body_centered_to_icrs_transformation'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_body_centered_to_icrs_transformation'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_icrs_to_body_centered_transformation'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_icrs_to_body_centered_transformation'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_inertial_body_centered_to_pqw'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_inertial_body_centered_to_pqw'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_coordinates.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_examples.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_examples.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_examples.py'>
      find_module called for: test_examples [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_examples.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_examples.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_examples.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_examples.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_examples.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_examples.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_examples.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __name__
            obj: test_examples
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __spec__
            obj: ModuleSpec(name='test_examples', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_examples.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_examples.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: examples
            obj: <module 'poliastro.examples' from '/home/ritiek/poliastro/src/poliastro/examples.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_examples.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_examples.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_examples.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_hyper.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_hyper.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_hyper.py'>
      find_module called for: test_hyper [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_hyper.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_hyper.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_hyper.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_hyper.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_hyper.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_hyper.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_hyper.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __name__
            obj: test_hyper
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __spec__
            obj: ModuleSpec(name='test_hyper', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_hyper.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_hyper.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: np
            obj: <module 'numpy' from '/usr/local/lib/python3.6/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: assert_allclose
            obj: <function assert_allclose at 0x7f3d7e3c7510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: special
            obj: <module 'scipy.special' from '/usr/local/lib/python3.6/site-packages/scipy/special/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: hyp2f1
            obj: CPUDispatcher(<function hyp2f1b at 0x7f3d64a547b8>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: test_hyp2f1_battin_scalar
            obj: <function test_hyp2f1_battin_scalar at 0x7f3d5d819730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d818d30>
          find_module called for: py._io.saferepr [assertion]
          find_module called for: repr [assertion]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 0.0
                argname: x
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 0.1
                argname: x
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 0.2
                argname: x
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 0.30000000000000004
                argname: x
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 0.4
                argname: x
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 0.5
                argname: x
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 0.6000000000000001
                argname: x
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 0.7000000000000001
                argname: x
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 0.8
                argname: x
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 0.9
                argname: x
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 1.0
                argname: x
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_hyp2f1_battin_scalar[0.0]'>, <Function 'test_hyp2f1_battin_scalar[0.1]'>, <Function 'test_hyp2f1_battin_scalar[0.2]'>, <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>, <Function 'test_hyp2f1_battin_scalar[0.4]'>, <Function 'test_hyp2f1_battin_scalar[0.5]'>, <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>, <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>, <Function 'test_hyp2f1_battin_scalar[0.8]'>, <Function 'test_hyp2f1_battin_scalar[0.9]'>, <Function 'test_hyp2f1_battin_scalar[1.0]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_hyper.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_hyper.py' lenresult=11 outcome='passed'> [hook]
    genitems <Function 'test_hyp2f1_battin_scalar[0.0]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.0]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_hyp2f1_battin_scalar[0.1]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.1]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_hyp2f1_battin_scalar[0.2]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.2]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_hyp2f1_battin_scalar[0.4]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.4]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_hyp2f1_battin_scalar[0.5]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.5]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_hyp2f1_battin_scalar[0.8]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.8]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_hyp2f1_battin_scalar[0.9]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.9]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_hyp2f1_battin_scalar[1.0]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_hyp2f1_battin_scalar[1.0]'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_hyper.py' lenresult=11 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_iod.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_iod.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_iod.py'>
      find_module called for: test_iod [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_iod.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_iod.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_iod.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_iod.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_iod.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_iod.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_iod.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __name__
            obj: test_iod
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __spec__
            obj: ModuleSpec(name='test_iod', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_iod.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_iod.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: assert_quantity_allclose
            obj: <function assert_quantity_allclose at 0x7f3d5d811c80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: Earth
            obj: Earth (♁)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: izzo
            obj: <module 'poliastro.iod.izzo' from '/home/ritiek/poliastro/src/poliastro/iod/izzo.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: vallado
            obj: <module 'poliastro.iod.vallado' from '/home/ritiek/poliastro/src/poliastro/iod/vallado.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: test_vallado75
            obj: <function test_vallado75 at 0x7f3d5d819d08>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7bc6d8>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function lambert at 0x7f3d5d7fd8c8>
                argname: lambert
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function lambert at 0x7f3d5d85d598>
                argname: lambert
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_vallado75[lambert0]'>, <Function 'test_vallado75[lambert1]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: test_curtis52
            obj: <function test_curtis52 at 0x7f3d5d819c80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7bc9e8>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function lambert at 0x7f3d5d7fd8c8>
                argname: lambert
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function lambert at 0x7f3d5d85d598>
                argname: lambert
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_curtis52[lambert0]'>, <Function 'test_curtis52[lambert1]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: test_curtis53
            obj: <function test_curtis53 at 0x7f3d5d819d90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7bca90>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function lambert at 0x7f3d5d7fd8c8>
                argname: lambert
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function lambert at 0x7f3d5d85d598>
                argname: lambert
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_curtis53[lambert0]'>, <Function 'test_curtis53[lambert1]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: test_molniya_der_zero_full_revolution
            obj: <function test_molniya_der_zero_full_revolution at 0x7f3d5d819e18>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7bce10>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function lambert at 0x7f3d5d85d598>
                argname: lambert
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_molniya_der_zero_full_revolution[lambert]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: test_molniya_der_one_full_revolution
            obj: <function test_molniya_der_one_full_revolution at 0x7f3d5d819ea0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7c7048>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function lambert at 0x7f3d5d85d598>
                argname: lambert
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_molniya_der_one_full_revolution[lambert]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: test_raises_exception_for_non_feasible_solution
            obj: <function test_raises_exception_for_non_feasible_solution at 0x7f3d5d819f28>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7c72b0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function lambert at 0x7f3d5d85d598>
                argname: lambert
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_raises_exception_for_non_feasible_solution[lambert]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_iod.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_iod.py' lenresult=9 outcome='passed'> [hook]
    genitems <Function 'test_vallado75[lambert0]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_vallado75[lambert0]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_vallado75[lambert1]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_vallado75[lambert1]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_curtis52[lambert0]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_curtis52[lambert0]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_curtis52[lambert1]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_curtis52[lambert1]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_curtis53[lambert0]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_curtis53[lambert0]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_curtis53[lambert1]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_curtis53[lambert1]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_molniya_der_zero_full_revolution[lambert]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_molniya_der_zero_full_revolution[lambert]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_molniya_der_one_full_revolution[lambert]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_molniya_der_one_full_revolution[lambert]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_raises_exception_for_non_feasible_solution[lambert]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_iod.py' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_jit.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_jit.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_jit.py'>
      find_module called for: test_jit [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_jit.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_jit.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_jit.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_jit.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_jit.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_jit.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_jit.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __name__
            obj: test_jit
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __spec__
            obj: ModuleSpec(name='test_jit', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_jit.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_jit.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: contextmanager
            obj: <function contextmanager at 0x7f3d8d4e1268>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: jit
            obj: <module 'poliastro.jit' from '/home/ritiek/poliastro/src/poliastro/jit.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: _fake_numba_import
            obj: <function _fake_numba_import at 0x7f3d5d7cb158>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: test_ijit_returns_same_function_without_args
            obj: <function test_ijit_returns_same_function_without_args at 0x7f3d5d7cb268>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7c76d8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_ijit_returns_same_function_without_args'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: test_ijit_returns_same_function_with_args
            obj: <function test_ijit_returns_same_function_with_args at 0x7f3d5d7cb2f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7c7710>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_ijit_returns_same_function_with_args'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: test_no_numba_emits_warning
            obj: <function test_no_numba_emits_warning at 0x7f3d5d7cb378>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7c7780>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_no_numba_emits_warning'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_jit.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_jit.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function 'test_ijit_returns_same_function_without_args'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_ijit_returns_same_function_without_args'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_ijit_returns_same_function_with_args'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_ijit_returns_same_function_with_args'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_no_numba_emits_warning'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_no_numba_emits_warning'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_jit.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_maneuver.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_maneuver.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_maneuver.py'>
      find_module called for: test_maneuver [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_maneuver.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_maneuver.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_maneuver.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_maneuver.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_maneuver.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_maneuver.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_maneuver.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __name__
            obj: test_maneuver
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __spec__
            obj: ModuleSpec(name='test_maneuver', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_maneuver.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_maneuver.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: np
            obj: <module 'numpy' from '/usr/local/lib/python3.6/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: assert_allclose
            obj: <function assert_allclose at 0x7f3d7e3c7510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: assert_quantity_allclose
            obj: <function assert_quantity_allclose at 0x7f3d5d811c80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: Earth
            obj: Earth (♁)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: Orbit
            obj: <class 'poliastro.twobody.orbit.Orbit'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: Maneuver
            obj: <class 'poliastro.maneuver.Maneuver'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: test_maneuver_raises_error_if_units_are_wrong
            obj: <function test_maneuver_raises_error_if_units_are_wrong at 0x7f3d5d7cb510>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7c7860>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_maneuver_raises_error_if_units_are_wrong'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: test_maneuver_raises_error_if_dvs_are_not_vectors
            obj: <function test_maneuver_raises_error_if_dvs_are_not_vectors at 0x7f3d5d7cb488>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7c7e48>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: test_maneuver_total_time
            obj: <function test_maneuver_total_time at 0x7f3d5d7cb598>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7c7f28>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_maneuver_total_time'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: test_maneuver_impulse
            obj: <function test_maneuver_impulse at 0x7f3d5d7cb620>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7c7fd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_maneuver_impulse'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: test_hohmann_maneuver
            obj: <function test_hohmann_maneuver at 0x7f3d5d7cb6a8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7d30f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_hohmann_maneuver'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: test_bielliptic_maneuver
            obj: <function test_bielliptic_maneuver at 0x7f3d5d7cb730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7d3208>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_bielliptic_maneuver'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_maneuver.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_maneuver.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function 'test_maneuver_raises_error_if_units_are_wrong'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_maneuver_raises_error_if_units_are_wrong'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_maneuver_total_time'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_maneuver_total_time'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_maneuver_impulse'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_maneuver_impulse'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_hohmann_maneuver'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_hohmann_maneuver'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_bielliptic_maneuver'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_bielliptic_maneuver'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_maneuver.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_patched_conics.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_patched_conics.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_patched_conics.py'>
      find_module called for: test_patched_conics [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_patched_conics.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_patched_conics.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_patched_conics.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_patched_conics.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_patched_conics.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __name__
            obj: test_patched_conics
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __spec__
            obj: ModuleSpec(name='test_patched_conics', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_patched_conics.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_patched_conics.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: assert_quantity_allclose
            obj: <function assert_quantity_allclose at 0x7f3d5d811c80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: Sun
            obj: Sun (☉)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: Mercury
            obj: Mercury (☿)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: Venus
            obj: Venus (♀)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: Earth
            obj: Earth (♁)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: Moon
            obj: Moon (☾)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: Mars
            obj: Mars (♂)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: Jupiter
            obj: Jupiter (♃)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: Saturn
            obj: Saturn (♄)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: Uranus
            obj: Uranus (⛢)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: Neptune
            obj: Neptune (♆)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: Pluto
            obj: Pluto (♇)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: compute_soi
            obj: <function compute_soi at 0x7f3d64a5e8c8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: test_compute_soi
            obj: <function test_compute_soi at 0x7f3d5d7cba60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7d3518>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_compute_soi'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: test_compute_missing_body_soi_raises_error
            obj: <function test_compute_missing_body_soi_raises_error at 0x7f3d5d7cb9d8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7d34e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_compute_missing_body_soi_raises_error'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_patched_conics.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_patched_conics.py' lenresult=2 outcome='passed'> [hook]
    genitems <Function 'test_compute_soi'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_compute_soi'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_compute_missing_body_soi_raises_error'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_compute_missing_body_soi_raises_error'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_patched_conics.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_plotting.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_plotting.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_plotting.py'>
      find_module called for: test_plotting [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_plotting.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_plotting.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_plotting.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_plotting.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_plotting.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_plotting.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_plotting.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __name__
            obj: test_plotting
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __spec__
            obj: ModuleSpec(name='test_plotting', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_plotting.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_plotting.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: plt
            obj: <module 'matplotlib.pyplot' from '/usr/local/lib/python3.6/site-packages/matplotlib/pyplot.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: iss
            obj: 6772 x 6790 km x 51.6 deg orbit around Earth (♁)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: OrbitPlotter
            obj: <class 'poliastro.plotting.OrbitPlotter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: plot_solar_system
            obj: <function plot_solar_system at 0x7f3d5d85c950>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: test_orbitplotter_has_axes
            obj: <function test_orbitplotter_has_axes at 0x7f3d5d7cbc80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7dbc50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_orbitplotter_has_axes'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: test_set_frame
            obj: <function test_set_frame at 0x7f3d5d7cbb70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7dbd30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_set_frame'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: test_axes_labels_and_title
            obj: <function test_axes_labels_and_title at 0x7f3d5d7cbd08>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7dbe10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_axes_labels_and_title'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: test_number_of_lines_for_osculating_orbit
            obj: <function test_number_of_lines_for_osculating_orbit at 0x7f3d5d7cbd90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7dbef0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_number_of_lines_for_osculating_orbit'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: test_legend
            obj: <function test_legend at 0x7f3d5d7cbe18>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7dbfd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_legend'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: test_color
            obj: <function test_color at 0x7f3d5d7cbea0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7dd0b8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_color'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: test_plot_solar_system
            obj: <function test_plot_solar_system at 0x7f3d5d7cbf28>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7dd1d0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: True
                argname: outer
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 8
                argname: expected
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: False
                argname: outer
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 4
                argname: expected
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_plot_solar_system[True-8]'>, <Function 'test_plot_solar_system[False-4]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_plotting.py' lenresult=8 outcome='passed'> [hook]
    genitems <Function 'test_orbitplotter_has_axes'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_orbitplotter_has_axes'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_set_frame'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_set_frame'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_axes_labels_and_title'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_axes_labels_and_title'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_number_of_lines_for_osculating_orbit'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_number_of_lines_for_osculating_orbit'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_legend'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_legend'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_color'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_color'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_plot_solar_system[True-8]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_plot_solar_system[True-8]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_plot_solar_system[False-4]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_plot_solar_system[False-4]'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_plotting.py' lenresult=8 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_plotting3d.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_plotting3d.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_plotting3d.py'>
      find_module called for: test_plotting3d [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_plotting3d.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_plotting3d.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_plotting3d.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_plotting3d.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_plotting3d.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __name__
            obj: test_plotting3d
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __spec__
            obj: ModuleSpec(name='test_plotting3d', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_plotting3d.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_plotting3d.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: mock
            obj: <module 'unittest.mock' from '/usr/local/lib/python3.6/unittest/mock.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: iss
            obj: 6772 x 6790 km x 51.6 deg orbit around Earth (♁)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: OrbitPlotter3D
            obj: <class 'poliastro.plotting.OrbitPlotter3D'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: test_get_figure_has_expected_properties
            obj: <function test_get_figure_has_expected_properties at 0x7f3d5d7e3268>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7e8748>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_get_figure_has_expected_properties'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: test_set_different_attractor_raises_error
            obj: <function test_set_different_attractor_raises_error at 0x7f3d5d7e31e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7e8898>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_set_different_attractor_raises_error'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: test_plot_sets_attractor
            obj: <function test_plot_sets_attractor at 0x7f3d5d7e32f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7e8978>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_plot_sets_attractor'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: test_plot_appends_data
            obj: <function test_plot_appends_data at 0x7f3d5d7e3378>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7e8a58>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_plot_appends_data'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: test_plot_trajectory_without_attractor_raises_error
            obj: <function test_plot_trajectory_without_attractor_raises_error at 0x7f3d5d7e3400>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7e8b38>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_plot_trajectory_without_attractor_raises_error'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: test_set_view
            obj: <function test_set_view at 0x7f3d5d7e3488>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7e8c18>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_set_view'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_plotting3d.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_plotting3d.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function 'test_get_figure_has_expected_properties'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_get_figure_has_expected_properties'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_set_different_attractor_raises_error'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_set_different_attractor_raises_error'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_plot_sets_attractor'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_plot_sets_attractor'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_plot_appends_data'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_plot_appends_data'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_plot_trajectory_without_attractor_raises_error'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_plot_trajectory_without_attractor_raises_error'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_set_view'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_set_view'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_plotting3d.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_stumpff.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_stumpff.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_stumpff.py'>
      find_module called for: test_stumpff [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_stumpff.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_stumpff.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_stumpff.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_stumpff.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_stumpff.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_stumpff.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_stumpff.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __name__
            obj: test_stumpff
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __spec__
            obj: ModuleSpec(name='test_stumpff', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_stumpff.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_stumpff.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: cos
            obj: <ufunc 'cos'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: sin
            obj: <ufunc 'sin'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: cosh
            obj: <ufunc 'cosh'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: sinh
            obj: <ufunc 'sinh'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: assert_allclose
            obj: <function assert_allclose at 0x7f3d7e3c7510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: assert_equal
            obj: <function assert_equal at 0x7f3d7e3c9b70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: c2
            obj: CPUDispatcher(<function c2 at 0x7f3d6d879ae8>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: c3
            obj: CPUDispatcher(<function c3 at 0x7f3d69980840>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: test_stumpff_functions_near_zero
            obj: <function test_stumpff_functions_near_zero at 0x7f3d5d7e36a8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7e8d30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_stumpff_functions_near_zero'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: test_stumpff_functions_above_zero
            obj: <function test_stumpff_functions_above_zero at 0x7f3d5d7e3620>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7e8dd8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_stumpff_functions_above_zero'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: test_stumpff_functions_under_zero
            obj: <function test_stumpff_functions_under_zero at 0x7f3d5d7e3730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7e8f60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_stumpff_functions_under_zero'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_stumpff.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_stumpff.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function 'test_stumpff_functions_near_zero'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_stumpff_functions_near_zero'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_stumpff_functions_above_zero'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_stumpff_functions_above_zero'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_stumpff_functions_under_zero'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_stumpff_functions_under_zero'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_stumpff.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_twobody.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_twobody.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_twobody.py'>
      find_module called for: test_twobody [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_twobody.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_twobody.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_twobody.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_twobody.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_twobody.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_twobody.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_twobody.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __name__
            obj: test_twobody
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __spec__
            obj: ModuleSpec(name='test_twobody', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_twobody.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_twobody.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: np
            obj: <module 'numpy' from '/usr/local/lib/python3.6/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: assert_allclose
            obj: <function assert_allclose at 0x7f3d7e3c7510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: Earth
            obj: Earth (♁)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: rv2coe
            obj: <function rv2coe at 0x7f3d69744a60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: coe2rv
            obj: <function coe2rv at 0x7f3d69751400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: coe2mee
            obj: <function coe2mee at 0x7f3d6975b620>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: mee2coe
            obj: <function mee2coe at 0x7f3d697512f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: test_convert_between_coe_and_rv_is_transitive
            obj: <function test_convert_between_coe_and_rv_is_transitive at 0x7f3d5d7e3950>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7e8f98>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_convert_between_coe_and_rv_is_transitive'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: test_convert_between_coe_and_mee_is_transitive
            obj: <function test_convert_between_coe_and_mee_is_transitive at 0x7f3d5d7e3598>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7e2668>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_convert_between_coe_and_mee_is_transitive'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_twobody.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_twobody.py' lenresult=2 outcome='passed'> [hook]
    genitems <Function 'test_convert_between_coe_and_rv_is_transitive'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_convert_between_coe_and_rv_is_transitive'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_convert_between_coe_and_mee_is_transitive'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_convert_between_coe_and_mee_is_transitive'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_twobody.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/test_util.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_util.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/test_util.py'>
      find_module called for: test_util [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/test_util.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/test_util.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_util.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_util.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/test_util.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/test_util.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/test_util.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __name__
            obj: test_util
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __spec__
            obj: ModuleSpec(name='test_util', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/test_util.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/__pycache__/test_util.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: np
            obj: <module 'numpy' from '/usr/local/lib/python3.6/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: assert_allclose
            obj: <function assert_allclose at 0x7f3d7e3c7510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: Time
            obj: <class 'astropy.time.core.Time'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: assert_quantity_allclose
            obj: <function assert_quantity_allclose at 0x7f3d5d811c80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: util
            obj: <module 'poliastro.util' from '/home/ritiek/poliastro/src/poliastro/util.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: test_simple_circular_velocity
            obj: <function test_simple_circular_velocity at 0x7f3d5d7e3840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d851b38>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_simple_circular_velocity'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: test_rotate_unitless_vector
            obj: <function test_rotate_unitless_vector at 0x7f3d5d7e37b8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7f02b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_rotate_unitless_vector'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: test_rotate_vector_with_units
            obj: <function test_rotate_vector_with_units at 0x7f3d5d7e3a60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7f0160>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_rotate_vector_with_units'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: test_transform_unitless_vector
            obj: <function test_transform_unitless_vector at 0x7f3d5d7e3ae8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7f0400>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_transform_unitless_vector'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: test_time_range_spacing_periods
            obj: <function test_time_range_spacing_periods at 0x7f3d5d7e3b70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7f04e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_time_range_spacing_periods'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: test_time_range_requires_keyword_arguments
            obj: <function test_time_range_requires_keyword_arguments at 0x7f3d5d7e3bf8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7f05c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_time_range_requires_keyword_arguments'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: test_time_range_raises_error_wrong_arguments
            obj: <function test_time_range_raises_error_wrong_arguments at 0x7f3d5d7e3c80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7f06a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_time_range_raises_error_wrong_arguments'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/test_util.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/test_util.py' lenresult=7 outcome='passed'> [hook]
    genitems <Function 'test_simple_circular_velocity'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_simple_circular_velocity'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_rotate_unitless_vector'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_rotate_unitless_vector'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_rotate_vector_with_units'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_rotate_vector_with_units'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_transform_unitless_vector'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_transform_unitless_vector'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_time_range_spacing_periods'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_time_range_spacing_periods'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_time_range_requires_keyword_arguments'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_time_range_requires_keyword_arguments'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_time_range_raises_error_wrong_arguments'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_time_range_raises_error_wrong_arguments'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/test_util.py' lenresult=7 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/tests_neos/test_dastcom5.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
      find_module called for: test_dastcom5 [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/tests_neos/test_dastcom5.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/tests_neos/test_dastcom5.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_neos/test_dastcom5.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_neos/test_dastcom5.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __name__
            obj: test_dastcom5
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __spec__
            obj: ModuleSpec(name='test_dastcom5', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/test_dastcom5.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/__pycache__/test_dastcom5.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: mock
            obj: <module 'unittest.mock' from '/usr/local/lib/python3.6/unittest/mock.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: os
            obj: <module 'os' from '/usr/local/lib/python3.6/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: np
            obj: <module 'numpy' from '/usr/local/lib/python3.6/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: iss
            obj: 6772 x 6790 km x 51.6 deg orbit around Earth (♁)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: dastcom5
            obj: <module 'poliastro.neos.dastcom5' from '/home/ritiek/poliastro/src/poliastro/neos/dastcom5.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: test_asteroid_db_is_called_with_right_path
            obj: <function test_asteroid_db_is_called_with_right_path at 0x7f3d5d774488>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7831d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_asteroid_db_is_called_with_right_path'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: test_comet_db_is_called_with_right_path
            obj: <function test_comet_db_is_called_with_right_path at 0x7f3d5d7746a8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d783320>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_comet_db_is_called_with_right_path'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: test_orbit_from_name
            obj: <function test_orbit_from_name at 0x7f3d5d7748c8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d783400>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_orbit_from_name'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: test_record_from_name
            obj: <function test_record_from_name at 0x7f3d5d774ae8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7834e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_record_from_name'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: test_read_headers
            obj: <function test_read_headers at 0x7f3d5d774d08>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7835c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_read_headers'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: test_read_record
            obj: <function test_read_record at 0x7f3d5d77b048>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d77eb38>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_read_record'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: test_download_dastcom5_raises_error_when_folder_exists
            obj: <function test_download_dastcom5_raises_error_when_folder_exists at 0x7f3d5d77b378>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7835c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_download_dastcom5_raises_error_when_folder_exists'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: test_download_dastcom5_creates_folder
            obj: <function test_download_dastcom5_creates_folder at 0x7f3d5d77b6a8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d783710>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_download_dastcom5_creates_folder'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: test_download_dastcom5_downloads_file
            obj: <function test_download_dastcom5_downloads_file at 0x7f3d5d77b950>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7837f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_download_dastcom5_downloads_file'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_dastcom5.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_neos/test_dastcom5.py' lenresult=9 outcome='passed'> [hook]
    genitems <Function 'test_asteroid_db_is_called_with_right_path'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_asteroid_db_is_called_with_right_path'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_comet_db_is_called_with_right_path'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_comet_db_is_called_with_right_path'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_orbit_from_name'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_orbit_from_name'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_record_from_name'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_record_from_name'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_read_headers'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_read_headers'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_read_record'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_read_record'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_download_dastcom5_raises_error_when_folder_exists'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_download_dastcom5_raises_error_when_folder_exists'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_download_dastcom5_creates_folder'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_download_dastcom5_creates_folder'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_download_dastcom5_downloads_file'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_download_dastcom5_downloads_file'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_neos/test_dastcom5.py' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/tests_neos/test_neos_neows.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
      find_module called for: test_neos_neows [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/tests_neos/test_neos_neows.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/tests_neos/test_neos_neows.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_neos/test_neos_neows.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_neos/test_neos_neows.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __name__
            obj: test_neos_neows
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __spec__
            obj: ModuleSpec(name='test_neos_neows', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/test_neos_neows.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_neos/__pycache__/test_neos_neows.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: os
            obj: <module 'os' from '/usr/local/lib/python3.6/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: mock
            obj: <module 'unittest.mock' from '/usr/local/lib/python3.6/unittest/mock.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: requests
            obj: <module 'requests' from '/usr/local/lib/python3.6/site-packages/requests/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: nu_to_M
            obj: <function nu_to_M at 0x7f3d6d879730>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: neows
            obj: <module 'poliastro.neos.neows' from '/home/ritiek/poliastro/src/poliastro/neos/neows.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: CURRENT_DIRECTORY
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_neos
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: test_orbit_from_spk_id_has_proper_values
            obj: <function test_orbit_from_spk_id_has_proper_values at 0x7f3d5d785158>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d783d68>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_orbit_from_spk_id_has_proper_values'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: test_orbit_from_spk_id_raises_when_error
            obj: <function test_orbit_from_spk_id_raises_when_error at 0x7f3d5d7852f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d783b00>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_orbit_from_spk_id_raises_when_error'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: test_spk_id_from_name_raises_when_error
            obj: <function test_spk_id_from_name_raises_when_error at 0x7f3d5d785488>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d783f28>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_spk_id_from_name_raises_when_error'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: test_spk_id_from_name_parses_body
            obj: <function test_spk_id_from_name_parses_body at 0x7f3d5d7856a8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78b080>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_spk_id_from_name_parses_body'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: test_spk_id_from_name_parses_object_list_and_raises
            obj: <function test_spk_id_from_name_parses_object_list_and_raises at 0x7f3d5d7858c8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78b198>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_spk_id_from_name_parses_object_list_and_raises'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: test_spk_id_from_name_raises_when_not_found
            obj: <function test_spk_id_from_name_raises_when_not_found at 0x7f3d5d785ae8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78b278>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_spk_id_from_name_raises_when_not_found'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_neos/test_neos_neows.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_neos/test_neos_neows.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function 'test_orbit_from_spk_id_has_proper_values'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_orbit_from_spk_id_has_proper_values'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_orbit_from_spk_id_raises_when_error'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_orbit_from_spk_id_raises_when_error'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_spk_id_from_name_raises_when_error'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_spk_id_from_name_raises_when_error'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_spk_id_from_name_parses_body'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_spk_id_from_name_parses_body'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_spk_id_from_name_parses_object_list_and_raises'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_spk_id_from_name_parses_object_list_and_raises'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_spk_id_from_name_raises_when_not_found'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_spk_id_from_name_raises_when_not_found'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_neos/test_neos_neows.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_angles.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_angles.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_angles.py'>
      find_module called for: test_angles [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_angles.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_angles.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_twobody/test_angles.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_twobody/test_angles.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/tests_twobody/test_angles.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __name__
            obj: test_angles
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __spec__
            obj: ModuleSpec(name='test_angles', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_angles.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_angles.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: np
            obj: <module 'numpy' from '/usr/local/lib/python3.6/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: assert_quantity_allclose
            obj: <function assert_quantity_allclose at 0x7f3d5d811c80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: angles
            obj: <module 'poliastro.twobody.angles' from '/home/ritiek/poliastro/src/poliastro/twobody/angles.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: test_true_to_eccentric
            obj: <function test_true_to_eccentric at 0x7f3d5d785d90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78b390>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_true_to_eccentric'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: test_true_to_eccentric_hyperbolic
            obj: <function test_true_to_eccentric_hyperbolic at 0x7f3d5d785e18>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78b550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_true_to_eccentric_hyperbolic'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: test_mean_to_true
            obj: <function test_mean_to_true at 0x7f3d5d785ea0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78b5f8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_mean_to_true'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: test_true_to_mean
            obj: <function test_true_to_mean at 0x7f3d5d785f28>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78b6d8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_true_to_mean'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: test_true_to_mean_hyperbolic
            obj: <function test_true_to_mean_hyperbolic at 0x7f3d5d790048>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78b7b8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_true_to_mean_hyperbolic'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: test_mean_to_true_hyperbolic
            obj: <function test_mean_to_true_hyperbolic at 0x7f3d5d7900d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78b898>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_mean_to_true_hyperbolic'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: test_flight_path_angle
            obj: <function test_flight_path_angle at 0x7f3d5d790158>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78b978>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_flight_path_angle'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_angles.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_twobody/test_angles.py' lenresult=7 outcome='passed'> [hook]
    genitems <Function 'test_true_to_eccentric'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_true_to_eccentric'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_true_to_eccentric_hyperbolic'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_true_to_eccentric_hyperbolic'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_mean_to_true'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_mean_to_true'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_true_to_mean'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_true_to_mean'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_true_to_mean_hyperbolic'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_true_to_mean_hyperbolic'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_mean_to_true_hyperbolic'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_mean_to_true_hyperbolic'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_flight_path_angle'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_flight_path_angle'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_twobody/test_angles.py' lenresult=7 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_decorators.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_decorators.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_decorators.py'>
      find_module called for: test_decorators [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_decorators.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_decorators.py' [assertion]
      find_module called for: poliastro.twobody.decorators [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_twobody/test_decorators.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_twobody/test_decorators.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __name__
            obj: test_decorators
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __spec__
            obj: ModuleSpec(name='test_decorators', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_decorators.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_decorators.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: inspect
            obj: <module 'inspect' from '/usr/local/lib/python3.6/inspect.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: state_from_vector
            obj: <function state_from_vector at 0x7f3d5d7902f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: fun
            obj: <function fun at 0x7f3d5d790378>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: decorated_fun
            obj: <function decorated_fun at 0x7f3d5d790488>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: test_decorator_has_correct_signature
            obj: <function test_decorator_has_correct_signature at 0x7f3d5d790598>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78ba20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_decorator_has_correct_signature'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: test_decorated_function_calls_rvstate
            obj: <function test_decorated_function_calls_rvstate at 0x7f3d5d790620>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78bdd8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_decorated_function_calls_rvstate'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_decorators.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_twobody/test_decorators.py' lenresult=2 outcome='passed'> [hook]
    genitems <Function 'test_decorator_has_correct_signature'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_decorator_has_correct_signature'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_decorated_function_calls_rvstate'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_decorated_function_calls_rvstate'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_twobody/test_decorators.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_orbit.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_orbit.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_orbit.py'>
      find_module called for: test_orbit [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_orbit.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_orbit.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_twobody/test_orbit.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_twobody/test_orbit.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __name__
            obj: test_orbit
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __spec__
            obj: ModuleSpec(name='test_orbit', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_orbit.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_orbit.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: assert_allclose
            obj: <function assert_allclose at 0x7f3d7e3c7510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: assert_quantity_allclose
            obj: <function assert_quantity_allclose at 0x7f3d5d811c80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: time
            obj: <module 'astropy.time' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/time/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: Sun
            obj: Sun (☉)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: Earth
            obj: Earth (♁)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: Orbit
            obj: <class 'poliastro.twobody.orbit.Orbit'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: TimeScaleWarning
            obj: <class 'poliastro.twobody.orbit.TimeScaleWarning'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: J2000
            obj: J2000.000
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_default_time_for_new_state
            obj: <function test_default_time_for_new_state at 0x7f3d5d790840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78beb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_default_time_for_new_state'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_state_raises_unitserror_if_elements_units_are_wrong
            obj: <function test_state_raises_unitserror_if_elements_units_are_wrong at 0x7f3d5d790730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d78bfd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_state_raises_unitserror_if_rv_units_are_wrong
            obj: <function test_state_raises_unitserror_if_rv_units_are_wrong at 0x7f3d5d7908c8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79b2b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_parabolic_elements_fail_early
            obj: <function test_parabolic_elements_fail_early at 0x7f3d5d790950>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79b390>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_parabolic_elements_fail_early'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_bad_inclination_raises_exception
            obj: <function test_bad_inclination_raises_exception at 0x7f3d5d7909d8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79b470>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_bad_inclination_raises_exception'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_bad_hyperbolic_raises_exception
            obj: <function test_bad_hyperbolic_raises_exception at 0x7f3d5d790a60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79b550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_bad_hyperbolic_raises_exception'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_apply_maneuver_changes_epoch
            obj: <function test_apply_maneuver_changes_epoch at 0x7f3d5d790ae8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79b630>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_apply_maneuver_changes_epoch'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_orbit_from_ephem_with_no_epoch_is_today
            obj: <function test_orbit_from_ephem_with_no_epoch_is_today at 0x7f3d5d790b70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79b710>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_orbit_from_ephem_with_no_epoch_is_today'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time
            obj: <function test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time at 0x7f3d5d790bf8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79b828>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_circular_has_proper_semimajor_axis
            obj: <function test_circular_has_proper_semimajor_axis at 0x7f3d5d790c80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79b940>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_circular_has_proper_semimajor_axis'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_geosync_has_proper_period
            obj: <function test_geosync_has_proper_period at 0x7f3d5d790d08>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79ba20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_geosync_has_proper_period'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_parabolic_has_proper_eccentricity
            obj: <function test_parabolic_has_proper_eccentricity at 0x7f3d5d790d90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79bb00>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_parabolic_has_proper_eccentricity'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_parabolic_has_zero_energy
            obj: <function test_parabolic_has_zero_energy at 0x7f3d5d790e18>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79bbe0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_parabolic_has_zero_energy'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_pqw_for_circular_equatorial_orbit
            obj: <function test_pqw_for_circular_equatorial_orbit at 0x7f3d5d790ea0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79bcc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_pqw_for_circular_equatorial_orbit'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_orbit_representation
            obj: <function test_orbit_representation at 0x7f3d5d790f28>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79bda0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_orbit_representation'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_sample_numpoints
            obj: <function test_sample_numpoints at 0x7f3d5d7a0048>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79be80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_sample_numpoints'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_sample_with_time_value
            obj: <function test_sample_with_time_value at 0x7f3d5d7a00d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d79bf60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_sample_with_time_value'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: test_sample_with_nu_value
            obj: <function test_sample_with_nu_value at 0x7f3d5d7a0158>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7aa080>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_sample_with_nu_value'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_orbit.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_twobody/test_orbit.py' lenresult=18 outcome='passed'> [hook]
    genitems <Function 'test_default_time_for_new_state'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_default_time_for_new_state'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_parabolic_elements_fail_early'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_parabolic_elements_fail_early'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_bad_inclination_raises_exception'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_bad_inclination_raises_exception'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_bad_hyperbolic_raises_exception'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_bad_hyperbolic_raises_exception'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_apply_maneuver_changes_epoch'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_apply_maneuver_changes_epoch'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_orbit_from_ephem_with_no_epoch_is_today'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_circular_has_proper_semimajor_axis'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_circular_has_proper_semimajor_axis'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_geosync_has_proper_period'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_geosync_has_proper_period'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_parabolic_has_proper_eccentricity'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_parabolic_has_proper_eccentricity'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_parabolic_has_zero_energy'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_parabolic_has_zero_energy'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_pqw_for_circular_equatorial_orbit'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_pqw_for_circular_equatorial_orbit'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_orbit_representation'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_orbit_representation'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_numpoints'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_numpoints'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_with_time_value'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_with_time_value'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_with_nu_value'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_with_nu_value'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_twobody/test_orbit.py' lenresult=18 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_propagation.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_propagation.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_propagation.py'>
      find_module called for: test_propagation [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_propagation.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_propagation.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_twobody/test_propagation.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_twobody/test_propagation.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __name__
            obj: test_propagation
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __spec__
            obj: ModuleSpec(name='test_propagation', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_propagation.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_propagation.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: approx
            obj: <function approx at 0x7f3d89f80bf8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: np
            obj: <module 'numpy' from '/usr/local/lib/python3.6/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: assert_allclose
            obj: <function assert_allclose at 0x7f3d7e3c7510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: time
            obj: <module 'astropy.time' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/time/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: assert_quantity_allclose
            obj: <function assert_quantity_allclose at 0x7f3d5d811c80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: J2000
            obj: J2000.000
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: Sun
            obj: Sun (☉)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: Earth
            obj: Earth (♁)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: Orbit
            obj: <class 'poliastro.twobody.orbit.Orbit'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: cowell
            obj: <function cowell at 0x7f3d69744510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: norm
            obj: <function norm at 0x7f3d69744ea0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: test_propagation
            obj: <function test_propagation at 0x7f3d5d7a0620>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7aa3c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_propagation'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: test_propagate_accepts_timedelta
            obj: <function test_propagate_accepts_timedelta at 0x7f3d5d7a06a8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7aa588>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_propagate_accepts_timedelta'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: test_propagation_hyperbolic
            obj: <function test_propagation_hyperbolic at 0x7f3d5d7a0730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7aa630>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_propagation_hyperbolic'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: test_propagation_zero_time_returns_same_state
            obj: <function test_propagation_zero_time_returns_same_state at 0x7f3d5d7a07b8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7aa710>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_propagation_zero_time_returns_same_state'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: test_apply_zero_maneuver_returns_equal_state
            obj: <function test_apply_zero_maneuver_returns_equal_state at 0x7f3d5d7a0840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7aa7f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_apply_zero_maneuver_returns_equal_state'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: test_cowell_propagation_callback
            obj: <function test_cowell_propagation_callback at 0x7f3d5d7a08c8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7aa8d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_cowell_propagation_callback'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: test_cowell_propagation_with_zero_acceleration_equals_kepler
            obj: <function test_cowell_propagation_with_zero_acceleration_equals_kepler at 0x7f3d5d7a0950>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7aa9b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: test_cowell_propagation_circle_to_circle
            obj: <function test_cowell_propagation_circle_to_circle at 0x7f3d5d7a09d8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7aaa90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_cowell_propagation_circle_to_circle'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: test_propagate_to_date_has_proper_epoch
            obj: <function test_propagate_to_date_has_proper_epoch at 0x7f3d5d7a0a60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7aab70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_propagate_to_date_has_proper_epoch'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_propagation.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_twobody/test_propagation.py' lenresult=9 outcome='passed'> [hook]
    genitems <Function 'test_propagation'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_propagation'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_propagate_accepts_timedelta'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_propagate_accepts_timedelta'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_propagation_hyperbolic'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_propagation_hyperbolic'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_propagation_zero_time_returns_same_state'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_propagation_zero_time_returns_same_state'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_apply_zero_maneuver_returns_equal_state'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_apply_zero_maneuver_returns_equal_state'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_cowell_propagation_callback'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_cowell_propagation_callback'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_cowell_propagation_circle_to_circle'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_cowell_propagation_circle_to_circle'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_propagate_to_date_has_proper_epoch'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_propagate_to_date_has_proper_epoch'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_twobody/test_propagation.py' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_sample.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_sample.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_sample.py'>
      find_module called for: test_sample [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_sample.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_sample.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_twobody/test_sample.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_twobody/test_sample.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/tests_twobody/test_sample.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __name__
            obj: test_sample
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __spec__
            obj: ModuleSpec(name='test_sample', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_sample.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_sample.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: assert_quantity_allclose
            obj: <function assert_quantity_allclose at 0x7f3d5d811c80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: Time
            obj: <class 'astropy.time.core.Time'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: Earth
            obj: Earth (♁)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: Orbit
            obj: <class 'poliastro.twobody.orbit.Orbit'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: propagate
            obj: <function propagate at 0x7f3d697448c8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: test_sample_angle_zero_returns_same
            obj: <function test_sample_angle_zero_returns_same at 0x7f3d5d7a0378>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7aacf8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_sample_angle_zero_returns_same'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: test_sample_one_point_equals_propagation_small_deltas
            obj: <function test_sample_one_point_equals_propagation_small_deltas at 0x7f3d5d7a0400>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7aaf60>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 1.0 min
                argname: time_of_flight
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function propagate at 0x7f3d697448c8>
                argname: function
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 40.0 min
                argname: time_of_flight
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function propagate at 0x7f3d697448c8>
                argname: function
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>, <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: test_sample_one_point_equals_propagation_big_deltas
            obj: <function test_sample_one_point_equals_propagation_big_deltas at 0x7f3d5d7a0488>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d73a278>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 6.0 h
                argname: time_of_flight
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function propagate at 0x7f3d697448c8>
                argname: function
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 2.0 d
                argname: time_of_flight
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: <function propagate at 0x7f3d697448c8>
                argname: function
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>, <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: test_sample_nu_values
            obj: <function test_sample_nu_values at 0x7f3d5d7a0510>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d73a588>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_sample_nu_values'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: test_sample_num_points
            obj: <function test_sample_num_points at 0x7f3d5d7a0b70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d73a668>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 3
                argname: num_points
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 5
                argname: num_points
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 7
                argname: num_points
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 9
                argname: num_points
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 11
                argname: num_points
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f3d89f96160>
                val: 101
                argname: num_points
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_sample_num_points[3]'>, <Function 'test_sample_num_points[5]'>, <Function 'test_sample_num_points[7]'>, <Function 'test_sample_num_points[9]'>, <Function 'test_sample_num_points[11]'>, <Function 'test_sample_num_points[101]'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_sample.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_twobody/test_sample.py' lenresult=12 outcome='passed'> [hook]
    genitems <Function 'test_sample_angle_zero_returns_same'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_angle_zero_returns_same'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_nu_values'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_nu_values'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_num_points[3]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_num_points[3]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_num_points[5]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_num_points[5]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_num_points[7]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_num_points[7]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_num_points[9]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_num_points[9]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_num_points[11]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_num_points[11]'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_sample_num_points[101]'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_sample_num_points[101]'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_twobody/test_sample.py' lenresult=12 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_states.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_states.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/tests/tests_twobody/test_states.py'>
      find_module called for: test_states [assertion]
      matched test file '/home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_states.py' [assertion]
      found cached rewritten pyc for '/home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_states.py' [assertion]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_twobody/test_states.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_twobody/test_states.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'src/poliastro/tests/tests_twobody/test_states.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __name__
            obj: test_states
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __package__
            obj: 
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __spec__
            obj: ModuleSpec(name='test_states', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f3d89ed9d30>)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __file__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/test_states.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __cached__
            obj: /home/ritiek/poliastro/src/poliastro/tests/tests_twobody/__pycache__/test_states.cpython-36-PYTEST.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2017 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '_ASTROPY_SETUP_': False}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: assert_allclose
            obj: <function assert_allclose at 0x7f3d7e3c7510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: u
            obj: <module 'astropy.units' from '/usr/local/lib/python3.6/site-packages/astropy-3.1.dev21507-py3.6-linux-x86_64.egg/astropy/units/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: assert_quantity_allclose
            obj: <function assert_quantity_allclose at 0x7f3d5d811c80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: Sun
            obj: Sun (☉)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: Earth
            obj: Earth (♁)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: RVState
            obj: <class 'poliastro.twobody.rv.RVState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: ClassicalState
            obj: <class 'poliastro.twobody.classical.ClassicalState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: test_state_has_attractor_given_in_constructor
            obj: <function test_state_has_attractor_given_in_constructor at 0x7f3d5d7a0d90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d73aef0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_state_has_attractor_given_in_constructor'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: test_state_has_elements_given_in_constructor
            obj: <function test_state_has_elements_given_in_constructor at 0x7f3d5d7a0e18>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d73a780>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_state_has_elements_given_in_constructor'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: test_state_has_individual_elements
            obj: <function test_state_has_individual_elements at 0x7f3d5d7a0ea0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d742208>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_state_has_individual_elements'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: test_state_has_rv_given_in_constructor
            obj: <function test_state_has_rv_given_in_constructor at 0x7f3d5d7a0f28>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7422e8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_state_has_rv_given_in_constructor'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: test_perigee_and_apogee
            obj: <function test_perigee_and_apogee at 0x7f3d5d744048>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7423c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_perigee_and_apogee'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: test_convert_from_rv_to_coe
            obj: <function test_convert_from_rv_to_coe at 0x7f3d5d7440d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d7424a8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_convert_from_rv_to_coe'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: test_convert_from_coe_to_rv
            obj: <function test_convert_from_coe_to_rv at 0x7f3d5d744158>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d742588>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_convert_from_coe_to_rv'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: test_perifocal_points_to_perigee
            obj: <function test_perifocal_points_to_perigee at 0x7f3d5d7441e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d742668>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_perifocal_points_to_perigee'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: test_arglat_within_range
            obj: <function test_arglat_within_range at 0x7f3d5d744268>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d742748>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_arglat_within_range'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: test_pqw_returns_dimensionless
            obj: <function test_pqw_returns_dimensionless at 0x7f3d5d7442f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f3d5d742828>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_pqw_returns_dimensionless'>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __new__
            obj: <built-in method __new__ of type object at 0x883e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module 'src/poliastro/tests/tests_twobody/test_states.py'>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/tests/tests_twobody/test_states.py' lenresult=10 outcome='passed'> [hook]
    genitems <Function 'test_state_has_attractor_given_in_constructor'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_state_has_attractor_given_in_constructor'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_state_has_elements_given_in_constructor'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_state_has_elements_given_in_constructor'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_state_has_individual_elements'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_state_has_individual_elements'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_state_has_rv_given_in_constructor'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_state_has_rv_given_in_constructor'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_perigee_and_apogee'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_perigee_and_apogee'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_convert_from_rv_to_coe'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_convert_from_rv_to_coe'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_convert_from_coe_to_rv'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_convert_from_coe_to_rv'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_perifocal_points_to_perigee'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_perifocal_points_to_perigee'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_arglat_within_range'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_arglat_within_range'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_pqw_returns_dimensionless'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_pqw_returns_dimensionless'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/tests/tests_twobody/test_states.py' lenresult=10 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/twobody/__init__.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/__init__.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/__init__.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/twobody/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/twobody/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/twobody/_base.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/_base.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/_base.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/twobody/_base.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/twobody/_base.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/twobody/angles.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/angles.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/angles.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/twobody/angles.py' lenresult=1 outcome='passed'> [hook]
    genitems <DoctestItem 'poliastro.twobody.angles.M_to_nu'> [collection]
      pytest_itemcollected [hook]
          item: <DoctestItem 'poliastro.twobody.angles.M_to_nu'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/twobody/angles.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/twobody/classical.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/classical.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/classical.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/twobody/classical.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/twobody/classical.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/twobody/decorators.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/decorators.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/decorators.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/twobody/decorators.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/twobody/decorators.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/twobody/equinoctial.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/equinoctial.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/equinoctial.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/twobody/equinoctial.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/twobody/equinoctial.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/twobody/orbit.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/orbit.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/orbit.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/twobody/orbit.py' lenresult=1 outcome='passed'> [hook]
    genitems <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'> [collection]
      pytest_itemcollected [hook]
          item: <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/twobody/orbit.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/twobody/propagation.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/propagation.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/propagation.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/twobody/propagation.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/twobody/propagation.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'src/poliastro/twobody/rv.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/rv.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'src/poliastro/twobody/rv.py'>
      finish pytest_make_collect_report --> <CollectReport 'src/poliastro/twobody/rv.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'src/poliastro/twobody/rv.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <DocTestModulePlus 'tests/benchmarks.py'> [collection]
      pytest_collectstart [hook]
          collector: <DocTestModulePlus 'tests/benchmarks.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <DocTestModulePlus 'tests/benchmarks.py'>
      find_module called for: benchmarks [assertion]
      finish pytest_make_collect_report --> <CollectReport 'tests/benchmarks.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/benchmarks.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session 'poliastro'>
          config: <_pytest.config.Config object at 0x7f3d89f96160>
          items: [<DoctestItem 'poliastro.maneuver.Maneuver'>, <Function 'test_body_has_k_given_in_constructor'>, <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>, <Function 'test_body_printing_has_name_and_symbol'>, <Function 'test_earth_has_k_given_in_literature'>, <Function 'test_body_kwargs'>, <Function 'test_from_relative'>, <Function 'test_body_centered_to_icrs_transformation'>, <Function 'test_icrs_to_body_centered_transformation'>, <Function 'test_inertial_body_centered_to_pqw'>, <Function 'test_hyp2f1_battin_scalar[0.0]'>, <Function 'test_hyp2f1_battin_scalar[0.1]'>, <Function 'test_hyp2f1_battin_scalar[0.2]'>, <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>, <Function 'test_hyp2f1_battin_scalar[0.4]'>, <Function 'test_hyp2f1_battin_scalar[0.5]'>, <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>, <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>, <Function 'test_hyp2f1_battin_scalar[0.8]'>, <Function 'test_hyp2f1_battin_scalar[0.9]'>, <Function 'test_hyp2f1_battin_scalar[1.0]'>, <Function 'test_vallado75[lambert0]'>, <Function 'test_vallado75[lambert1]'>, <Function 'test_curtis52[lambert0]'>, <Function 'test_curtis52[lambert1]'>, <Function 'test_curtis53[lambert0]'>, <Function 'test_curtis53[lambert1]'>, <Function 'test_molniya_der_zero_full_revolution[lambert]'>, <Function 'test_molniya_der_one_full_revolution[lambert]'>, <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>, <Function 'test_ijit_returns_same_function_without_args'>, <Function 'test_ijit_returns_same_function_with_args'>, <Function 'test_no_numba_emits_warning'>, <Function 'test_maneuver_raises_error_if_units_are_wrong'>, <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>, <Function 'test_maneuver_total_time'>, <Function 'test_maneuver_impulse'>, <Function 'test_hohmann_maneuver'>, <Function 'test_bielliptic_maneuver'>, <Function 'test_compute_soi'>, <Function 'test_compute_missing_body_soi_raises_error'>, <Function 'test_orbitplotter_has_axes'>, <Function 'test_set_frame'>, <Function 'test_axes_labels_and_title'>, <Function 'test_number_of_lines_for_osculating_orbit'>, <Function 'test_legend'>, <Function 'test_color'>, <Function 'test_plot_solar_system[True-8]'>, <Function 'test_plot_solar_system[False-4]'>, <Function 'test_get_figure_has_expected_properties'>, <Function 'test_set_different_attractor_raises_error'>, <Function 'test_plot_sets_attractor'>, <Function 'test_plot_appends_data'>, <Function 'test_plot_trajectory_without_attractor_raises_error'>, <Function 'test_set_view'>, <Function 'test_stumpff_functions_near_zero'>, <Function 'test_stumpff_functions_above_zero'>, <Function 'test_stumpff_functions_under_zero'>, <Function 'test_convert_between_coe_and_rv_is_transitive'>, <Function 'test_convert_between_coe_and_mee_is_transitive'>, <Function 'test_simple_circular_velocity'>, <Function 'test_rotate_unitless_vector'>, <Function 'test_rotate_vector_with_units'>, <Function 'test_transform_unitless_vector'>, <Function 'test_time_range_spacing_periods'>, <Function 'test_time_range_requires_keyword_arguments'>, <Function 'test_time_range_raises_error_wrong_arguments'>, <Function 'test_asteroid_db_is_called_with_right_path'>, <Function 'test_comet_db_is_called_with_right_path'>, <Function 'test_orbit_from_name'>, <Function 'test_record_from_name'>, <Function 'test_read_headers'>, <Function 'test_read_record'>, <Function 'test_download_dastcom5_raises_error_when_folder_exists'>, <Function 'test_download_dastcom5_creates_folder'>, <Function 'test_download_dastcom5_downloads_file'>, <Function 'test_orbit_from_spk_id_has_proper_values'>, <Function 'test_orbit_from_spk_id_raises_when_error'>, <Function 'test_spk_id_from_name_raises_when_error'>, <Function 'test_spk_id_from_name_parses_body'>, <Function 'test_spk_id_from_name_parses_object_list_and_raises'>, <Function 'test_spk_id_from_name_raises_when_not_found'>, <Function 'test_true_to_eccentric'>, <Function 'test_true_to_eccentric_hyperbolic'>, <Function 'test_mean_to_true'>, <Function 'test_true_to_mean'>, <Function 'test_true_to_mean_hyperbolic'>, <Function 'test_mean_to_true_hyperbolic'>, <Function 'test_flight_path_angle'>, <Function 'test_decorator_has_correct_signature'>, <Function 'test_decorated_function_calls_rvstate'>, <Function 'test_default_time_for_new_state'>, <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>, <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>, <Function 'test_parabolic_elements_fail_early'>, <Function 'test_bad_inclination_raises_exception'>, <Function 'test_bad_hyperbolic_raises_exception'>, <Function 'test_apply_maneuver_changes_epoch'>, <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>, <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>, <Function 'test_circular_has_proper_semimajor_axis'>, <Function 'test_geosync_has_proper_period'>, <Function 'test_parabolic_has_proper_eccentricity'>, <Function 'test_parabolic_has_zero_energy'>, <Function 'test_pqw_for_circular_equatorial_orbit'>, <Function 'test_orbit_representation'>, <Function 'test_sample_numpoints'>, <Function 'test_sample_with_time_value'>, <Function 'test_sample_with_nu_value'>, <Function 'test_propagation'>, <Function 'test_propagate_accepts_timedelta'>, <Function 'test_propagation_hyperbolic'>, <Function 'test_propagation_zero_time_returns_same_state'>, <Function 'test_apply_zero_maneuver_returns_equal_state'>, <Function 'test_cowell_propagation_callback'>, <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>, <Function 'test_cowell_propagation_circle_to_circle'>, <Function 'test_propagate_to_date_has_proper_epoch'>, <Function 'test_sample_angle_zero_returns_same'>, <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>, <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>, <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>, <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>, <Function 'test_sample_nu_values'>, <Function 'test_sample_num_points[3]'>, <Function 'test_sample_num_points[5]'>, <Function 'test_sample_num_points[7]'>, <Function 'test_sample_num_points[9]'>, <Function 'test_sample_num_points[11]'>, <Function 'test_sample_num_points[101]'>, <Function 'test_state_has_attractor_given_in_constructor'>, <Function 'test_state_has_elements_given_in_constructor'>, <Function 'test_state_has_individual_elements'>, <Function 'test_state_has_rv_given_in_constructor'>, <Function 'test_perigee_and_apogee'>, <Function 'test_convert_from_rv_to_coe'>, <Function 'test_convert_from_coe_to_rv'>, <Function 'test_perifocal_points_to_perigee'>, <Function 'test_arglat_within_range'>, <Function 'test_pqw_returns_dimensionless'>, <DoctestItem 'poliastro.twobody.angles.M_to_nu'>, <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session 'poliastro'>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x7f3d89f96160>
            startdir: /home/ritiek/poliastro
            items: [<DoctestItem 'poliastro.maneuver.Maneuver'>, <Function 'test_body_has_k_given_in_constructor'>, <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>, <Function 'test_body_printing_has_name_and_symbol'>, <Function 'test_earth_has_k_given_in_literature'>, <Function 'test_body_kwargs'>, <Function 'test_from_relative'>, <Function 'test_body_centered_to_icrs_transformation'>, <Function 'test_icrs_to_body_centered_transformation'>, <Function 'test_inertial_body_centered_to_pqw'>, <Function 'test_hyp2f1_battin_scalar[0.0]'>, <Function 'test_hyp2f1_battin_scalar[0.1]'>, <Function 'test_hyp2f1_battin_scalar[0.2]'>, <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>, <Function 'test_hyp2f1_battin_scalar[0.4]'>, <Function 'test_hyp2f1_battin_scalar[0.5]'>, <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>, <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>, <Function 'test_hyp2f1_battin_scalar[0.8]'>, <Function 'test_hyp2f1_battin_scalar[0.9]'>, <Function 'test_hyp2f1_battin_scalar[1.0]'>, <Function 'test_vallado75[lambert0]'>, <Function 'test_vallado75[lambert1]'>, <Function 'test_curtis52[lambert0]'>, <Function 'test_curtis52[lambert1]'>, <Function 'test_curtis53[lambert0]'>, <Function 'test_curtis53[lambert1]'>, <Function 'test_molniya_der_zero_full_revolution[lambert]'>, <Function 'test_molniya_der_one_full_revolution[lambert]'>, <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>, <Function 'test_ijit_returns_same_function_without_args'>, <Function 'test_ijit_returns_same_function_with_args'>, <Function 'test_no_numba_emits_warning'>, <Function 'test_maneuver_raises_error_if_units_are_wrong'>, <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>, <Function 'test_maneuver_total_time'>, <Function 'test_maneuver_impulse'>, <Function 'test_hohmann_maneuver'>, <Function 'test_bielliptic_maneuver'>, <Function 'test_compute_soi'>, <Function 'test_compute_missing_body_soi_raises_error'>, <Function 'test_orbitplotter_has_axes'>, <Function 'test_set_frame'>, <Function 'test_axes_labels_and_title'>, <Function 'test_number_of_lines_for_osculating_orbit'>, <Function 'test_legend'>, <Function 'test_color'>, <Function 'test_plot_solar_system[True-8]'>, <Function 'test_plot_solar_system[False-4]'>, <Function 'test_get_figure_has_expected_properties'>, <Function 'test_set_different_attractor_raises_error'>, <Function 'test_plot_sets_attractor'>, <Function 'test_plot_appends_data'>, <Function 'test_plot_trajectory_without_attractor_raises_error'>, <Function 'test_set_view'>, <Function 'test_stumpff_functions_near_zero'>, <Function 'test_stumpff_functions_above_zero'>, <Function 'test_stumpff_functions_under_zero'>, <Function 'test_convert_between_coe_and_rv_is_transitive'>, <Function 'test_convert_between_coe_and_mee_is_transitive'>, <Function 'test_simple_circular_velocity'>, <Function 'test_rotate_unitless_vector'>, <Function 'test_rotate_vector_with_units'>, <Function 'test_transform_unitless_vector'>, <Function 'test_time_range_spacing_periods'>, <Function 'test_time_range_requires_keyword_arguments'>, <Function 'test_time_range_raises_error_wrong_arguments'>, <Function 'test_asteroid_db_is_called_with_right_path'>, <Function 'test_comet_db_is_called_with_right_path'>, <Function 'test_orbit_from_name'>, <Function 'test_record_from_name'>, <Function 'test_read_headers'>, <Function 'test_read_record'>, <Function 'test_download_dastcom5_raises_error_when_folder_exists'>, <Function 'test_download_dastcom5_creates_folder'>, <Function 'test_download_dastcom5_downloads_file'>, <Function 'test_orbit_from_spk_id_has_proper_values'>, <Function 'test_orbit_from_spk_id_raises_when_error'>, <Function 'test_spk_id_from_name_raises_when_error'>, <Function 'test_spk_id_from_name_parses_body'>, <Function 'test_spk_id_from_name_parses_object_list_and_raises'>, <Function 'test_spk_id_from_name_raises_when_not_found'>, <Function 'test_true_to_eccentric'>, <Function 'test_true_to_eccentric_hyperbolic'>, <Function 'test_mean_to_true'>, <Function 'test_true_to_mean'>, <Function 'test_true_to_mean_hyperbolic'>, <Function 'test_mean_to_true_hyperbolic'>, <Function 'test_flight_path_angle'>, <Function 'test_decorator_has_correct_signature'>, <Function 'test_decorated_function_calls_rvstate'>, <Function 'test_default_time_for_new_state'>, <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>, <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>, <Function 'test_parabolic_elements_fail_early'>, <Function 'test_bad_inclination_raises_exception'>, <Function 'test_bad_hyperbolic_raises_exception'>, <Function 'test_apply_maneuver_changes_epoch'>, <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>, <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>, <Function 'test_circular_has_proper_semimajor_axis'>, <Function 'test_geosync_has_proper_period'>, <Function 'test_parabolic_has_proper_eccentricity'>, <Function 'test_parabolic_has_zero_energy'>, <Function 'test_pqw_for_circular_equatorial_orbit'>, <Function 'test_orbit_representation'>, <Function 'test_sample_numpoints'>, <Function 'test_sample_with_time_value'>, <Function 'test_sample_with_nu_value'>, <Function 'test_propagation'>, <Function 'test_propagate_accepts_timedelta'>, <Function 'test_propagation_hyperbolic'>, <Function 'test_propagation_zero_time_returns_same_state'>, <Function 'test_apply_zero_maneuver_returns_equal_state'>, <Function 'test_cowell_propagation_callback'>, <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>, <Function 'test_cowell_propagation_circle_to_circle'>, <Function 'test_propagate_to_date_has_proper_epoch'>, <Function 'test_sample_angle_zero_returns_same'>, <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>, <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>, <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>, <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>, <Function 'test_sample_nu_values'>, <Function 'test_sample_num_points[3]'>, <Function 'test_sample_num_points[5]'>, <Function 'test_sample_num_points[7]'>, <Function 'test_sample_num_points[9]'>, <Function 'test_sample_num_points[11]'>, <Function 'test_sample_num_points[101]'>, <Function 'test_state_has_attractor_given_in_constructor'>, <Function 'test_state_has_elements_given_in_constructor'>, <Function 'test_state_has_individual_elements'>, <Function 'test_state_has_rv_given_in_constructor'>, <Function 'test_perigee_and_apogee'>, <Function 'test_convert_from_rv_to_coe'>, <Function 'test_convert_from_coe_to_rv'>, <Function 'test_perifocal_points_to_perigee'>, <Function 'test_arglat_within_range'>, <Function 'test_pqw_returns_dimensionless'>, <DoctestItem 'poliastro.twobody.angles.M_to_nu'>, <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> [<DoctestItem 'poliastro.maneuver.Maneuver'>, <Function 'test_body_has_k_given_in_constructor'>, <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>, <Function 'test_body_printing_has_name_and_symbol'>, <Function 'test_earth_has_k_given_in_literature'>, <Function 'test_body_kwargs'>, <Function 'test_from_relative'>, <Function 'test_body_centered_to_icrs_transformation'>, <Function 'test_icrs_to_body_centered_transformation'>, <Function 'test_inertial_body_centered_to_pqw'>, <Function 'test_hyp2f1_battin_scalar[0.0]'>, <Function 'test_hyp2f1_battin_scalar[0.1]'>, <Function 'test_hyp2f1_battin_scalar[0.2]'>, <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>, <Function 'test_hyp2f1_battin_scalar[0.4]'>, <Function 'test_hyp2f1_battin_scalar[0.5]'>, <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>, <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>, <Function 'test_hyp2f1_battin_scalar[0.8]'>, <Function 'test_hyp2f1_battin_scalar[0.9]'>, <Function 'test_hyp2f1_battin_scalar[1.0]'>, <Function 'test_vallado75[lambert0]'>, <Function 'test_vallado75[lambert1]'>, <Function 'test_curtis52[lambert0]'>, <Function 'test_curtis52[lambert1]'>, <Function 'test_curtis53[lambert0]'>, <Function 'test_curtis53[lambert1]'>, <Function 'test_molniya_der_zero_full_revolution[lambert]'>, <Function 'test_molniya_der_one_full_revolution[lambert]'>, <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>, <Function 'test_ijit_returns_same_function_without_args'>, <Function 'test_ijit_returns_same_function_with_args'>, <Function 'test_no_numba_emits_warning'>, <Function 'test_maneuver_raises_error_if_units_are_wrong'>, <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>, <Function 'test_maneuver_total_time'>, <Function 'test_maneuver_impulse'>, <Function 'test_hohmann_maneuver'>, <Function 'test_bielliptic_maneuver'>, <Function 'test_compute_soi'>, <Function 'test_compute_missing_body_soi_raises_error'>, <Function 'test_orbitplotter_has_axes'>, <Function 'test_set_frame'>, <Function 'test_axes_labels_and_title'>, <Function 'test_number_of_lines_for_osculating_orbit'>, <Function 'test_legend'>, <Function 'test_color'>, <Function 'test_plot_solar_system[True-8]'>, <Function 'test_plot_solar_system[False-4]'>, <Function 'test_get_figure_has_expected_properties'>, <Function 'test_set_different_attractor_raises_error'>, <Function 'test_plot_sets_attractor'>, <Function 'test_plot_appends_data'>, <Function 'test_plot_trajectory_without_attractor_raises_error'>, <Function 'test_set_view'>, <Function 'test_stumpff_functions_near_zero'>, <Function 'test_stumpff_functions_above_zero'>, <Function 'test_stumpff_functions_under_zero'>, <Function 'test_convert_between_coe_and_rv_is_transitive'>, <Function 'test_convert_between_coe_and_mee_is_transitive'>, <Function 'test_simple_circular_velocity'>, <Function 'test_rotate_unitless_vector'>, <Function 'test_rotate_vector_with_units'>, <Function 'test_transform_unitless_vector'>, <Function 'test_time_range_spacing_periods'>, <Function 'test_time_range_requires_keyword_arguments'>, <Function 'test_time_range_raises_error_wrong_arguments'>, <Function 'test_asteroid_db_is_called_with_right_path'>, <Function 'test_comet_db_is_called_with_right_path'>, <Function 'test_orbit_from_name'>, <Function 'test_record_from_name'>, <Function 'test_read_headers'>, <Function 'test_read_record'>, <Function 'test_download_dastcom5_raises_error_when_folder_exists'>, <Function 'test_download_dastcom5_creates_folder'>, <Function 'test_download_dastcom5_downloads_file'>, <Function 'test_orbit_from_spk_id_has_proper_values'>, <Function 'test_orbit_from_spk_id_raises_when_error'>, <Function 'test_spk_id_from_name_raises_when_error'>, <Function 'test_spk_id_from_name_parses_body'>, <Function 'test_spk_id_from_name_parses_object_list_and_raises'>, <Function 'test_spk_id_from_name_raises_when_not_found'>, <Function 'test_true_to_eccentric'>, <Function 'test_true_to_eccentric_hyperbolic'>, <Function 'test_mean_to_true'>, <Function 'test_true_to_mean'>, <Function 'test_true_to_mean_hyperbolic'>, <Function 'test_mean_to_true_hyperbolic'>, <Function 'test_flight_path_angle'>, <Function 'test_decorator_has_correct_signature'>, <Function 'test_decorated_function_calls_rvstate'>, <Function 'test_default_time_for_new_state'>, <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>, <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>, <Function 'test_parabolic_elements_fail_early'>, <Function 'test_bad_inclination_raises_exception'>, <Function 'test_bad_hyperbolic_raises_exception'>, <Function 'test_apply_maneuver_changes_epoch'>, <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>, <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>, <Function 'test_circular_has_proper_semimajor_axis'>, <Function 'test_geosync_has_proper_period'>, <Function 'test_parabolic_has_proper_eccentricity'>, <Function 'test_parabolic_has_zero_energy'>, <Function 'test_pqw_for_circular_equatorial_orbit'>, <Function 'test_orbit_representation'>, <Function 'test_sample_numpoints'>, <Function 'test_sample_with_time_value'>, <Function 'test_sample_with_nu_value'>, <Function 'test_propagation'>, <Function 'test_propagate_accepts_timedelta'>, <Function 'test_propagation_hyperbolic'>, <Function 'test_propagation_zero_time_returns_same_state'>, <Function 'test_apply_zero_maneuver_returns_equal_state'>, <Function 'test_cowell_propagation_callback'>, <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>, <Function 'test_cowell_propagation_circle_to_circle'>, <Function 'test_propagate_to_date_has_proper_epoch'>, <Function 'test_sample_angle_zero_returns_same'>, <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>, <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>, <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>, <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>, <Function 'test_sample_nu_values'>, <Function 'test_sample_num_points[3]'>, <Function 'test_sample_num_points[5]'>, <Function 'test_sample_num_points[7]'>, <Function 'test_sample_num_points[9]'>, <Function 'test_sample_num_points[11]'>, <Function 'test_sample_num_points[101]'>, <Function 'test_state_has_attractor_given_in_constructor'>, <Function 'test_state_has_elements_given_in_constructor'>, <Function 'test_state_has_individual_elements'>, <Function 'test_state_has_rv_given_in_constructor'>, <Function 'test_perigee_and_apogee'>, <Function 'test_convert_from_rv_to_coe'>, <Function 'test_convert_from_coe_to_rv'>, <Function 'test_perifocal_points_to_perigee'>, <Function 'test_arglat_within_range'>, <Function 'test_pqw_returns_dimensionless'>, <DoctestItem 'poliastro.twobody.angles.M_to_nu'>, <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>] [hook]
    pytest_runtestloop [hook]
        session: <Session 'poliastro'>
      pytest_runtest_protocol [hook]
          item: <DoctestItem 'poliastro.maneuver.Maneuver'>
          nextitem: <Function 'test_body_has_k_given_in_constructor'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/maneuver.py::poliastro.maneuver.Maneuver
            location: ('src/poliastro/maneuver.py', 11, '[doctest] poliastro.maneuver.Maneuver')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <DoctestItem 'poliastro.maneuver.Maneuver'>
        find_module called for: py._io.capture [assertion]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='doctest_namespace' scope='session' baseid='' >
              request: <SubRequest 'doctest_namespace' for <DoctestItem 'poliastro.maneuver.Maneuver'>>
          finish pytest_fixture_setup --> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <DoctestItem 'poliastro.maneuver.Maneuver'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/maneuver.py::poliastro.maneuver.Maneuver' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/maneuver.py::poliastro.maneuver.Maneuver' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/maneuver.py::poliastro.maneuver.Maneuver' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <DoctestItem 'poliastro.maneuver.Maneuver'>
        find_module called for: readline [assertion]
        pytest_runtest_makereport [hook]
            item: <DoctestItem 'poliastro.maneuver.Maneuver'>
            call: <CallInfo when='call' exception: <DocTest poliastro.maneuver.Maneuver from /home/ritiek/poliastro/src/poliastro/maneuver.py:11 (3 examples)>>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/maneuver.py::poliastro.maneuver.Maneuver' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/maneuver.py::poliastro.maneuver.Maneuver' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/maneuver.py::poliastro.maneuver.Maneuver' when='call' outcome='failed'>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <DoctestItem 'poliastro.maneuver.Maneuver'>
            call: <CallInfo when='call' exception: <DocTest poliastro.maneuver.Maneuver from /home/ritiek/poliastro/src/poliastro/maneuver.py:11 (3 examples)>>
            report: <TestReport 'src/poliastro/maneuver.py::poliastro.maneuver.Maneuver' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <DoctestItem 'poliastro.maneuver.Maneuver'>
            nextitem: <Function 'test_body_has_k_given_in_constructor'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <DoctestItem 'poliastro.maneuver.Maneuver'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/maneuver.py::poliastro.maneuver.Maneuver' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/maneuver.py::poliastro.maneuver.Maneuver' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/maneuver.py::poliastro.maneuver.Maneuver' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/maneuver.py::poliastro.maneuver.Maneuver
            location: ('src/poliastro/maneuver.py', 11, '[doctest] poliastro.maneuver.Maneuver')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_body_has_k_given_in_constructor'>
          nextitem: <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_bodies.py::test_body_has_k_given_in_constructor
            location: ('src/poliastro/tests/test_bodies.py', 8, 'test_body_has_k_given_in_constructor')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_body_has_k_given_in_constructor'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_has_k_given_in_constructor'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_body_has_k_given_in_constructor' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_has_k_given_in_constructor' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_has_k_given_in_constructor' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_body_has_k_given_in_constructor'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_body_has_k_given_in_constructor'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_has_k_given_in_constructor'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_body_has_k_given_in_constructor' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_has_k_given_in_constructor' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_has_k_given_in_constructor' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_body_has_k_given_in_constructor'>
            nextitem: <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_has_k_given_in_constructor'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_body_has_k_given_in_constructor' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_has_k_given_in_constructor' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_has_k_given_in_constructor' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_bodies.py::test_body_has_k_given_in_constructor
            location: ('src/poliastro/tests/test_bodies.py', 8, 'test_body_has_k_given_in_constructor')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>
          nextitem: <Function 'test_body_printing_has_name_and_symbol'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_bodies.py::test_body_from_parameters_raises_valueerror_if_k_units_not_correct
            location: ('src/poliastro/tests/test_bodies.py', 14, 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_body_from_parameters_raises_valueerror_if_k_units_not_correct' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_from_parameters_raises_valueerror_if_k_units_not_correct' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_from_parameters_raises_valueerror_if_k_units_not_correct' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_body_from_parameters_raises_valueerror_if_k_units_not_correct' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_from_parameters_raises_valueerror_if_k_units_not_correct' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_from_parameters_raises_valueerror_if_k_units_not_correct' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>
            nextitem: <Function 'test_body_printing_has_name_and_symbol'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_body_from_parameters_raises_valueerror_if_k_units_not_correct' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_from_parameters_raises_valueerror_if_k_units_not_correct' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_from_parameters_raises_valueerror_if_k_units_not_correct' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_bodies.py::test_body_from_parameters_raises_valueerror_if_k_units_not_correct
            location: ('src/poliastro/tests/test_bodies.py', 14, 'test_body_from_parameters_raises_valueerror_if_k_units_not_correct')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_body_printing_has_name_and_symbol'>
          nextitem: <Function 'test_earth_has_k_given_in_literature'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_bodies.py::test_body_printing_has_name_and_symbol
            location: ('src/poliastro/tests/test_bodies.py', 24, 'test_body_printing_has_name_and_symbol')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_body_printing_has_name_and_symbol'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_printing_has_name_and_symbol'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_body_printing_has_name_and_symbol' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_printing_has_name_and_symbol' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_printing_has_name_and_symbol' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_body_printing_has_name_and_symbol'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_body_printing_has_name_and_symbol'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_printing_has_name_and_symbol'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_body_printing_has_name_and_symbol' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_printing_has_name_and_symbol' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_printing_has_name_and_symbol' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_body_printing_has_name_and_symbol'>
            nextitem: <Function 'test_earth_has_k_given_in_literature'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_printing_has_name_and_symbol'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_body_printing_has_name_and_symbol' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_printing_has_name_and_symbol' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_printing_has_name_and_symbol' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_bodies.py::test_body_printing_has_name_and_symbol
            location: ('src/poliastro/tests/test_bodies.py', 24, 'test_body_printing_has_name_and_symbol')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_earth_has_k_given_in_literature'>
          nextitem: <Function 'test_body_kwargs'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_bodies.py::test_earth_has_k_given_in_literature
            location: ('src/poliastro/tests/test_bodies.py', 33, 'test_earth_has_k_given_in_literature')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_earth_has_k_given_in_literature'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_earth_has_k_given_in_literature'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_earth_has_k_given_in_literature' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_earth_has_k_given_in_literature' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_earth_has_k_given_in_literature' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_earth_has_k_given_in_literature'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_earth_has_k_given_in_literature'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_earth_has_k_given_in_literature'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_earth_has_k_given_in_literature' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_earth_has_k_given_in_literature' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_earth_has_k_given_in_literature' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_earth_has_k_given_in_literature'>
            nextitem: <Function 'test_body_kwargs'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_earth_has_k_given_in_literature'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_earth_has_k_given_in_literature' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_earth_has_k_given_in_literature' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_earth_has_k_given_in_literature' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_bodies.py::test_earth_has_k_given_in_literature
            location: ('src/poliastro/tests/test_bodies.py', 33, 'test_earth_has_k_given_in_literature')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_body_kwargs'>
          nextitem: <Function 'test_from_relative'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_bodies.py::test_body_kwargs
            location: ('src/poliastro/tests/test_bodies.py', 39, 'test_body_kwargs')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_body_kwargs'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_kwargs'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_body_kwargs' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_kwargs' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_kwargs' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_body_kwargs'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_body_kwargs'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_kwargs'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_body_kwargs' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_kwargs' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_kwargs' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_body_kwargs'>
            nextitem: <Function 'test_from_relative'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_kwargs'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_body_kwargs' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_kwargs' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_body_kwargs' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_bodies.py::test_body_kwargs
            location: ('src/poliastro/tests/test_bodies.py', 39, 'test_body_kwargs')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_from_relative'>
          nextitem: <Function 'test_body_centered_to_icrs_transformation'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_bodies.py::test_from_relative
            location: ('src/poliastro/tests/test_bodies.py', 49, 'test_from_relative')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_from_relative'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_from_relative'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_from_relative' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_from_relative' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_from_relative' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_from_relative'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_from_relative'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_from_relative'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_from_relative' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_from_relative' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_from_relative' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_from_relative'>
            nextitem: <Function 'test_body_centered_to_icrs_transformation'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_from_relative'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_bodies.py::test_from_relative' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_bodies.py::test_from_relative' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_bodies.py::test_from_relative' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_bodies.py::test_from_relative
            location: ('src/poliastro/tests/test_bodies.py', 49, 'test_from_relative')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_body_centered_to_icrs_transformation'>
          nextitem: <Function 'test_icrs_to_body_centered_transformation'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_coordinates.py::test_body_centered_to_icrs_transformation
            location: ('src/poliastro/tests/test_coordinates.py', 13, 'test_body_centered_to_icrs_transformation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_body_centered_to_icrs_transformation'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_centered_to_icrs_transformation'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_coordinates.py::test_body_centered_to_icrs_transformation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_body_centered_to_icrs_transformation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_body_centered_to_icrs_transformation' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_body_centered_to_icrs_transformation'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_body_centered_to_icrs_transformation'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_centered_to_icrs_transformation'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_coordinates.py::test_body_centered_to_icrs_transformation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_body_centered_to_icrs_transformation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_body_centered_to_icrs_transformation' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_body_centered_to_icrs_transformation'>
            nextitem: <Function 'test_icrs_to_body_centered_transformation'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_body_centered_to_icrs_transformation'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_coordinates.py::test_body_centered_to_icrs_transformation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_body_centered_to_icrs_transformation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_body_centered_to_icrs_transformation' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_coordinates.py::test_body_centered_to_icrs_transformation
            location: ('src/poliastro/tests/test_coordinates.py', 13, 'test_body_centered_to_icrs_transformation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_icrs_to_body_centered_transformation'>
          nextitem: <Function 'test_inertial_body_centered_to_pqw'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_coordinates.py::test_icrs_to_body_centered_transformation
            location: ('src/poliastro/tests/test_coordinates.py', 28, 'test_icrs_to_body_centered_transformation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_icrs_to_body_centered_transformation'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_icrs_to_body_centered_transformation'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_coordinates.py::test_icrs_to_body_centered_transformation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_icrs_to_body_centered_transformation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_icrs_to_body_centered_transformation' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_icrs_to_body_centered_transformation'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_icrs_to_body_centered_transformation'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_icrs_to_body_centered_transformation'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_coordinates.py::test_icrs_to_body_centered_transformation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_icrs_to_body_centered_transformation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_icrs_to_body_centered_transformation' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_icrs_to_body_centered_transformation'>
            nextitem: <Function 'test_inertial_body_centered_to_pqw'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_icrs_to_body_centered_transformation'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_coordinates.py::test_icrs_to_body_centered_transformation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_icrs_to_body_centered_transformation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_icrs_to_body_centered_transformation' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_coordinates.py::test_icrs_to_body_centered_transformation
            location: ('src/poliastro/tests/test_coordinates.py', 28, 'test_icrs_to_body_centered_transformation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_inertial_body_centered_to_pqw'>
          nextitem: <Function 'test_hyp2f1_battin_scalar[0.0]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_coordinates.py::test_inertial_body_centered_to_pqw
            location: ('src/poliastro/tests/test_coordinates.py', 42, 'test_inertial_body_centered_to_pqw')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_inertial_body_centered_to_pqw'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_inertial_body_centered_to_pqw'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_coordinates.py::test_inertial_body_centered_to_pqw' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_inertial_body_centered_to_pqw' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_inertial_body_centered_to_pqw' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_inertial_body_centered_to_pqw'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_inertial_body_centered_to_pqw'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_inertial_body_centered_to_pqw'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_coordinates.py::test_inertial_body_centered_to_pqw' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_inertial_body_centered_to_pqw' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_inertial_body_centered_to_pqw' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_inertial_body_centered_to_pqw'>
            nextitem: <Function 'test_hyp2f1_battin_scalar[0.0]'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_inertial_body_centered_to_pqw'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_coordinates.py::test_inertial_body_centered_to_pqw' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_inertial_body_centered_to_pqw' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_coordinates.py::test_inertial_body_centered_to_pqw' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_coordinates.py::test_inertial_body_centered_to_pqw
            location: ('src/poliastro/tests/test_coordinates.py', 42, 'test_inertial_body_centered_to_pqw')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.0]'>
          nextitem: <Function 'test_hyp2f1_battin_scalar[0.1]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.0]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.0]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.0]'>>
          finish pytest_fixture_setup --> 0.0 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.0]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.0]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.0]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.0]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.0]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_hyp2f1_battin_scalar[0.0]'>
          find_module called for: numba.typing.cffi_utils [assertion]
          find_module called for: cffi.cparser [assertion]
          find_module called for: cffi.commontypes [assertion]
          find_module called for: cffi._pycparser [assertion]
          find_module called for: pycparser [assertion]
          find_module called for: pycparser.c_parser [assertion]
          find_module called for: pycparser.ply [assertion]
          find_module called for: pycparser.ply.yacc [assertion]
          find_module called for: pycparser.c_ast [assertion]
          find_module called for: pycparser.c_lexer [assertion]
          find_module called for: pycparser.ply.lex [assertion]
          find_module called for: pycparser.plyparser [assertion]
          find_module called for: pycparser.ast_transforms [assertion]
          find_module called for: numba.typing.cmathdecl [assertion]
          find_module called for: cmath [assertion]
          find_module called for: numba.typing.enumdecl [assertion]
          find_module called for: numba.typing.listdecl [assertion]
          find_module called for: numba.typing.collections [assertion]
          find_module called for: numba.typing.mathdecl [assertion]
          find_module called for: numba.typing.operatordecl [assertion]
          find_module called for: numba.typing.randomdecl [assertion]
          find_module called for: numba.typing.setdecl [assertion]
          find_module called for: numba.typing.arraydecl [assertion]
          find_module called for: numba.typing.npdatetime [assertion]
          find_module called for: numba.typing.ctypes_utils [assertion]
          find_module called for: numba.typing.bufproto [assertion]
          find_module called for: numba.targets.arraymath [assertion]
          find_module called for: numba.targets.enumimpl [assertion]
          find_module called for: numba.targets.iterators [assertion]
          find_module called for: numba.targets.linalg [assertion]
          find_module called for: numba.targets.numbers [assertion]
          find_module called for: numba.targets.optional [assertion]
          find_module called for: numba.targets.polynomial [assertion]
          find_module called for: numba.targets.smartarray [assertion]
          find_module called for: numba.targets.tupleobj [assertion]
          find_module called for: numba.targets.npdatetime [assertion]
          find_module called for: numba.targets.cffiimpl [assertion]
          find_module called for: numba.targets.cmathimpl [assertion]
          find_module called for: numba.targets.mathimpl [assertion]
          find_module called for: numba.targets.npyimpl [assertion]
          find_module called for: numba.targets.ufunc_db [assertion]
          find_module called for: numba.targets.npyfuncs [assertion]
          find_module called for: numba.targets.operatorimpl [assertion]
          find_module called for: numba.targets.printimpl [assertion]
          find_module called for: numba.targets.randomimpl [assertion]
          find_module called for: numba.consts [assertion]
          find_module called for: numba.runtime.context [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.0]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.0]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.0]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.0]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.0]'>
            nextitem: <Function 'test_hyp2f1_battin_scalar[0.1]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.0]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.0]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.0]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.1]'>
          nextitem: <Function 'test_hyp2f1_battin_scalar[0.2]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.1]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.1]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.1]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.1]'>>
          finish pytest_fixture_setup --> 0.1 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.1]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.1]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.1]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.1]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.1]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_hyp2f1_battin_scalar[0.1]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.1]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.1]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.1]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.1]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.1]'>
            nextitem: <Function 'test_hyp2f1_battin_scalar[0.2]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.1]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.1]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.1]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.1]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.1]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.1]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.1]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.2]'>
          nextitem: <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.2]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.2]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.2]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.2]'>>
          finish pytest_fixture_setup --> 0.2 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.2]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.2]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.2]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.2]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.2]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_hyp2f1_battin_scalar[0.2]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.2]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.2]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.2]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.2]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.2]'>
            nextitem: <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.2]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.2]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.2]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.2]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.2]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.2]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.2]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>
          nextitem: <Function 'test_hyp2f1_battin_scalar[0.4]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.30000000000000004]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.30000000000000004]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>>
          finish pytest_fixture_setup --> 0.30000000000000004 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.30000000000000004]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.30000000000000004]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.30000000000000004]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.30000000000000004]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.30000000000000004]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.30000000000000004]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>
            nextitem: <Function 'test_hyp2f1_battin_scalar[0.4]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.30000000000000004]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.30000000000000004]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.30000000000000004]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.30000000000000004]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.30000000000000004]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.30000000000000004]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.4]'>
          nextitem: <Function 'test_hyp2f1_battin_scalar[0.5]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.4]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.4]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.4]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.4]'>>
          finish pytest_fixture_setup --> 0.4 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.4]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.4]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.4]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.4]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.4]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_hyp2f1_battin_scalar[0.4]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.4]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.4]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.4]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.4]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.4]'>
            nextitem: <Function 'test_hyp2f1_battin_scalar[0.5]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.4]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.4]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.4]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.4]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.4]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.4]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.4]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.5]'>
          nextitem: <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.5]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.5]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.5]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.5]'>>
          finish pytest_fixture_setup --> 0.5 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.5]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.5]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.5]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.5]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.5]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_hyp2f1_battin_scalar[0.5]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.5]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.5]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.5]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.5]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.5]'>
            nextitem: <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.5]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.5]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.5]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.5]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.5]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.5]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.5]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>
          nextitem: <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.6000000000000001]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.6000000000000001]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>>
          finish pytest_fixture_setup --> 0.6000000000000001 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.6000000000000001]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.6000000000000001]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.6000000000000001]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.6000000000000001]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.6000000000000001]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.6000000000000001]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>
            nextitem: <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.6000000000000001]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.6000000000000001]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.6000000000000001]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.6000000000000001]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.6000000000000001]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.6000000000000001]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>
          nextitem: <Function 'test_hyp2f1_battin_scalar[0.8]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.7000000000000001]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.7000000000000001]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>>
          finish pytest_fixture_setup --> 0.7000000000000001 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.7000000000000001]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.7000000000000001]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.7000000000000001]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.7000000000000001]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.7000000000000001]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.7000000000000001]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>
            nextitem: <Function 'test_hyp2f1_battin_scalar[0.8]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.7000000000000001]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.7000000000000001]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.7000000000000001]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.7000000000000001]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.7000000000000001]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.7000000000000001]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.8]'>
          nextitem: <Function 'test_hyp2f1_battin_scalar[0.9]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.8]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.8]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.8]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.8]'>>
          finish pytest_fixture_setup --> 0.8 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.8]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.8]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.8]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.8]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.8]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_hyp2f1_battin_scalar[0.8]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.8]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.8]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.8]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.8]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.8]'>
            nextitem: <Function 'test_hyp2f1_battin_scalar[0.9]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.8]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.8]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.8]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.8]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.8]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.8]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.8]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_hyp2f1_battin_scalar[0.9]'>
          nextitem: <Function 'test_hyp2f1_battin_scalar[1.0]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.9]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.9]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.9]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.9]'>>
          finish pytest_fixture_setup --> 0.9 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.9]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.9]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.9]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.9]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.9]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_hyp2f1_battin_scalar[0.9]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.9]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.9]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.9]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.9]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.9]'>
            nextitem: <Function 'test_hyp2f1_battin_scalar[1.0]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[0.9]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[0.9]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.9]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.9]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.9]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[0.9]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[0.9]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_hyp2f1_battin_scalar[1.0]'>
          nextitem: <Function 'test_vallado75[lambert0]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[1.0]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[1.0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_hyp2f1_battin_scalar[1.0]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[1.0]'>>
          finish pytest_fixture_setup --> 1.0 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[1.0]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[1.0]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[1.0]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[1.0]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_hyp2f1_battin_scalar[1.0]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_hyp2f1_battin_scalar[1.0]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[1.0]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[1.0]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[1.0]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[1.0]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_hyp2f1_battin_scalar[1.0]'>
            nextitem: <Function 'test_vallado75[lambert0]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='x' scope='function' baseid='' >
              request: <SubRequest 'x' for <Function 'test_hyp2f1_battin_scalar[1.0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hyp2f1_battin_scalar[1.0]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[1.0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[1.0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[1.0]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_hyper.py::test_hyp2f1_battin_scalar[1.0]
            location: ('src/poliastro/tests/test_hyper.py', 9, 'test_hyp2f1_battin_scalar[1.0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_vallado75[lambert0]'>
          nextitem: <Function 'test_vallado75[lambert1]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_vallado75[lambert0]
            location: ('src/poliastro/tests/test_iod.py', 10, 'test_vallado75[lambert0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_vallado75[lambert0]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_vallado75[lambert0]'>>
          finish pytest_fixture_setup --> <function lambert at 0x7f3d5d7fd8c8> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_vallado75[lambert0]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert0]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert0]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert0]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_vallado75[lambert0]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_vallado75[lambert0]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_vallado75[lambert0]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert0]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert0]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert0]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_vallado75[lambert0]'>
            nextitem: <Function 'test_vallado75[lambert1]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_vallado75[lambert0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_vallado75[lambert0]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert0]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_vallado75[lambert0]
            location: ('src/poliastro/tests/test_iod.py', 10, 'test_vallado75[lambert0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_vallado75[lambert1]'>
          nextitem: <Function 'test_curtis52[lambert0]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_vallado75[lambert1]
            location: ('src/poliastro/tests/test_iod.py', 10, 'test_vallado75[lambert1]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_vallado75[lambert1]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_vallado75[lambert1]'>>
          finish pytest_fixture_setup --> <function lambert at 0x7f3d5d85d598> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_vallado75[lambert1]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert1]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert1]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert1]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_vallado75[lambert1]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_vallado75[lambert1]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_vallado75[lambert1]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert1]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert1]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert1]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_vallado75[lambert1]'>
            nextitem: <Function 'test_curtis52[lambert0]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_vallado75[lambert1]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_vallado75[lambert1]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert1]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert1]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_vallado75[lambert1]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_vallado75[lambert1]
            location: ('src/poliastro/tests/test_iod.py', 10, 'test_vallado75[lambert1]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_curtis52[lambert0]'>
          nextitem: <Function 'test_curtis52[lambert1]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_curtis52[lambert0]
            location: ('src/poliastro/tests/test_iod.py', 25, 'test_curtis52[lambert0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_curtis52[lambert0]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_curtis52[lambert0]'>>
          finish pytest_fixture_setup --> <function lambert at 0x7f3d5d7fd8c8> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_curtis52[lambert0]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert0]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert0]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert0]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_curtis52[lambert0]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_curtis52[lambert0]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_curtis52[lambert0]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert0]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert0]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert0]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_curtis52[lambert0]'>
            nextitem: <Function 'test_curtis52[lambert1]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_curtis52[lambert0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_curtis52[lambert0]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert0]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_curtis52[lambert0]
            location: ('src/poliastro/tests/test_iod.py', 25, 'test_curtis52[lambert0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_curtis52[lambert1]'>
          nextitem: <Function 'test_curtis53[lambert0]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_curtis52[lambert1]
            location: ('src/poliastro/tests/test_iod.py', 25, 'test_curtis52[lambert1]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_curtis52[lambert1]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_curtis52[lambert1]'>>
          finish pytest_fixture_setup --> <function lambert at 0x7f3d5d85d598> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_curtis52[lambert1]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert1]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert1]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert1]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_curtis52[lambert1]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_curtis52[lambert1]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_curtis52[lambert1]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert1]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert1]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert1]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_curtis52[lambert1]'>
            nextitem: <Function 'test_curtis53[lambert0]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_curtis52[lambert1]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_curtis52[lambert1]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert1]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert1]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis52[lambert1]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_curtis52[lambert1]
            location: ('src/poliastro/tests/test_iod.py', 25, 'test_curtis52[lambert1]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_curtis53[lambert0]'>
          nextitem: <Function 'test_curtis53[lambert1]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_curtis53[lambert0]
            location: ('src/poliastro/tests/test_iod.py', 40, 'test_curtis53[lambert0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_curtis53[lambert0]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_curtis53[lambert0]'>>
          finish pytest_fixture_setup --> <function lambert at 0x7f3d5d7fd8c8> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_curtis53[lambert0]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert0]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert0]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert0]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_curtis53[lambert0]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_curtis53[lambert0]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_curtis53[lambert0]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert0]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert0]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert0]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_curtis53[lambert0]'>
            nextitem: <Function 'test_curtis53[lambert1]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_curtis53[lambert0]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_curtis53[lambert0]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert0]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_curtis53[lambert0]
            location: ('src/poliastro/tests/test_iod.py', 40, 'test_curtis53[lambert0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_curtis53[lambert1]'>
          nextitem: <Function 'test_molniya_der_zero_full_revolution[lambert]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_curtis53[lambert1]
            location: ('src/poliastro/tests/test_iod.py', 40, 'test_curtis53[lambert1]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_curtis53[lambert1]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_curtis53[lambert1]'>>
          finish pytest_fixture_setup --> <function lambert at 0x7f3d5d85d598> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_curtis53[lambert1]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert1]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert1]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert1]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_curtis53[lambert1]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_curtis53[lambert1]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_curtis53[lambert1]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert1]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert1]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert1]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_curtis53[lambert1]'>
            nextitem: <Function 'test_molniya_der_zero_full_revolution[lambert]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_curtis53[lambert1]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_curtis53[lambert1]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert1]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert1]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_curtis53[lambert1]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_curtis53[lambert1]
            location: ('src/poliastro/tests/test_iod.py', 40, 'test_curtis53[lambert1]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_molniya_der_zero_full_revolution[lambert]'>
          nextitem: <Function 'test_molniya_der_one_full_revolution[lambert]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_molniya_der_zero_full_revolution[lambert]
            location: ('src/poliastro/tests/test_iod.py', 54, 'test_molniya_der_zero_full_revolution[lambert]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_molniya_der_zero_full_revolution[lambert]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_molniya_der_zero_full_revolution[lambert]'>>
          finish pytest_fixture_setup --> <function lambert at 0x7f3d5d85d598> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_molniya_der_zero_full_revolution[lambert]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_zero_full_revolution[lambert]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_zero_full_revolution[lambert]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_zero_full_revolution[lambert]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_molniya_der_zero_full_revolution[lambert]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_molniya_der_zero_full_revolution[lambert]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_molniya_der_zero_full_revolution[lambert]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_zero_full_revolution[lambert]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_zero_full_revolution[lambert]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_zero_full_revolution[lambert]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_molniya_der_zero_full_revolution[lambert]'>
            nextitem: <Function 'test_molniya_der_one_full_revolution[lambert]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_molniya_der_zero_full_revolution[lambert]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_molniya_der_zero_full_revolution[lambert]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_zero_full_revolution[lambert]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_zero_full_revolution[lambert]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_zero_full_revolution[lambert]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_molniya_der_zero_full_revolution[lambert]
            location: ('src/poliastro/tests/test_iod.py', 54, 'test_molniya_der_zero_full_revolution[lambert]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_molniya_der_one_full_revolution[lambert]'>
          nextitem: <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_molniya_der_one_full_revolution[lambert]
            location: ('src/poliastro/tests/test_iod.py', 69, 'test_molniya_der_one_full_revolution[lambert]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_molniya_der_one_full_revolution[lambert]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_molniya_der_one_full_revolution[lambert]'>>
          finish pytest_fixture_setup --> <function lambert at 0x7f3d5d85d598> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_molniya_der_one_full_revolution[lambert]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_one_full_revolution[lambert]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_one_full_revolution[lambert]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_one_full_revolution[lambert]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_molniya_der_one_full_revolution[lambert]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_molniya_der_one_full_revolution[lambert]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_molniya_der_one_full_revolution[lambert]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_one_full_revolution[lambert]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_one_full_revolution[lambert]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_one_full_revolution[lambert]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_molniya_der_one_full_revolution[lambert]'>
            nextitem: <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_molniya_der_one_full_revolution[lambert]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_molniya_der_one_full_revolution[lambert]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_one_full_revolution[lambert]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_one_full_revolution[lambert]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_molniya_der_one_full_revolution[lambert]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_molniya_der_one_full_revolution[lambert]
            location: ('src/poliastro/tests/test_iod.py', 69, 'test_molniya_der_one_full_revolution[lambert]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>
          nextitem: <Function 'test_ijit_returns_same_function_without_args'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_raises_exception_for_non_feasible_solution[lambert]
            location: ('src/poliastro/tests/test_iod.py', 90, 'test_raises_exception_for_non_feasible_solution[lambert]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>>
          finish pytest_fixture_setup --> <function lambert at 0x7f3d5d85d598> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_raises_exception_for_non_feasible_solution[lambert]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_raises_exception_for_non_feasible_solution[lambert]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_raises_exception_for_non_feasible_solution[lambert]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_raises_exception_for_non_feasible_solution[lambert]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_raises_exception_for_non_feasible_solution[lambert]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_raises_exception_for_non_feasible_solution[lambert]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>
            nextitem: <Function 'test_ijit_returns_same_function_without_args'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='lambert' scope='function' baseid='' >
              request: <SubRequest 'lambert' for <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_raises_exception_for_non_feasible_solution[lambert]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_iod.py::test_raises_exception_for_non_feasible_solution[lambert]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_iod.py::test_raises_exception_for_non_feasible_solution[lambert]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_iod.py::test_raises_exception_for_non_feasible_solution[lambert]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_iod.py::test_raises_exception_for_non_feasible_solution[lambert]
            location: ('src/poliastro/tests/test_iod.py', 90, 'test_raises_exception_for_non_feasible_solution[lambert]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_ijit_returns_same_function_without_args'>
          nextitem: <Function 'test_ijit_returns_same_function_with_args'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_without_args
            location: ('src/poliastro/tests/test_jit.py', 38, 'test_ijit_returns_same_function_without_args')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_ijit_returns_same_function_without_args'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_ijit_returns_same_function_without_args'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_without_args' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_without_args' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_without_args' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_ijit_returns_same_function_without_args'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_ijit_returns_same_function_without_args'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_ijit_returns_same_function_without_args'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_without_args' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_without_args' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_without_args' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_ijit_returns_same_function_without_args'>
            nextitem: <Function 'test_ijit_returns_same_function_with_args'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_ijit_returns_same_function_without_args'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_without_args' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_without_args' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_without_args' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_without_args
            location: ('src/poliastro/tests/test_jit.py', 38, 'test_ijit_returns_same_function_without_args')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_ijit_returns_same_function_with_args'>
          nextitem: <Function 'test_no_numba_emits_warning'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_with_args
            location: ('src/poliastro/tests/test_jit.py', 45, 'test_ijit_returns_same_function_with_args')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_ijit_returns_same_function_with_args'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_ijit_returns_same_function_with_args'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_with_args' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_with_args' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_with_args' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_ijit_returns_same_function_with_args'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_ijit_returns_same_function_with_args'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_ijit_returns_same_function_with_args'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_with_args' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_with_args' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_with_args' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_ijit_returns_same_function_with_args'>
            nextitem: <Function 'test_no_numba_emits_warning'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_ijit_returns_same_function_with_args'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_with_args' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_with_args' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_with_args' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_jit.py::test_ijit_returns_same_function_with_args
            location: ('src/poliastro/tests/test_jit.py', 45, 'test_ijit_returns_same_function_with_args')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_no_numba_emits_warning'>
          nextitem: <Function 'test_maneuver_raises_error_if_units_are_wrong'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_jit.py::test_no_numba_emits_warning
            location: ('src/poliastro/tests/test_jit.py', 52, 'test_no_numba_emits_warning')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_no_numba_emits_warning'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='recwarn' scope='function' baseid='' >
              request: <SubRequest 'recwarn' for <Function 'test_no_numba_emits_warning'>>
          finish pytest_fixture_setup --> WarningsRecorder(record=True) [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_no_numba_emits_warning'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_jit.py::test_no_numba_emits_warning' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_jit.py::test_no_numba_emits_warning' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_jit.py::test_no_numba_emits_warning' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_no_numba_emits_warning'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_no_numba_emits_warning'>
          find_module called for: poliastro.jit [assertion]
          find_module called for: numba [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_no_numba_emits_warning'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_jit.py::test_no_numba_emits_warning' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_jit.py::test_no_numba_emits_warning' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_jit.py::test_no_numba_emits_warning' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_no_numba_emits_warning'>
            nextitem: <Function 'test_maneuver_raises_error_if_units_are_wrong'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='recwarn' scope='function' baseid='' >
              request: <SubRequest 'recwarn' for <Function 'test_no_numba_emits_warning'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_no_numba_emits_warning'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_jit.py::test_no_numba_emits_warning' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_jit.py::test_no_numba_emits_warning' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_jit.py::test_no_numba_emits_warning' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_jit.py::test_no_numba_emits_warning
            location: ('src/poliastro/tests/test_jit.py', 52, 'test_no_numba_emits_warning')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_maneuver_raises_error_if_units_are_wrong'>
          nextitem: <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_units_are_wrong
            location: ('src/poliastro/tests/test_maneuver.py', 13, 'test_maneuver_raises_error_if_units_are_wrong')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_maneuver_raises_error_if_units_are_wrong'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_maneuver_raises_error_if_units_are_wrong'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_units_are_wrong' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_units_are_wrong' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_units_are_wrong' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_maneuver_raises_error_if_units_are_wrong'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_maneuver_raises_error_if_units_are_wrong'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_maneuver_raises_error_if_units_are_wrong'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_units_are_wrong' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_units_are_wrong' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_units_are_wrong' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_maneuver_raises_error_if_units_are_wrong'>
            nextitem: <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_maneuver_raises_error_if_units_are_wrong'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_units_are_wrong' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_units_are_wrong' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_units_are_wrong' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_units_are_wrong
            location: ('src/poliastro/tests/test_maneuver.py', 13, 'test_maneuver_raises_error_if_units_are_wrong')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>
          nextitem: <Function 'test_maneuver_total_time'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_dvs_are_not_vectors
            location: ('src/poliastro/tests/test_maneuver.py', 22, 'test_maneuver_raises_error_if_dvs_are_not_vectors')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_dvs_are_not_vectors' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_dvs_are_not_vectors' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_dvs_are_not_vectors' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_dvs_are_not_vectors' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_dvs_are_not_vectors' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_dvs_are_not_vectors' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>
            nextitem: <Function 'test_maneuver_total_time'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_maneuver_raises_error_if_dvs_are_not_vectors'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_dvs_are_not_vectors' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_dvs_are_not_vectors' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_dvs_are_not_vectors' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_maneuver.py::test_maneuver_raises_error_if_dvs_are_not_vectors
            location: ('src/poliastro/tests/test_maneuver.py', 22, 'test_maneuver_raises_error_if_dvs_are_not_vectors')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_maneuver_total_time'>
          nextitem: <Function 'test_maneuver_impulse'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_maneuver.py::test_maneuver_total_time
            location: ('src/poliastro/tests/test_maneuver.py', 31, 'test_maneuver_total_time')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_maneuver_total_time'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_maneuver_total_time'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_total_time' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_total_time' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_total_time' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_maneuver_total_time'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_maneuver_total_time'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_maneuver_total_time'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_total_time' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_total_time' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_total_time' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_maneuver_total_time'>
            nextitem: <Function 'test_maneuver_impulse'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_maneuver_total_time'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_total_time' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_total_time' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_total_time' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_maneuver.py::test_maneuver_total_time
            location: ('src/poliastro/tests/test_maneuver.py', 31, 'test_maneuver_total_time')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_maneuver_impulse'>
          nextitem: <Function 'test_hohmann_maneuver'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_maneuver.py::test_maneuver_impulse
            location: ('src/poliastro/tests/test_maneuver.py', 40, 'test_maneuver_impulse')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_maneuver_impulse'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_maneuver_impulse'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_impulse' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_impulse' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_impulse' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_maneuver_impulse'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_maneuver_impulse'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_maneuver_impulse'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_impulse' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_impulse' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_impulse' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_maneuver_impulse'>
            nextitem: <Function 'test_hohmann_maneuver'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_maneuver_impulse'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_impulse' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_impulse' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_maneuver_impulse' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_maneuver.py::test_maneuver_impulse
            location: ('src/poliastro/tests/test_maneuver.py', 40, 'test_maneuver_impulse')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_hohmann_maneuver'>
          nextitem: <Function 'test_bielliptic_maneuver'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_maneuver.py::test_hohmann_maneuver
            location: ('src/poliastro/tests/test_maneuver.py', 46, 'test_hohmann_maneuver')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_hohmann_maneuver'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hohmann_maneuver'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_hohmann_maneuver' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_hohmann_maneuver' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_hohmann_maneuver' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_hohmann_maneuver'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_hohmann_maneuver'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hohmann_maneuver'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_hohmann_maneuver' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_hohmann_maneuver' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_hohmann_maneuver' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_hohmann_maneuver'>
            nextitem: <Function 'test_bielliptic_maneuver'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_hohmann_maneuver'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_hohmann_maneuver' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_hohmann_maneuver' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_hohmann_maneuver' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_maneuver.py::test_hohmann_maneuver
            location: ('src/poliastro/tests/test_maneuver.py', 46, 'test_hohmann_maneuver')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_bielliptic_maneuver'>
          nextitem: <Function 'test_compute_soi'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_maneuver.py::test_bielliptic_maneuver
            location: ('src/poliastro/tests/test_maneuver.py', 61, 'test_bielliptic_maneuver')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_bielliptic_maneuver'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_bielliptic_maneuver'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_bielliptic_maneuver' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_bielliptic_maneuver' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_bielliptic_maneuver' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_bielliptic_maneuver'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_bielliptic_maneuver'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_bielliptic_maneuver'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_bielliptic_maneuver' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_bielliptic_maneuver' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_bielliptic_maneuver' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_bielliptic_maneuver'>
            nextitem: <Function 'test_compute_soi'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_bielliptic_maneuver'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_maneuver.py::test_bielliptic_maneuver' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_bielliptic_maneuver' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_maneuver.py::test_bielliptic_maneuver' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_maneuver.py::test_bielliptic_maneuver
            location: ('src/poliastro/tests/test_maneuver.py', 61, 'test_bielliptic_maneuver')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_compute_soi'>
          nextitem: <Function 'test_compute_missing_body_soi_raises_error'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_patched_conics.py::test_compute_soi
            location: ('src/poliastro/tests/test_patched_conics.py', 10, 'test_compute_soi')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_compute_soi'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_compute_soi'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_soi' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_soi' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_soi' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_compute_soi'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_compute_soi'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_compute_soi'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_soi' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_soi' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_soi' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_compute_soi'>
            nextitem: <Function 'test_compute_missing_body_soi_raises_error'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_compute_soi'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_soi' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_soi' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_soi' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_patched_conics.py::test_compute_soi
            location: ('src/poliastro/tests/test_patched_conics.py', 10, 'test_compute_soi')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_compute_missing_body_soi_raises_error'>
          nextitem: <Function 'test_orbitplotter_has_axes'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_patched_conics.py::test_compute_missing_body_soi_raises_error
            location: ('src/poliastro/tests/test_patched_conics.py', 39, 'test_compute_missing_body_soi_raises_error')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_compute_missing_body_soi_raises_error'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_compute_missing_body_soi_raises_error'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_missing_body_soi_raises_error' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_missing_body_soi_raises_error' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_missing_body_soi_raises_error' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_compute_missing_body_soi_raises_error'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_compute_missing_body_soi_raises_error'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_compute_missing_body_soi_raises_error'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_missing_body_soi_raises_error' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_missing_body_soi_raises_error' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_missing_body_soi_raises_error' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_compute_missing_body_soi_raises_error'>
            nextitem: <Function 'test_orbitplotter_has_axes'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_compute_missing_body_soi_raises_error'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_missing_body_soi_raises_error' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_missing_body_soi_raises_error' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_patched_conics.py::test_compute_missing_body_soi_raises_error' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_patched_conics.py::test_compute_missing_body_soi_raises_error
            location: ('src/poliastro/tests/test_patched_conics.py', 39, 'test_compute_missing_body_soi_raises_error')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_orbitplotter_has_axes'>
          nextitem: <Function 'test_set_frame'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_orbitplotter_has_axes
            location: ('src/poliastro/tests/test_plotting.py', 11, 'test_orbitplotter_has_axes')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_orbitplotter_has_axes'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbitplotter_has_axes'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_orbitplotter_has_axes' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_orbitplotter_has_axes' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_orbitplotter_has_axes' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_orbitplotter_has_axes'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_orbitplotter_has_axes'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbitplotter_has_axes'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_orbitplotter_has_axes' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_orbitplotter_has_axes' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_orbitplotter_has_axes' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_orbitplotter_has_axes'>
            nextitem: <Function 'test_set_frame'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbitplotter_has_axes'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_orbitplotter_has_axes' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_orbitplotter_has_axes' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_orbitplotter_has_axes' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_orbitplotter_has_axes
            location: ('src/poliastro/tests/test_plotting.py', 11, 'test_orbitplotter_has_axes')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_set_frame'>
          nextitem: <Function 'test_axes_labels_and_title'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_set_frame
            location: ('src/poliastro/tests/test_plotting.py', 17, 'test_set_frame')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_set_frame'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_set_frame'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_set_frame' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_set_frame' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_set_frame' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_set_frame'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_set_frame'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_set_frame'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_set_frame' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_set_frame' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_set_frame' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_set_frame'>
            nextitem: <Function 'test_axes_labels_and_title'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_set_frame'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_set_frame' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_set_frame' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_set_frame' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_set_frame
            location: ('src/poliastro/tests/test_plotting.py', 17, 'test_set_frame')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_axes_labels_and_title'>
          nextitem: <Function 'test_number_of_lines_for_osculating_orbit'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_axes_labels_and_title
            location: ('src/poliastro/tests/test_plotting.py', 27, 'test_axes_labels_and_title')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_axes_labels_and_title'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_axes_labels_and_title'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_axes_labels_and_title' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_axes_labels_and_title' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_axes_labels_and_title' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_axes_labels_and_title'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_axes_labels_and_title'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_axes_labels_and_title'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_axes_labels_and_title' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_axes_labels_and_title' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_axes_labels_and_title' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_axes_labels_and_title'>
            nextitem: <Function 'test_number_of_lines_for_osculating_orbit'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_axes_labels_and_title'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_axes_labels_and_title' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_axes_labels_and_title' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_axes_labels_and_title' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_axes_labels_and_title
            location: ('src/poliastro/tests/test_plotting.py', 27, 'test_axes_labels_and_title')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_number_of_lines_for_osculating_orbit'>
          nextitem: <Function 'test_legend'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_number_of_lines_for_osculating_orbit
            location: ('src/poliastro/tests/test_plotting.py', 37, 'test_number_of_lines_for_osculating_orbit')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_number_of_lines_for_osculating_orbit'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_number_of_lines_for_osculating_orbit'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_number_of_lines_for_osculating_orbit' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_number_of_lines_for_osculating_orbit' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_number_of_lines_for_osculating_orbit' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_number_of_lines_for_osculating_orbit'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_number_of_lines_for_osculating_orbit'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_number_of_lines_for_osculating_orbit'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_number_of_lines_for_osculating_orbit' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_number_of_lines_for_osculating_orbit' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_number_of_lines_for_osculating_orbit' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_number_of_lines_for_osculating_orbit'>
            nextitem: <Function 'test_legend'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_number_of_lines_for_osculating_orbit'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_number_of_lines_for_osculating_orbit' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_number_of_lines_for_osculating_orbit' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_number_of_lines_for_osculating_orbit' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_number_of_lines_for_osculating_orbit
            location: ('src/poliastro/tests/test_plotting.py', 37, 'test_number_of_lines_for_osculating_orbit')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_legend'>
          nextitem: <Function 'test_color'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_legend
            location: ('src/poliastro/tests/test_plotting.py', 46, 'test_legend')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_legend'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_legend'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_legend' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_legend' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_legend' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_legend'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_legend'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_legend'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_legend' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_legend' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_legend' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_legend'>
            nextitem: <Function 'test_color'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_legend'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_legend' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_legend' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_legend' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_legend
            location: ('src/poliastro/tests/test_plotting.py', 46, 'test_legend')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_color'>
          nextitem: <Function 'test_plot_solar_system[True-8]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_color
            location: ('src/poliastro/tests/test_plotting.py', 58, 'test_color')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_color'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_color'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_color' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_color' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_color' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_color'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_color'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_color'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_color' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_color' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_color' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_color'>
            nextitem: <Function 'test_plot_solar_system[True-8]'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_color'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_color' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_color' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_color' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_color
            location: ('src/poliastro/tests/test_plotting.py', 58, 'test_color')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_plot_solar_system[True-8]'>
          nextitem: <Function 'test_plot_solar_system[False-4]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_plot_solar_system[True-8]
            location: ('src/poliastro/tests/test_plotting.py', 70, 'test_plot_solar_system[True-8]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_plot_solar_system[True-8]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='outer' scope='function' baseid='' >
              request: <SubRequest 'outer' for <Function 'test_plot_solar_system[True-8]'>>
          finish pytest_fixture_setup --> True [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='expected' scope='function' baseid='' >
              request: <SubRequest 'expected' for <Function 'test_plot_solar_system[True-8]'>>
          finish pytest_fixture_setup --> 8 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_solar_system[True-8]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[True-8]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[True-8]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[True-8]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_plot_solar_system[True-8]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_plot_solar_system[True-8]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_solar_system[True-8]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[True-8]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[True-8]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[True-8]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_plot_solar_system[True-8]'>
            nextitem: <Function 'test_plot_solar_system[False-4]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='expected' scope='function' baseid='' >
              request: <SubRequest 'expected' for <Function 'test_plot_solar_system[True-8]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='outer' scope='function' baseid='' >
              request: <SubRequest 'outer' for <Function 'test_plot_solar_system[True-8]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_solar_system[True-8]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[True-8]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[True-8]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[True-8]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_plot_solar_system[True-8]
            location: ('src/poliastro/tests/test_plotting.py', 70, 'test_plot_solar_system[True-8]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_plot_solar_system[False-4]'>
          nextitem: <Function 'test_get_figure_has_expected_properties'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_plot_solar_system[False-4]
            location: ('src/poliastro/tests/test_plotting.py', 70, 'test_plot_solar_system[False-4]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_plot_solar_system[False-4]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='outer' scope='function' baseid='' >
              request: <SubRequest 'outer' for <Function 'test_plot_solar_system[False-4]'>>
          finish pytest_fixture_setup --> False [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='expected' scope='function' baseid='' >
              request: <SubRequest 'expected' for <Function 'test_plot_solar_system[False-4]'>>
          finish pytest_fixture_setup --> 4 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_solar_system[False-4]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[False-4]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[False-4]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[False-4]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_plot_solar_system[False-4]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_plot_solar_system[False-4]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_solar_system[False-4]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[False-4]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[False-4]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[False-4]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_plot_solar_system[False-4]'>
            nextitem: <Function 'test_get_figure_has_expected_properties'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='expected' scope='function' baseid='' >
              request: <SubRequest 'expected' for <Function 'test_plot_solar_system[False-4]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='outer' scope='function' baseid='' >
              request: <SubRequest 'outer' for <Function 'test_plot_solar_system[False-4]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_solar_system[False-4]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[False-4]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[False-4]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting.py::test_plot_solar_system[False-4]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting.py::test_plot_solar_system[False-4]
            location: ('src/poliastro/tests/test_plotting.py', 70, 'test_plot_solar_system[False-4]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_get_figure_has_expected_properties'>
          nextitem: <Function 'test_set_different_attractor_raises_error'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting3d.py::test_get_figure_has_expected_properties
            location: ('src/poliastro/tests/test_plotting3d.py', 10, 'test_get_figure_has_expected_properties')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_get_figure_has_expected_properties'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_get_figure_has_expected_properties'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_get_figure_has_expected_properties' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_get_figure_has_expected_properties' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_get_figure_has_expected_properties' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_get_figure_has_expected_properties'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_get_figure_has_expected_properties'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_get_figure_has_expected_properties'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_get_figure_has_expected_properties' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_get_figure_has_expected_properties' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_get_figure_has_expected_properties' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_get_figure_has_expected_properties'>
            nextitem: <Function 'test_set_different_attractor_raises_error'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_get_figure_has_expected_properties'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_get_figure_has_expected_properties' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_get_figure_has_expected_properties' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_get_figure_has_expected_properties' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting3d.py::test_get_figure_has_expected_properties
            location: ('src/poliastro/tests/test_plotting3d.py', 10, 'test_get_figure_has_expected_properties')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_set_different_attractor_raises_error'>
          nextitem: <Function 'test_plot_sets_attractor'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting3d.py::test_set_different_attractor_raises_error
            location: ('src/poliastro/tests/test_plotting3d.py', 22, 'test_set_different_attractor_raises_error')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_set_different_attractor_raises_error'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_set_different_attractor_raises_error'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_different_attractor_raises_error' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_different_attractor_raises_error' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_different_attractor_raises_error' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_set_different_attractor_raises_error'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_set_different_attractor_raises_error'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_set_different_attractor_raises_error'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_different_attractor_raises_error' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_different_attractor_raises_error' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_different_attractor_raises_error' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_set_different_attractor_raises_error'>
            nextitem: <Function 'test_plot_sets_attractor'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_set_different_attractor_raises_error'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_different_attractor_raises_error' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_different_attractor_raises_error' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_different_attractor_raises_error' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting3d.py::test_set_different_attractor_raises_error
            location: ('src/poliastro/tests/test_plotting3d.py', 22, 'test_set_different_attractor_raises_error')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_plot_sets_attractor'>
          nextitem: <Function 'test_plot_appends_data'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting3d.py::test_plot_sets_attractor
            location: ('src/poliastro/tests/test_plotting3d.py', 37, 'test_plot_sets_attractor')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_plot_sets_attractor'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_sets_attractor'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_sets_attractor' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_sets_attractor' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_sets_attractor' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_plot_sets_attractor'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_plot_sets_attractor'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_sets_attractor'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_sets_attractor' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_sets_attractor' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_sets_attractor' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_plot_sets_attractor'>
            nextitem: <Function 'test_plot_appends_data'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_sets_attractor'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_sets_attractor' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_sets_attractor' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_sets_attractor' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting3d.py::test_plot_sets_attractor
            location: ('src/poliastro/tests/test_plotting3d.py', 37, 'test_plot_sets_attractor')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_plot_appends_data'>
          nextitem: <Function 'test_plot_trajectory_without_attractor_raises_error'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting3d.py::test_plot_appends_data
            location: ('src/poliastro/tests/test_plotting3d.py', 47, 'test_plot_appends_data')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_plot_appends_data'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_appends_data'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_appends_data' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_appends_data' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_appends_data' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_plot_appends_data'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_plot_appends_data'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_appends_data'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_appends_data' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_appends_data' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_appends_data' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_plot_appends_data'>
            nextitem: <Function 'test_plot_trajectory_without_attractor_raises_error'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_appends_data'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_appends_data' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_appends_data' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_appends_data' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting3d.py::test_plot_appends_data
            location: ('src/poliastro/tests/test_plotting3d.py', 47, 'test_plot_appends_data')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_plot_trajectory_without_attractor_raises_error'>
          nextitem: <Function 'test_set_view'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting3d.py::test_plot_trajectory_without_attractor_raises_error
            location: ('src/poliastro/tests/test_plotting3d.py', 55, 'test_plot_trajectory_without_attractor_raises_error')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_plot_trajectory_without_attractor_raises_error'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_trajectory_without_attractor_raises_error'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_trajectory_without_attractor_raises_error' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_trajectory_without_attractor_raises_error' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_trajectory_without_attractor_raises_error' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_plot_trajectory_without_attractor_raises_error'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_plot_trajectory_without_attractor_raises_error'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_trajectory_without_attractor_raises_error'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_trajectory_without_attractor_raises_error' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_trajectory_without_attractor_raises_error' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_trajectory_without_attractor_raises_error' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_plot_trajectory_without_attractor_raises_error'>
            nextitem: <Function 'test_set_view'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_plot_trajectory_without_attractor_raises_error'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_trajectory_without_attractor_raises_error' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_trajectory_without_attractor_raises_error' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_plot_trajectory_without_attractor_raises_error' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting3d.py::test_plot_trajectory_without_attractor_raises_error
            location: ('src/poliastro/tests/test_plotting3d.py', 55, 'test_plot_trajectory_without_attractor_raises_error')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_set_view'>
          nextitem: <Function 'test_stumpff_functions_near_zero'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_plotting3d.py::test_set_view
            location: ('src/poliastro/tests/test_plotting3d.py', 64, 'test_set_view')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_set_view'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_set_view'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_view' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_view' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_view' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_set_view'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_set_view'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_set_view'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_view' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_view' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_view' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_set_view'>
            nextitem: <Function 'test_stumpff_functions_near_zero'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_set_view'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_view' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_view' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_plotting3d.py::test_set_view' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_plotting3d.py::test_set_view
            location: ('src/poliastro/tests/test_plotting3d.py', 64, 'test_set_view')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_stumpff_functions_near_zero'>
          nextitem: <Function 'test_stumpff_functions_above_zero'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_stumpff.py::test_stumpff_functions_near_zero
            location: ('src/poliastro/tests/test_stumpff.py', 6, 'test_stumpff_functions_near_zero')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_stumpff_functions_near_zero'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_stumpff_functions_near_zero'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_near_zero' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_near_zero' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_near_zero' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_stumpff_functions_near_zero'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_stumpff_functions_near_zero'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_stumpff_functions_near_zero'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_near_zero' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_near_zero' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_near_zero' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_stumpff_functions_near_zero'>
            nextitem: <Function 'test_stumpff_functions_above_zero'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_stumpff_functions_near_zero'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_near_zero' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_near_zero' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_near_zero' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_stumpff.py::test_stumpff_functions_near_zero
            location: ('src/poliastro/tests/test_stumpff.py', 6, 'test_stumpff_functions_near_zero')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_stumpff_functions_above_zero'>
          nextitem: <Function 'test_stumpff_functions_under_zero'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_stumpff.py::test_stumpff_functions_above_zero
            location: ('src/poliastro/tests/test_stumpff.py', 15, 'test_stumpff_functions_above_zero')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_stumpff_functions_above_zero'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_stumpff_functions_above_zero'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_above_zero' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_above_zero' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_above_zero' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_stumpff_functions_above_zero'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_stumpff_functions_above_zero'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_stumpff_functions_above_zero'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_above_zero' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_above_zero' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_above_zero' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_stumpff_functions_above_zero'>
            nextitem: <Function 'test_stumpff_functions_under_zero'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_stumpff_functions_above_zero'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_above_zero' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_above_zero' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_above_zero' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_stumpff.py::test_stumpff_functions_above_zero
            location: ('src/poliastro/tests/test_stumpff.py', 15, 'test_stumpff_functions_above_zero')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_stumpff_functions_under_zero'>
          nextitem: <Function 'test_convert_between_coe_and_rv_is_transitive'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_stumpff.py::test_stumpff_functions_under_zero
            location: ('src/poliastro/tests/test_stumpff.py', 24, 'test_stumpff_functions_under_zero')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_stumpff_functions_under_zero'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_stumpff_functions_under_zero'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_under_zero' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_under_zero' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_under_zero' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_stumpff_functions_under_zero'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_stumpff_functions_under_zero'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_stumpff_functions_under_zero'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_under_zero' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_under_zero' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_under_zero' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_stumpff_functions_under_zero'>
            nextitem: <Function 'test_convert_between_coe_and_rv_is_transitive'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_stumpff_functions_under_zero'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_under_zero' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_under_zero' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_stumpff.py::test_stumpff_functions_under_zero' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_stumpff.py::test_stumpff_functions_under_zero
            location: ('src/poliastro/tests/test_stumpff.py', 24, 'test_stumpff_functions_under_zero')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_convert_between_coe_and_rv_is_transitive'>
          nextitem: <Function 'test_convert_between_coe_and_mee_is_transitive'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_rv_is_transitive
            location: ('src/poliastro/tests/test_twobody.py', 12, 'test_convert_between_coe_and_rv_is_transitive')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_convert_between_coe_and_rv_is_transitive'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_convert_between_coe_and_rv_is_transitive'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_rv_is_transitive' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_rv_is_transitive' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_rv_is_transitive' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_convert_between_coe_and_rv_is_transitive'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_convert_between_coe_and_rv_is_transitive'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_convert_between_coe_and_rv_is_transitive'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_rv_is_transitive' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_rv_is_transitive' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_rv_is_transitive' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_convert_between_coe_and_rv_is_transitive'>
            nextitem: <Function 'test_convert_between_coe_and_mee_is_transitive'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_convert_between_coe_and_rv_is_transitive'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_rv_is_transitive' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_rv_is_transitive' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_rv_is_transitive' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_rv_is_transitive
            location: ('src/poliastro/tests/test_twobody.py', 12, 'test_convert_between_coe_and_rv_is_transitive')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_convert_between_coe_and_mee_is_transitive'>
          nextitem: <Function 'test_simple_circular_velocity'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_mee_is_transitive
            location: ('src/poliastro/tests/test_twobody.py', 28, 'test_convert_between_coe_and_mee_is_transitive')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_convert_between_coe_and_mee_is_transitive'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_convert_between_coe_and_mee_is_transitive'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_mee_is_transitive' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_mee_is_transitive' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_mee_is_transitive' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_convert_between_coe_and_mee_is_transitive'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_convert_between_coe_and_mee_is_transitive'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_convert_between_coe_and_mee_is_transitive'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_mee_is_transitive' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_mee_is_transitive' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_mee_is_transitive' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_convert_between_coe_and_mee_is_transitive'>
            nextitem: <Function 'test_simple_circular_velocity'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_convert_between_coe_and_mee_is_transitive'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_mee_is_transitive' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_mee_is_transitive' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_mee_is_transitive' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_twobody.py::test_convert_between_coe_and_mee_is_transitive
            location: ('src/poliastro/tests/test_twobody.py', 28, 'test_convert_between_coe_and_mee_is_transitive')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_simple_circular_velocity'>
          nextitem: <Function 'test_rotate_unitless_vector'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_util.py::test_simple_circular_velocity
            location: ('src/poliastro/tests/test_util.py', 12, 'test_simple_circular_velocity')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_simple_circular_velocity'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_simple_circular_velocity'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_simple_circular_velocity' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_simple_circular_velocity' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_simple_circular_velocity' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_simple_circular_velocity'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_simple_circular_velocity'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_simple_circular_velocity'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_simple_circular_velocity' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_simple_circular_velocity' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_simple_circular_velocity' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_simple_circular_velocity'>
            nextitem: <Function 'test_rotate_unitless_vector'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_simple_circular_velocity'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_simple_circular_velocity' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_simple_circular_velocity' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_simple_circular_velocity' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_util.py::test_simple_circular_velocity
            location: ('src/poliastro/tests/test_util.py', 12, 'test_simple_circular_velocity')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_rotate_unitless_vector'>
          nextitem: <Function 'test_rotate_vector_with_units'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_util.py::test_rotate_unitless_vector
            location: ('src/poliastro/tests/test_util.py', 23, 'test_rotate_unitless_vector')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_rotate_unitless_vector'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_rotate_unitless_vector'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_rotate_unitless_vector' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_rotate_unitless_vector' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_rotate_unitless_vector' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_rotate_unitless_vector'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_rotate_unitless_vector'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_rotate_unitless_vector'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_rotate_unitless_vector' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_rotate_unitless_vector' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_rotate_unitless_vector' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_rotate_unitless_vector'>
            nextitem: <Function 'test_rotate_vector_with_units'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_rotate_unitless_vector'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_rotate_unitless_vector' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_rotate_unitless_vector' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_rotate_unitless_vector' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_util.py::test_rotate_unitless_vector
            location: ('src/poliastro/tests/test_util.py', 23, 'test_rotate_unitless_vector')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_rotate_vector_with_units'>
          nextitem: <Function 'test_transform_unitless_vector'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_util.py::test_rotate_vector_with_units
            location: ('src/poliastro/tests/test_util.py', 32, 'test_rotate_vector_with_units')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_rotate_vector_with_units'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_rotate_vector_with_units'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_rotate_vector_with_units' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_rotate_vector_with_units' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_rotate_vector_with_units' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_rotate_vector_with_units'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_rotate_vector_with_units'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_rotate_vector_with_units'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_rotate_vector_with_units' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_rotate_vector_with_units' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_rotate_vector_with_units' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_rotate_vector_with_units'>
            nextitem: <Function 'test_transform_unitless_vector'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_rotate_vector_with_units'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_rotate_vector_with_units' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_rotate_vector_with_units' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_rotate_vector_with_units' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_util.py::test_rotate_vector_with_units
            location: ('src/poliastro/tests/test_util.py', 32, 'test_rotate_vector_with_units')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_transform_unitless_vector'>
          nextitem: <Function 'test_time_range_spacing_periods'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_util.py::test_transform_unitless_vector
            location: ('src/poliastro/tests/test_util.py', 41, 'test_transform_unitless_vector')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_transform_unitless_vector'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_transform_unitless_vector'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_transform_unitless_vector' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_transform_unitless_vector' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_transform_unitless_vector' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_transform_unitless_vector'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_transform_unitless_vector'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_transform_unitless_vector'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_transform_unitless_vector' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_transform_unitless_vector' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_transform_unitless_vector' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_transform_unitless_vector'>
            nextitem: <Function 'test_time_range_spacing_periods'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_transform_unitless_vector'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_transform_unitless_vector' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_transform_unitless_vector' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_transform_unitless_vector' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_util.py::test_transform_unitless_vector
            location: ('src/poliastro/tests/test_util.py', 41, 'test_transform_unitless_vector')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_time_range_spacing_periods'>
          nextitem: <Function 'test_time_range_requires_keyword_arguments'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_util.py::test_time_range_spacing_periods
            location: ('src/poliastro/tests/test_util.py', 50, 'test_time_range_spacing_periods')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_time_range_spacing_periods'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_time_range_spacing_periods'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_time_range_spacing_periods' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_spacing_periods' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_spacing_periods' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_time_range_spacing_periods'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_time_range_spacing_periods'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_time_range_spacing_periods'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_time_range_spacing_periods' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_spacing_periods' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_spacing_periods' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_time_range_spacing_periods'>
            nextitem: <Function 'test_time_range_requires_keyword_arguments'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_time_range_spacing_periods'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_time_range_spacing_periods' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_spacing_periods' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_spacing_periods' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_util.py::test_time_range_spacing_periods
            location: ('src/poliastro/tests/test_util.py', 50, 'test_time_range_spacing_periods')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_time_range_requires_keyword_arguments'>
          nextitem: <Function 'test_time_range_raises_error_wrong_arguments'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_util.py::test_time_range_requires_keyword_arguments
            location: ('src/poliastro/tests/test_util.py', 71, 'test_time_range_requires_keyword_arguments')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_time_range_requires_keyword_arguments'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_time_range_requires_keyword_arguments'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_time_range_requires_keyword_arguments' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_requires_keyword_arguments' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_requires_keyword_arguments' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_time_range_requires_keyword_arguments'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_time_range_requires_keyword_arguments'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_time_range_requires_keyword_arguments'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_time_range_requires_keyword_arguments' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_requires_keyword_arguments' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_requires_keyword_arguments' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_time_range_requires_keyword_arguments'>
            nextitem: <Function 'test_time_range_raises_error_wrong_arguments'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_time_range_requires_keyword_arguments'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_time_range_requires_keyword_arguments' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_requires_keyword_arguments' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_requires_keyword_arguments' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_util.py::test_time_range_requires_keyword_arguments
            location: ('src/poliastro/tests/test_util.py', 71, 'test_time_range_requires_keyword_arguments')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_time_range_raises_error_wrong_arguments'>
          nextitem: <Function 'test_asteroid_db_is_called_with_right_path'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/test_util.py::test_time_range_raises_error_wrong_arguments
            location: ('src/poliastro/tests/test_util.py', 77, 'test_time_range_raises_error_wrong_arguments')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_time_range_raises_error_wrong_arguments'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_time_range_raises_error_wrong_arguments'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_time_range_raises_error_wrong_arguments' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_raises_error_wrong_arguments' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_raises_error_wrong_arguments' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_time_range_raises_error_wrong_arguments'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_time_range_raises_error_wrong_arguments'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_time_range_raises_error_wrong_arguments'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_time_range_raises_error_wrong_arguments' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_raises_error_wrong_arguments' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_raises_error_wrong_arguments' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_time_range_raises_error_wrong_arguments'>
            nextitem: <Function 'test_asteroid_db_is_called_with_right_path'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_time_range_raises_error_wrong_arguments'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/test_util.py::test_time_range_raises_error_wrong_arguments' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_raises_error_wrong_arguments' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/test_util.py::test_time_range_raises_error_wrong_arguments' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/test_util.py::test_time_range_raises_error_wrong_arguments
            location: ('src/poliastro/tests/test_util.py', 77, 'test_time_range_raises_error_wrong_arguments')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_asteroid_db_is_called_with_right_path'>
          nextitem: <Function 'test_comet_db_is_called_with_right_path'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_asteroid_db_is_called_with_right_path
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 9, 'test_asteroid_db_is_called_with_right_path')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_asteroid_db_is_called_with_right_path'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_asteroid_db_is_called_with_right_path'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_asteroid_db_is_called_with_right_path' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_asteroid_db_is_called_with_right_path' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_asteroid_db_is_called_with_right_path' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_asteroid_db_is_called_with_right_path'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_asteroid_db_is_called_with_right_path'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_asteroid_db_is_called_with_right_path'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_asteroid_db_is_called_with_right_path' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_asteroid_db_is_called_with_right_path' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_asteroid_db_is_called_with_right_path' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_asteroid_db_is_called_with_right_path'>
            nextitem: <Function 'test_comet_db_is_called_with_right_path'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_asteroid_db_is_called_with_right_path'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_asteroid_db_is_called_with_right_path' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_asteroid_db_is_called_with_right_path' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_asteroid_db_is_called_with_right_path' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_asteroid_db_is_called_with_right_path
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 9, 'test_asteroid_db_is_called_with_right_path')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_comet_db_is_called_with_right_path'>
          nextitem: <Function 'test_orbit_from_name'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_comet_db_is_called_with_right_path
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 16, 'test_comet_db_is_called_with_right_path')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_comet_db_is_called_with_right_path'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_comet_db_is_called_with_right_path'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_comet_db_is_called_with_right_path' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_comet_db_is_called_with_right_path' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_comet_db_is_called_with_right_path' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_comet_db_is_called_with_right_path'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_comet_db_is_called_with_right_path'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_comet_db_is_called_with_right_path'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_comet_db_is_called_with_right_path' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_comet_db_is_called_with_right_path' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_comet_db_is_called_with_right_path' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_comet_db_is_called_with_right_path'>
            nextitem: <Function 'test_orbit_from_name'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_comet_db_is_called_with_right_path'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_comet_db_is_called_with_right_path' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_comet_db_is_called_with_right_path' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_comet_db_is_called_with_right_path' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_comet_db_is_called_with_right_path
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 16, 'test_comet_db_is_called_with_right_path')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_orbit_from_name'>
          nextitem: <Function 'test_record_from_name'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_orbit_from_name
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 23, 'test_orbit_from_name')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_orbit_from_name'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_from_name'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_orbit_from_name' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_orbit_from_name' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_orbit_from_name' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_orbit_from_name'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_orbit_from_name'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_from_name'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_orbit_from_name' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_orbit_from_name' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_orbit_from_name' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_orbit_from_name'>
            nextitem: <Function 'test_record_from_name'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_from_name'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_orbit_from_name' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_orbit_from_name' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_orbit_from_name' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_orbit_from_name
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 23, 'test_orbit_from_name')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_record_from_name'>
          nextitem: <Function 'test_read_headers'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_record_from_name
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 34, 'test_record_from_name')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_record_from_name'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_record_from_name'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_record_from_name' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_record_from_name' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_record_from_name' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_record_from_name'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_record_from_name'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_record_from_name'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_record_from_name' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_record_from_name' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_record_from_name' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_record_from_name'>
            nextitem: <Function 'test_read_headers'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_record_from_name'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_record_from_name' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_record_from_name' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_record_from_name' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_record_from_name
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 34, 'test_record_from_name')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_read_headers'>
          nextitem: <Function 'test_read_record'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_headers
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 45, 'test_read_headers')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_read_headers'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_read_headers'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_headers' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_headers' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_headers' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_read_headers'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_read_headers'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_read_headers'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_headers' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_headers' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_headers' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_read_headers'>
            nextitem: <Function 'test_read_record'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_read_headers'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_headers' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_headers' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_headers' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_headers
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 45, 'test_read_headers')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_read_record'>
          nextitem: <Function 'test_download_dastcom5_raises_error_when_folder_exists'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_record
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 53, 'test_read_record')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_read_record'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_read_record'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_record' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_record' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_record' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_read_record'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_read_record'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_read_record'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_record' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_record' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_record' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_read_record'>
            nextitem: <Function 'test_download_dastcom5_raises_error_when_folder_exists'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_read_record'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_record' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_record' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_record' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_read_record
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 53, 'test_read_record')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_download_dastcom5_raises_error_when_folder_exists'>
          nextitem: <Function 'test_download_dastcom5_creates_folder'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_raises_error_when_folder_exists
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 69, 'test_download_dastcom5_raises_error_when_folder_exists')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_download_dastcom5_raises_error_when_folder_exists'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_download_dastcom5_raises_error_when_folder_exists'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_raises_error_when_folder_exists' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_raises_error_when_folder_exists' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_raises_error_when_folder_exists' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_download_dastcom5_raises_error_when_folder_exists'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_download_dastcom5_raises_error_when_folder_exists'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_download_dastcom5_raises_error_when_folder_exists'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_raises_error_when_folder_exists' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_raises_error_when_folder_exists' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_raises_error_when_folder_exists' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_download_dastcom5_raises_error_when_folder_exists'>
            nextitem: <Function 'test_download_dastcom5_creates_folder'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_download_dastcom5_raises_error_when_folder_exists'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_raises_error_when_folder_exists' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_raises_error_when_folder_exists' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_raises_error_when_folder_exists' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_raises_error_when_folder_exists
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 69, 'test_download_dastcom5_raises_error_when_folder_exists')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_download_dastcom5_creates_folder'>
          nextitem: <Function 'test_download_dastcom5_downloads_file'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_creates_folder
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 80, 'test_download_dastcom5_creates_folder')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_download_dastcom5_creates_folder'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_download_dastcom5_creates_folder'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_creates_folder' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_creates_folder' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_creates_folder' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_download_dastcom5_creates_folder'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_download_dastcom5_creates_folder'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_download_dastcom5_creates_folder'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_creates_folder' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_creates_folder' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_creates_folder' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_download_dastcom5_creates_folder'>
            nextitem: <Function 'test_download_dastcom5_downloads_file'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_download_dastcom5_creates_folder'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_creates_folder' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_creates_folder' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_creates_folder' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_creates_folder
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 80, 'test_download_dastcom5_creates_folder')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_download_dastcom5_downloads_file'>
          nextitem: <Function 'test_orbit_from_spk_id_has_proper_values'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_downloads_file
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 91, 'test_download_dastcom5_downloads_file')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_download_dastcom5_downloads_file'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_download_dastcom5_downloads_file'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_downloads_file' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_downloads_file' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_downloads_file' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_download_dastcom5_downloads_file'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_download_dastcom5_downloads_file'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_download_dastcom5_downloads_file'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_downloads_file' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_downloads_file' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_downloads_file' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_download_dastcom5_downloads_file'>
            nextitem: <Function 'test_orbit_from_spk_id_has_proper_values'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_download_dastcom5_downloads_file'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_downloads_file' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_downloads_file' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_downloads_file' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_dastcom5.py::test_download_dastcom5_downloads_file
            location: ('src/poliastro/tests/tests_neos/test_dastcom5.py', 91, 'test_download_dastcom5_downloads_file')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_orbit_from_spk_id_has_proper_values'>
          nextitem: <Function 'test_orbit_from_spk_id_raises_when_error'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_has_proper_values
            location: ('src/poliastro/tests/tests_neos/test_neos_neows.py', 13, 'test_orbit_from_spk_id_has_proper_values')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_orbit_from_spk_id_has_proper_values'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_from_spk_id_has_proper_values'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_has_proper_values' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_has_proper_values' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_has_proper_values' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_orbit_from_spk_id_has_proper_values'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_orbit_from_spk_id_has_proper_values'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_from_spk_id_has_proper_values'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_has_proper_values' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_has_proper_values' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_has_proper_values' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_orbit_from_spk_id_has_proper_values'>
            nextitem: <Function 'test_orbit_from_spk_id_raises_when_error'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_from_spk_id_has_proper_values'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_has_proper_values' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_has_proper_values' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_has_proper_values' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_has_proper_values
            location: ('src/poliastro/tests/tests_neos/test_neos_neows.py', 13, 'test_orbit_from_spk_id_has_proper_values')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_orbit_from_spk_id_raises_when_error'>
          nextitem: <Function 'test_spk_id_from_name_raises_when_error'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_raises_when_error
            location: ('src/poliastro/tests/tests_neos/test_neos_neows.py', 40, 'test_orbit_from_spk_id_raises_when_error')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_orbit_from_spk_id_raises_when_error'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_from_spk_id_raises_when_error'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_raises_when_error' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_raises_when_error' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_raises_when_error' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_orbit_from_spk_id_raises_when_error'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_orbit_from_spk_id_raises_when_error'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_from_spk_id_raises_when_error'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_raises_when_error' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_raises_when_error' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_raises_when_error' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_orbit_from_spk_id_raises_when_error'>
            nextitem: <Function 'test_spk_id_from_name_raises_when_error'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_from_spk_id_raises_when_error'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_raises_when_error' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_raises_when_error' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_raises_when_error' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_neos_neows.py::test_orbit_from_spk_id_raises_when_error
            location: ('src/poliastro/tests/tests_neos/test_neos_neows.py', 40, 'test_orbit_from_spk_id_raises_when_error')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_spk_id_from_name_raises_when_error'>
          nextitem: <Function 'test_spk_id_from_name_parses_body'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_error
            location: ('src/poliastro/tests/tests_neos/test_neos_neows.py', 50, 'test_spk_id_from_name_raises_when_error')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_spk_id_from_name_raises_when_error'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_spk_id_from_name_raises_when_error'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_error' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_error' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_error' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_spk_id_from_name_raises_when_error'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_spk_id_from_name_raises_when_error'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_spk_id_from_name_raises_when_error'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_error' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_error' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_error' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_spk_id_from_name_raises_when_error'>
            nextitem: <Function 'test_spk_id_from_name_parses_body'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_spk_id_from_name_raises_when_error'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_error' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_error' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_error' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_error
            location: ('src/poliastro/tests/tests_neos/test_neos_neows.py', 50, 'test_spk_id_from_name_raises_when_error')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_spk_id_from_name_parses_body'>
          nextitem: <Function 'test_spk_id_from_name_parses_object_list_and_raises'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_body
            location: ('src/poliastro/tests/tests_neos/test_neos_neows.py', 60, 'test_spk_id_from_name_parses_body')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_spk_id_from_name_parses_body'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_spk_id_from_name_parses_body'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_body' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_body' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_body' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_spk_id_from_name_parses_body'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_spk_id_from_name_parses_body'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_spk_id_from_name_parses_body'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_body' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_body' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_body' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_spk_id_from_name_parses_body'>
            nextitem: <Function 'test_spk_id_from_name_parses_object_list_and_raises'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_spk_id_from_name_parses_body'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_body' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_body' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_body' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_body
            location: ('src/poliastro/tests/tests_neos/test_neos_neows.py', 60, 'test_spk_id_from_name_parses_body')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_spk_id_from_name_parses_object_list_and_raises'>
          nextitem: <Function 'test_spk_id_from_name_raises_when_not_found'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_object_list_and_raises
            location: ('src/poliastro/tests/tests_neos/test_neos_neows.py', 71, 'test_spk_id_from_name_parses_object_list_and_raises')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_spk_id_from_name_parses_object_list_and_raises'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_spk_id_from_name_parses_object_list_and_raises'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_object_list_and_raises' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_object_list_and_raises' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_object_list_and_raises' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_spk_id_from_name_parses_object_list_and_raises'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_spk_id_from_name_parses_object_list_and_raises'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_spk_id_from_name_parses_object_list_and_raises'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_object_list_and_raises' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_object_list_and_raises' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_object_list_and_raises' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_spk_id_from_name_parses_object_list_and_raises'>
            nextitem: <Function 'test_spk_id_from_name_raises_when_not_found'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_spk_id_from_name_parses_object_list_and_raises'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_object_list_and_raises' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_object_list_and_raises' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_object_list_and_raises' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_parses_object_list_and_raises
            location: ('src/poliastro/tests/tests_neos/test_neos_neows.py', 71, 'test_spk_id_from_name_parses_object_list_and_raises')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_spk_id_from_name_raises_when_not_found'>
          nextitem: <Function 'test_true_to_eccentric'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_not_found
            location: ('src/poliastro/tests/tests_neos/test_neos_neows.py', 84, 'test_spk_id_from_name_raises_when_not_found')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_spk_id_from_name_raises_when_not_found'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_spk_id_from_name_raises_when_not_found'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_not_found' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_not_found' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_not_found' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_spk_id_from_name_raises_when_not_found'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_spk_id_from_name_raises_when_not_found'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_spk_id_from_name_raises_when_not_found'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_not_found' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_not_found' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_not_found' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_spk_id_from_name_raises_when_not_found'>
            nextitem: <Function 'test_true_to_eccentric'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_spk_id_from_name_raises_when_not_found'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_not_found' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_not_found' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_not_found' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_neos/test_neos_neows.py::test_spk_id_from_name_raises_when_not_found
            location: ('src/poliastro/tests/tests_neos/test_neos_neows.py', 84, 'test_spk_id_from_name_raises_when_not_found')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_true_to_eccentric'>
          nextitem: <Function 'test_true_to_eccentric_hyperbolic'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 8, 'test_true_to_eccentric')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_true_to_eccentric'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_true_to_eccentric'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_true_to_eccentric'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_true_to_eccentric'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_true_to_eccentric'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_true_to_eccentric'>
            nextitem: <Function 'test_true_to_eccentric_hyperbolic'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_true_to_eccentric'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 8, 'test_true_to_eccentric')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_true_to_eccentric_hyperbolic'>
          nextitem: <Function 'test_mean_to_true'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric_hyperbolic
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 29, 'test_true_to_eccentric_hyperbolic')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_true_to_eccentric_hyperbolic'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_true_to_eccentric_hyperbolic'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric_hyperbolic' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric_hyperbolic' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric_hyperbolic' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_true_to_eccentric_hyperbolic'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_true_to_eccentric_hyperbolic'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_true_to_eccentric_hyperbolic'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric_hyperbolic' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric_hyperbolic' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric_hyperbolic' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_true_to_eccentric_hyperbolic'>
            nextitem: <Function 'test_mean_to_true'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_true_to_eccentric_hyperbolic'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric_hyperbolic' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric_hyperbolic' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric_hyperbolic' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_eccentric_hyperbolic
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 29, 'test_true_to_eccentric_hyperbolic')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_mean_to_true'>
          nextitem: <Function 'test_true_to_mean'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 41, 'test_mean_to_true')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_mean_to_true'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_mean_to_true'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_mean_to_true'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_mean_to_true'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_mean_to_true'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_mean_to_true'>
            nextitem: <Function 'test_true_to_mean'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_mean_to_true'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 41, 'test_mean_to_true')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_true_to_mean'>
          nextitem: <Function 'test_true_to_mean_hyperbolic'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 66, 'test_true_to_mean')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_true_to_mean'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_true_to_mean'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_true_to_mean'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_true_to_mean'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_true_to_mean'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_true_to_mean'>
            nextitem: <Function 'test_true_to_mean_hyperbolic'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_true_to_mean'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 66, 'test_true_to_mean')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_true_to_mean_hyperbolic'>
          nextitem: <Function 'test_mean_to_true_hyperbolic'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean_hyperbolic
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 91, 'test_true_to_mean_hyperbolic')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_true_to_mean_hyperbolic'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_true_to_mean_hyperbolic'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean_hyperbolic' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean_hyperbolic' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean_hyperbolic' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_true_to_mean_hyperbolic'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_true_to_mean_hyperbolic'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_true_to_mean_hyperbolic'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean_hyperbolic' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean_hyperbolic' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean_hyperbolic' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_true_to_mean_hyperbolic'>
            nextitem: <Function 'test_mean_to_true_hyperbolic'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_true_to_mean_hyperbolic'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean_hyperbolic' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean_hyperbolic' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean_hyperbolic' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_true_to_mean_hyperbolic
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 91, 'test_true_to_mean_hyperbolic')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_mean_to_true_hyperbolic'>
          nextitem: <Function 'test_flight_path_angle'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true_hyperbolic
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 103, 'test_mean_to_true_hyperbolic')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_mean_to_true_hyperbolic'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_mean_to_true_hyperbolic'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true_hyperbolic' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true_hyperbolic' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true_hyperbolic' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_mean_to_true_hyperbolic'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_mean_to_true_hyperbolic'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_mean_to_true_hyperbolic'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true_hyperbolic' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true_hyperbolic' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true_hyperbolic' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_mean_to_true_hyperbolic'>
            nextitem: <Function 'test_flight_path_angle'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_mean_to_true_hyperbolic'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true_hyperbolic' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true_hyperbolic' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true_hyperbolic' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_mean_to_true_hyperbolic
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 103, 'test_mean_to_true_hyperbolic')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_flight_path_angle'>
          nextitem: <Function 'test_decorator_has_correct_signature'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_flight_path_angle
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 115, 'test_flight_path_angle')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_flight_path_angle'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_flight_path_angle'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_flight_path_angle' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_flight_path_angle' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_flight_path_angle' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_flight_path_angle'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_flight_path_angle'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_flight_path_angle'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_flight_path_angle' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_flight_path_angle' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_flight_path_angle' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_flight_path_angle'>
            nextitem: <Function 'test_decorator_has_correct_signature'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_flight_path_angle'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_flight_path_angle' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_flight_path_angle' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_angles.py::test_flight_path_angle' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_angles.py::test_flight_path_angle
            location: ('src/poliastro/tests/tests_twobody/test_angles.py', 115, 'test_flight_path_angle')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_decorator_has_correct_signature'>
          nextitem: <Function 'test_decorated_function_calls_rvstate'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_decorators.py::test_decorator_has_correct_signature
            location: ('src/poliastro/tests/tests_twobody/test_decorators.py', 15, 'test_decorator_has_correct_signature')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_decorator_has_correct_signature'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_decorator_has_correct_signature'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorator_has_correct_signature' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorator_has_correct_signature' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorator_has_correct_signature' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_decorator_has_correct_signature'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_decorator_has_correct_signature'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_decorator_has_correct_signature'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorator_has_correct_signature' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorator_has_correct_signature' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorator_has_correct_signature' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_decorator_has_correct_signature'>
            nextitem: <Function 'test_decorated_function_calls_rvstate'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_decorator_has_correct_signature'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorator_has_correct_signature' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorator_has_correct_signature' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorator_has_correct_signature' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_decorators.py::test_decorator_has_correct_signature
            location: ('src/poliastro/tests/tests_twobody/test_decorators.py', 15, 'test_decorator_has_correct_signature')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_decorated_function_calls_rvstate'>
          nextitem: <Function 'test_default_time_for_new_state'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_decorators.py::test_decorated_function_calls_rvstate
            location: ('src/poliastro/tests/tests_twobody/test_decorators.py', 23, 'test_decorated_function_calls_rvstate')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_decorated_function_calls_rvstate'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_decorated_function_calls_rvstate'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorated_function_calls_rvstate' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorated_function_calls_rvstate' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorated_function_calls_rvstate' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_decorated_function_calls_rvstate'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_decorated_function_calls_rvstate'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_decorated_function_calls_rvstate'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorated_function_calls_rvstate' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorated_function_calls_rvstate' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorated_function_calls_rvstate' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_decorated_function_calls_rvstate'>
            nextitem: <Function 'test_default_time_for_new_state'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_decorated_function_calls_rvstate'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorated_function_calls_rvstate' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorated_function_calls_rvstate' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_decorators.py::test_decorated_function_calls_rvstate' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_decorators.py::test_decorated_function_calls_rvstate
            location: ('src/poliastro/tests/tests_twobody/test_decorators.py', 23, 'test_decorated_function_calls_rvstate')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_default_time_for_new_state'>
          nextitem: <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_default_time_for_new_state
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 15, 'test_default_time_for_new_state')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_default_time_for_new_state'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_default_time_for_new_state'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_default_time_for_new_state' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_default_time_for_new_state' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_default_time_for_new_state' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_default_time_for_new_state'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_default_time_for_new_state'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_default_time_for_new_state'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_default_time_for_new_state' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_default_time_for_new_state' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_default_time_for_new_state' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_default_time_for_new_state'>
            nextitem: <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_default_time_for_new_state'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_default_time_for_new_state' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_default_time_for_new_state' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_default_time_for_new_state' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_default_time_for_new_state
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 15, 'test_default_time_for_new_state')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>
          nextitem: <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_elements_units_are_wrong
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 25, 'test_state_raises_unitserror_if_elements_units_are_wrong')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_elements_units_are_wrong' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_elements_units_are_wrong' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_elements_units_are_wrong' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_elements_units_are_wrong' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_elements_units_are_wrong' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_elements_units_are_wrong' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>
            nextitem: <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_raises_unitserror_if_elements_units_are_wrong'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_elements_units_are_wrong' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_elements_units_are_wrong' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_elements_units_are_wrong' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_elements_units_are_wrong
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 25, 'test_state_raises_unitserror_if_elements_units_are_wrong')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>
          nextitem: <Function 'test_parabolic_elements_fail_early'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_rv_units_are_wrong
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 36, 'test_state_raises_unitserror_if_rv_units_are_wrong')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_rv_units_are_wrong' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_rv_units_are_wrong' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_rv_units_are_wrong' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_rv_units_are_wrong' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_rv_units_are_wrong' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_rv_units_are_wrong' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>
            nextitem: <Function 'test_parabolic_elements_fail_early'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_raises_unitserror_if_rv_units_are_wrong'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_rv_units_are_wrong' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_rv_units_are_wrong' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_rv_units_are_wrong' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_state_raises_unitserror_if_rv_units_are_wrong
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 36, 'test_state_raises_unitserror_if_rv_units_are_wrong')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_parabolic_elements_fail_early'>
          nextitem: <Function 'test_bad_inclination_raises_exception'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_elements_fail_early
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 45, 'test_parabolic_elements_fail_early')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_parabolic_elements_fail_early'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_parabolic_elements_fail_early'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_elements_fail_early' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_elements_fail_early' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_elements_fail_early' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_parabolic_elements_fail_early'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_parabolic_elements_fail_early'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_parabolic_elements_fail_early'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_elements_fail_early' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_elements_fail_early' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_elements_fail_early' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_parabolic_elements_fail_early'>
            nextitem: <Function 'test_bad_inclination_raises_exception'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_parabolic_elements_fail_early'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_elements_fail_early' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_elements_fail_early' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_elements_fail_early' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_elements_fail_early
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 45, 'test_parabolic_elements_fail_early')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_bad_inclination_raises_exception'>
          nextitem: <Function 'test_bad_hyperbolic_raises_exception'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_inclination_raises_exception
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 57, 'test_bad_inclination_raises_exception')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_bad_inclination_raises_exception'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_bad_inclination_raises_exception'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_inclination_raises_exception' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_inclination_raises_exception' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_inclination_raises_exception' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_bad_inclination_raises_exception'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_bad_inclination_raises_exception'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_bad_inclination_raises_exception'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_inclination_raises_exception' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_inclination_raises_exception' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_inclination_raises_exception' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_bad_inclination_raises_exception'>
            nextitem: <Function 'test_bad_hyperbolic_raises_exception'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_bad_inclination_raises_exception'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_inclination_raises_exception' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_inclination_raises_exception' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_inclination_raises_exception' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_inclination_raises_exception
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 57, 'test_bad_inclination_raises_exception')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_bad_hyperbolic_raises_exception'>
          nextitem: <Function 'test_apply_maneuver_changes_epoch'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_hyperbolic_raises_exception
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 69, 'test_bad_hyperbolic_raises_exception')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_bad_hyperbolic_raises_exception'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_bad_hyperbolic_raises_exception'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_hyperbolic_raises_exception' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_hyperbolic_raises_exception' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_hyperbolic_raises_exception' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_bad_hyperbolic_raises_exception'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_bad_hyperbolic_raises_exception'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_bad_hyperbolic_raises_exception'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_hyperbolic_raises_exception' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_hyperbolic_raises_exception' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_hyperbolic_raises_exception' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_bad_hyperbolic_raises_exception'>
            nextitem: <Function 'test_apply_maneuver_changes_epoch'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_bad_hyperbolic_raises_exception'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_hyperbolic_raises_exception' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_hyperbolic_raises_exception' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_hyperbolic_raises_exception' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_bad_hyperbolic_raises_exception
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 69, 'test_bad_hyperbolic_raises_exception')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_apply_maneuver_changes_epoch'>
          nextitem: <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_apply_maneuver_changes_epoch
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 81, 'test_apply_maneuver_changes_epoch')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_apply_maneuver_changes_epoch'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_apply_maneuver_changes_epoch'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_apply_maneuver_changes_epoch' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_apply_maneuver_changes_epoch' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_apply_maneuver_changes_epoch' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_apply_maneuver_changes_epoch'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_apply_maneuver_changes_epoch'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_apply_maneuver_changes_epoch'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_apply_maneuver_changes_epoch' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_apply_maneuver_changes_epoch' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_apply_maneuver_changes_epoch' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_apply_maneuver_changes_epoch'>
            nextitem: <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_apply_maneuver_changes_epoch'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_apply_maneuver_changes_epoch' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_apply_maneuver_changes_epoch' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_apply_maneuver_changes_epoch' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_apply_maneuver_changes_epoch
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 81, 'test_apply_maneuver_changes_epoch')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>
          nextitem: <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_from_ephem_with_no_epoch_is_today
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 92, 'test_orbit_from_ephem_with_no_epoch_is_today')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_from_ephem_with_no_epoch_is_today' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_from_ephem_with_no_epoch_is_today' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_from_ephem_with_no_epoch_is_today' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_from_ephem_with_no_epoch_is_today' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_from_ephem_with_no_epoch_is_today' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_from_ephem_with_no_epoch_is_today' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>
            nextitem: <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_from_ephem_with_no_epoch_is_today'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_from_ephem_with_no_epoch_is_today' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_from_ephem_with_no_epoch_is_today' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_from_ephem_with_no_epoch_is_today' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_from_ephem_with_no_epoch_is_today
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 92, 'test_orbit_from_ephem_with_no_epoch_is_today')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>
          nextitem: <Function 'test_circular_has_proper_semimajor_axis'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 99, 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='recwarn' scope='function' baseid='' >
              request: <SubRequest 'recwarn' for <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>>
          finish pytest_fixture_setup --> WarningsRecorder(record=True) [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>
            nextitem: <Function 'test_circular_has_proper_semimajor_axis'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='recwarn' scope='function' baseid='' >
              request: <SubRequest 'recwarn' for <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 99, 'test_from_ephem_raises_warning_if_time_is_not_tdb_with_proper_time')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_circular_has_proper_semimajor_axis'>
          nextitem: <Function 'test_geosync_has_proper_period'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_circular_has_proper_semimajor_axis
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 110, 'test_circular_has_proper_semimajor_axis')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_circular_has_proper_semimajor_axis'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_circular_has_proper_semimajor_axis'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_circular_has_proper_semimajor_axis' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_circular_has_proper_semimajor_axis' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_circular_has_proper_semimajor_axis' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_circular_has_proper_semimajor_axis'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_circular_has_proper_semimajor_axis'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_circular_has_proper_semimajor_axis'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_circular_has_proper_semimajor_axis' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_circular_has_proper_semimajor_axis' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_circular_has_proper_semimajor_axis' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_circular_has_proper_semimajor_axis'>
            nextitem: <Function 'test_geosync_has_proper_period'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_circular_has_proper_semimajor_axis'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_circular_has_proper_semimajor_axis' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_circular_has_proper_semimajor_axis' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_circular_has_proper_semimajor_axis' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_circular_has_proper_semimajor_axis
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 110, 'test_circular_has_proper_semimajor_axis')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_geosync_has_proper_period'>
          nextitem: <Function 'test_parabolic_has_proper_eccentricity'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_geosync_has_proper_period
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 118, 'test_geosync_has_proper_period')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_geosync_has_proper_period'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_geosync_has_proper_period'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_geosync_has_proper_period' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_geosync_has_proper_period' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_geosync_has_proper_period' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_geosync_has_proper_period'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_geosync_has_proper_period'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_geosync_has_proper_period'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_geosync_has_proper_period' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_geosync_has_proper_period' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_geosync_has_proper_period' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_geosync_has_proper_period'>
            nextitem: <Function 'test_parabolic_has_proper_eccentricity'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_geosync_has_proper_period'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_geosync_has_proper_period' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_geosync_has_proper_period' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_geosync_has_proper_period' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_geosync_has_proper_period
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 118, 'test_geosync_has_proper_period')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_parabolic_has_proper_eccentricity'>
          nextitem: <Function 'test_parabolic_has_zero_energy'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_proper_eccentricity
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 126, 'test_parabolic_has_proper_eccentricity')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_parabolic_has_proper_eccentricity'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_parabolic_has_proper_eccentricity'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_proper_eccentricity' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_proper_eccentricity' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_proper_eccentricity' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_parabolic_has_proper_eccentricity'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_parabolic_has_proper_eccentricity'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_parabolic_has_proper_eccentricity'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_proper_eccentricity' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_proper_eccentricity' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_proper_eccentricity' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_parabolic_has_proper_eccentricity'>
            nextitem: <Function 'test_parabolic_has_zero_energy'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_parabolic_has_proper_eccentricity'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_proper_eccentricity' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_proper_eccentricity' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_proper_eccentricity' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_proper_eccentricity
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 126, 'test_parabolic_has_proper_eccentricity')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_parabolic_has_zero_energy'>
          nextitem: <Function 'test_pqw_for_circular_equatorial_orbit'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_zero_energy
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 136, 'test_parabolic_has_zero_energy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_parabolic_has_zero_energy'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_parabolic_has_zero_energy'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_zero_energy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_zero_energy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_zero_energy' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_parabolic_has_zero_energy'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_parabolic_has_zero_energy'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_parabolic_has_zero_energy'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_zero_energy' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_zero_energy' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_zero_energy' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_parabolic_has_zero_energy'>
            nextitem: <Function 'test_pqw_for_circular_equatorial_orbit'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_parabolic_has_zero_energy'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_zero_energy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_zero_energy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_zero_energy' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_parabolic_has_zero_energy
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 136, 'test_parabolic_has_zero_energy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_pqw_for_circular_equatorial_orbit'>
          nextitem: <Function 'test_orbit_representation'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_pqw_for_circular_equatorial_orbit
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 145, 'test_pqw_for_circular_equatorial_orbit')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_pqw_for_circular_equatorial_orbit'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_pqw_for_circular_equatorial_orbit'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_pqw_for_circular_equatorial_orbit' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_pqw_for_circular_equatorial_orbit' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_pqw_for_circular_equatorial_orbit' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_pqw_for_circular_equatorial_orbit'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_pqw_for_circular_equatorial_orbit'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_pqw_for_circular_equatorial_orbit'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_pqw_for_circular_equatorial_orbit' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_pqw_for_circular_equatorial_orbit' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_pqw_for_circular_equatorial_orbit' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_pqw_for_circular_equatorial_orbit'>
            nextitem: <Function 'test_orbit_representation'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_pqw_for_circular_equatorial_orbit'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_pqw_for_circular_equatorial_orbit' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_pqw_for_circular_equatorial_orbit' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_pqw_for_circular_equatorial_orbit' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_pqw_for_circular_equatorial_orbit
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 145, 'test_pqw_for_circular_equatorial_orbit')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_orbit_representation'>
          nextitem: <Function 'test_sample_numpoints'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_representation
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 156, 'test_orbit_representation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_orbit_representation'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_representation'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_representation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_representation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_representation' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_orbit_representation'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_orbit_representation'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_representation'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_representation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_representation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_representation' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_orbit_representation'>
            nextitem: <Function 'test_sample_numpoints'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_orbit_representation'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_representation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_representation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_representation' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_orbit_representation
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 156, 'test_orbit_representation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_numpoints'>
          nextitem: <Function 'test_sample_with_time_value'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_numpoints
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 163, 'test_sample_numpoints')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_numpoints'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_numpoints'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_numpoints' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_numpoints' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_numpoints' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_numpoints'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_numpoints'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_numpoints'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_numpoints' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_numpoints' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_numpoints' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_numpoints'>
            nextitem: <Function 'test_sample_with_time_value'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_numpoints'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_numpoints' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_numpoints' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_numpoints' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_numpoints
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 163, 'test_sample_numpoints')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_with_time_value'>
          nextitem: <Function 'test_sample_with_nu_value'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_time_value
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 173, 'test_sample_with_time_value')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_with_time_value'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_with_time_value'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_time_value' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_time_value' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_time_value' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_with_time_value'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_with_time_value'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_with_time_value'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_time_value' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_time_value' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_time_value' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_with_time_value'>
            nextitem: <Function 'test_sample_with_nu_value'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_with_time_value'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_time_value' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_time_value' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_time_value' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_time_value
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 173, 'test_sample_with_time_value')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_with_nu_value'>
          nextitem: <Function 'test_propagation'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_nu_value
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 187, 'test_sample_with_nu_value')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_with_nu_value'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_with_nu_value'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_nu_value' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_nu_value' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_nu_value' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_with_nu_value'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_with_nu_value'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_with_nu_value'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_nu_value' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_nu_value' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_nu_value' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_with_nu_value'>
            nextitem: <Function 'test_propagation'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_with_nu_value'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_nu_value' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_nu_value' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_nu_value' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_orbit.py::test_sample_with_nu_value
            location: ('src/poliastro/tests/tests_twobody/test_orbit.py', 187, 'test_sample_with_nu_value')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_propagation'>
          nextitem: <Function 'test_propagate_accepts_timedelta'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 17, 'test_propagation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_propagation'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagation'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_propagation'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_propagation'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagation'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_propagation'>
            nextitem: <Function 'test_propagate_accepts_timedelta'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagation'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 17, 'test_propagation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_propagate_accepts_timedelta'>
          nextitem: <Function 'test_propagation_hyperbolic'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_accepts_timedelta
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 34, 'test_propagate_accepts_timedelta')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_propagate_accepts_timedelta'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagate_accepts_timedelta'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_accepts_timedelta' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_accepts_timedelta' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_accepts_timedelta' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_propagate_accepts_timedelta'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_propagate_accepts_timedelta'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagate_accepts_timedelta'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_accepts_timedelta' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_accepts_timedelta' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_accepts_timedelta' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_propagate_accepts_timedelta'>
            nextitem: <Function 'test_propagation_hyperbolic'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagate_accepts_timedelta'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_accepts_timedelta' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_accepts_timedelta' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_accepts_timedelta' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_accepts_timedelta
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 34, 'test_propagate_accepts_timedelta')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_propagation_hyperbolic'>
          nextitem: <Function 'test_propagation_zero_time_returns_same_state'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_hyperbolic
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 51, 'test_propagation_hyperbolic')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_propagation_hyperbolic'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagation_hyperbolic'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_hyperbolic' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_hyperbolic' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_hyperbolic' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_propagation_hyperbolic'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_propagation_hyperbolic'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagation_hyperbolic'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_hyperbolic' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_hyperbolic' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_hyperbolic' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_propagation_hyperbolic'>
            nextitem: <Function 'test_propagation_zero_time_returns_same_state'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagation_hyperbolic'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_hyperbolic' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_hyperbolic' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_hyperbolic' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_hyperbolic
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 51, 'test_propagation_hyperbolic')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_propagation_zero_time_returns_same_state'>
          nextitem: <Function 'test_apply_zero_maneuver_returns_equal_state'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_zero_time_returns_same_state
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 67, 'test_propagation_zero_time_returns_same_state')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_propagation_zero_time_returns_same_state'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagation_zero_time_returns_same_state'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_zero_time_returns_same_state' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_zero_time_returns_same_state' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_zero_time_returns_same_state' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_propagation_zero_time_returns_same_state'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_propagation_zero_time_returns_same_state'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagation_zero_time_returns_same_state'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_zero_time_returns_same_state' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_zero_time_returns_same_state' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_zero_time_returns_same_state' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_propagation_zero_time_returns_same_state'>
            nextitem: <Function 'test_apply_zero_maneuver_returns_equal_state'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagation_zero_time_returns_same_state'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_zero_time_returns_same_state' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_zero_time_returns_same_state' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_zero_time_returns_same_state' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_propagation_zero_time_returns_same_state
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 67, 'test_propagation_zero_time_returns_same_state')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_apply_zero_maneuver_returns_equal_state'>
          nextitem: <Function 'test_cowell_propagation_callback'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_apply_zero_maneuver_returns_equal_state
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 82, 'test_apply_zero_maneuver_returns_equal_state')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_apply_zero_maneuver_returns_equal_state'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_apply_zero_maneuver_returns_equal_state'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_apply_zero_maneuver_returns_equal_state' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_apply_zero_maneuver_returns_equal_state' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_apply_zero_maneuver_returns_equal_state' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_apply_zero_maneuver_returns_equal_state'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_apply_zero_maneuver_returns_equal_state'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_apply_zero_maneuver_returns_equal_state'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_apply_zero_maneuver_returns_equal_state' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_apply_zero_maneuver_returns_equal_state' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_apply_zero_maneuver_returns_equal_state' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_apply_zero_maneuver_returns_equal_state'>
            nextitem: <Function 'test_cowell_propagation_callback'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_apply_zero_maneuver_returns_equal_state'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_apply_zero_maneuver_returns_equal_state' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_apply_zero_maneuver_returns_equal_state' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_apply_zero_maneuver_returns_equal_state' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_apply_zero_maneuver_returns_equal_state
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 82, 'test_apply_zero_maneuver_returns_equal_state')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_cowell_propagation_callback'>
          nextitem: <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_callback
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 96, 'test_cowell_propagation_callback')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_cowell_propagation_callback'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_cowell_propagation_callback'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_callback' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_callback' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_callback' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_cowell_propagation_callback'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_cowell_propagation_callback'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_cowell_propagation_callback'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_callback' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_callback' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_callback' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_cowell_propagation_callback'>
            nextitem: <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_cowell_propagation_callback'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_callback' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_callback' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_callback' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_callback
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 96, 'test_cowell_propagation_callback')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>
          nextitem: <Function 'test_cowell_propagation_circle_to_circle'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_with_zero_acceleration_equals_kepler
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 118, 'test_cowell_propagation_with_zero_acceleration_equals_kepler')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_with_zero_acceleration_equals_kepler' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_with_zero_acceleration_equals_kepler' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_with_zero_acceleration_equals_kepler' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_with_zero_acceleration_equals_kepler' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_with_zero_acceleration_equals_kepler' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_with_zero_acceleration_equals_kepler' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>
            nextitem: <Function 'test_cowell_propagation_circle_to_circle'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_cowell_propagation_with_zero_acceleration_equals_kepler'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_with_zero_acceleration_equals_kepler' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_with_zero_acceleration_equals_kepler' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_with_zero_acceleration_equals_kepler' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_with_zero_acceleration_equals_kepler
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 118, 'test_cowell_propagation_with_zero_acceleration_equals_kepler')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_cowell_propagation_circle_to_circle'>
          nextitem: <Function 'test_propagate_to_date_has_proper_epoch'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_circle_to_circle
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 135, 'test_cowell_propagation_circle_to_circle')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_cowell_propagation_circle_to_circle'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_cowell_propagation_circle_to_circle'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_circle_to_circle' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_circle_to_circle' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_circle_to_circle' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_cowell_propagation_circle_to_circle'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_cowell_propagation_circle_to_circle'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_cowell_propagation_circle_to_circle'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_circle_to_circle' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_circle_to_circle' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_circle_to_circle' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_cowell_propagation_circle_to_circle'>
            nextitem: <Function 'test_propagate_to_date_has_proper_epoch'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_cowell_propagation_circle_to_circle'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_circle_to_circle' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_circle_to_circle' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_circle_to_circle' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_cowell_propagation_circle_to_circle
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 135, 'test_cowell_propagation_circle_to_circle')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_propagate_to_date_has_proper_epoch'>
          nextitem: <Function 'test_sample_angle_zero_returns_same'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_to_date_has_proper_epoch
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 168, 'test_propagate_to_date_has_proper_epoch')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_propagate_to_date_has_proper_epoch'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagate_to_date_has_proper_epoch'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_to_date_has_proper_epoch' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_to_date_has_proper_epoch' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_to_date_has_proper_epoch' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_propagate_to_date_has_proper_epoch'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_propagate_to_date_has_proper_epoch'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagate_to_date_has_proper_epoch'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_to_date_has_proper_epoch' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_to_date_has_proper_epoch' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_to_date_has_proper_epoch' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_propagate_to_date_has_proper_epoch'>
            nextitem: <Function 'test_sample_angle_zero_returns_same'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_propagate_to_date_has_proper_epoch'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_to_date_has_proper_epoch' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_to_date_has_proper_epoch' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_to_date_has_proper_epoch' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_propagation.py::test_propagate_to_date_has_proper_epoch
            location: ('src/poliastro/tests/tests_twobody/test_propagation.py', 168, 'test_propagate_to_date_has_proper_epoch')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_angle_zero_returns_same'>
          nextitem: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_angle_zero_returns_same
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 11, 'test_sample_angle_zero_returns_same')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_angle_zero_returns_same'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_angle_zero_returns_same'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_angle_zero_returns_same' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_angle_zero_returns_same' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_angle_zero_returns_same' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_angle_zero_returns_same'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_angle_zero_returns_same'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_angle_zero_returns_same'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_angle_zero_returns_same' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_angle_zero_returns_same' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_angle_zero_returns_same' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_angle_zero_returns_same'>
            nextitem: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_angle_zero_returns_same'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_angle_zero_returns_same' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_angle_zero_returns_same' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_angle_zero_returns_same' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_angle_zero_returns_same
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 11, 'test_sample_angle_zero_returns_same')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>
          nextitem: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 24, 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='time_of_flight' scope='function' baseid='' >
              request: <SubRequest 'time_of_flight' for <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>>
          finish pytest_fixture_setup --> 1.0 min [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='function' scope='function' baseid='' >
              request: <SubRequest 'function' for <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>>
          finish pytest_fixture_setup --> <function propagate at 0x7f3d697448c8> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>
            nextitem: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='function' scope='function' baseid='' >
              request: <SubRequest 'function' for <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='time_of_flight' scope='function' baseid='' >
              request: <SubRequest 'time_of_flight' for <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 24, 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight0-propagate]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>
          nextitem: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 24, 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='time_of_flight' scope='function' baseid='' >
              request: <SubRequest 'time_of_flight' for <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>>
          finish pytest_fixture_setup --> 40.0 min [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='function' scope='function' baseid='' >
              request: <SubRequest 'function' for <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>>
          finish pytest_fixture_setup --> <function propagate at 0x7f3d697448c8> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>
            nextitem: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='function' scope='function' baseid='' >
              request: <SubRequest 'function' for <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='time_of_flight' scope='function' baseid='' >
              request: <SubRequest 'time_of_flight' for <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 24, 'test_sample_one_point_equals_propagation_small_deltas[time_of_flight1-propagate]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>
          nextitem: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 45, 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='time_of_flight' scope='function' baseid='' >
              request: <SubRequest 'time_of_flight' for <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>>
          finish pytest_fixture_setup --> 6.0 h [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='function' scope='function' baseid='' >
              request: <SubRequest 'function' for <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>>
          finish pytest_fixture_setup --> <function propagate at 0x7f3d697448c8> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>
            nextitem: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='function' scope='function' baseid='' >
              request: <SubRequest 'function' for <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='time_of_flight' scope='function' baseid='' >
              request: <SubRequest 'time_of_flight' for <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 45, 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight0-propagate]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>
          nextitem: <Function 'test_sample_nu_values'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 45, 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='time_of_flight' scope='function' baseid='' >
              request: <SubRequest 'time_of_flight' for <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>>
          finish pytest_fixture_setup --> 2.0 d [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='function' scope='function' baseid='' >
              request: <SubRequest 'function' for <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>>
          finish pytest_fixture_setup --> <function propagate at 0x7f3d697448c8> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>
            nextitem: <Function 'test_sample_nu_values'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='function' scope='function' baseid='' >
              request: <SubRequest 'function' for <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='time_of_flight' scope='function' baseid='' >
              request: <SubRequest 'time_of_flight' for <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 45, 'test_sample_one_point_equals_propagation_big_deltas[time_of_flight1-propagate]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_nu_values'>
          nextitem: <Function 'test_sample_num_points[3]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_nu_values
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 64, 'test_sample_nu_values')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_nu_values'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_nu_values'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_nu_values' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_nu_values' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_nu_values' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_nu_values'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_nu_values'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_nu_values'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_nu_values' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_nu_values' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_nu_values' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_nu_values'>
            nextitem: <Function 'test_sample_num_points[3]'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_nu_values'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_nu_values' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_nu_values' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_nu_values' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_nu_values
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 64, 'test_sample_nu_values')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_num_points[3]'>
          nextitem: <Function 'test_sample_num_points[5]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[3]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 80, 'test_sample_num_points[3]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_num_points[3]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='num_points' scope='function' baseid='' >
              request: <SubRequest 'num_points' for <Function 'test_sample_num_points[3]'>>
          finish pytest_fixture_setup --> 3 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[3]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[3]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[3]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[3]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_num_points[3]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_num_points[3]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[3]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[3]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[3]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[3]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_num_points[3]'>
            nextitem: <Function 'test_sample_num_points[5]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='num_points' scope='function' baseid='' >
              request: <SubRequest 'num_points' for <Function 'test_sample_num_points[3]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[3]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[3]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[3]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[3]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[3]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 80, 'test_sample_num_points[3]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_num_points[5]'>
          nextitem: <Function 'test_sample_num_points[7]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[5]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 80, 'test_sample_num_points[5]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_num_points[5]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='num_points' scope='function' baseid='' >
              request: <SubRequest 'num_points' for <Function 'test_sample_num_points[5]'>>
          finish pytest_fixture_setup --> 5 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[5]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[5]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[5]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[5]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_num_points[5]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_num_points[5]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[5]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[5]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[5]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[5]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_num_points[5]'>
            nextitem: <Function 'test_sample_num_points[7]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='num_points' scope='function' baseid='' >
              request: <SubRequest 'num_points' for <Function 'test_sample_num_points[5]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[5]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[5]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[5]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[5]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[5]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 80, 'test_sample_num_points[5]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_num_points[7]'>
          nextitem: <Function 'test_sample_num_points[9]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[7]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 80, 'test_sample_num_points[7]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_num_points[7]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='num_points' scope='function' baseid='' >
              request: <SubRequest 'num_points' for <Function 'test_sample_num_points[7]'>>
          finish pytest_fixture_setup --> 7 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[7]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[7]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[7]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[7]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_num_points[7]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_num_points[7]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[7]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[7]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[7]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[7]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_num_points[7]'>
            nextitem: <Function 'test_sample_num_points[9]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='num_points' scope='function' baseid='' >
              request: <SubRequest 'num_points' for <Function 'test_sample_num_points[7]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[7]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[7]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[7]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[7]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[7]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 80, 'test_sample_num_points[7]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_num_points[9]'>
          nextitem: <Function 'test_sample_num_points[11]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[9]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 80, 'test_sample_num_points[9]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_num_points[9]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='num_points' scope='function' baseid='' >
              request: <SubRequest 'num_points' for <Function 'test_sample_num_points[9]'>>
          finish pytest_fixture_setup --> 9 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[9]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[9]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[9]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[9]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_num_points[9]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_num_points[9]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[9]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[9]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[9]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[9]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_num_points[9]'>
            nextitem: <Function 'test_sample_num_points[11]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='num_points' scope='function' baseid='' >
              request: <SubRequest 'num_points' for <Function 'test_sample_num_points[9]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[9]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[9]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[9]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[9]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[9]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 80, 'test_sample_num_points[9]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_num_points[11]'>
          nextitem: <Function 'test_sample_num_points[101]'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[11]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 80, 'test_sample_num_points[11]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_num_points[11]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='num_points' scope='function' baseid='' >
              request: <SubRequest 'num_points' for <Function 'test_sample_num_points[11]'>>
          finish pytest_fixture_setup --> 11 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[11]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[11]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[11]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[11]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_num_points[11]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_num_points[11]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[11]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[11]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[11]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[11]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_num_points[11]'>
            nextitem: <Function 'test_sample_num_points[101]'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='num_points' scope='function' baseid='' >
              request: <SubRequest 'num_points' for <Function 'test_sample_num_points[11]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[11]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[11]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[11]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[11]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[11]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 80, 'test_sample_num_points[11]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_sample_num_points[101]'>
          nextitem: <Function 'test_state_has_attractor_given_in_constructor'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[101]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 80, 'test_sample_num_points[101]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_sample_num_points[101]'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='num_points' scope='function' baseid='' >
              request: <SubRequest 'num_points' for <Function 'test_sample_num_points[101]'>>
          finish pytest_fixture_setup --> 101 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[101]'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[101]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[101]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[101]' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_sample_num_points[101]'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_sample_num_points[101]'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[101]'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[101]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[101]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[101]' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_sample_num_points[101]'>
            nextitem: <Function 'test_state_has_attractor_given_in_constructor'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='num_points' scope='function' baseid='' >
              request: <SubRequest 'num_points' for <Function 'test_sample_num_points[101]'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_sample_num_points[101]'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[101]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[101]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[101]' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_sample.py::test_sample_num_points[101]
            location: ('src/poliastro/tests/tests_twobody/test_sample.py', 80, 'test_sample_num_points[101]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_state_has_attractor_given_in_constructor'>
          nextitem: <Function 'test_state_has_elements_given_in_constructor'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_state_has_attractor_given_in_constructor
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 11, 'test_state_has_attractor_given_in_constructor')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_state_has_attractor_given_in_constructor'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_has_attractor_given_in_constructor'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_attractor_given_in_constructor' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_attractor_given_in_constructor' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_attractor_given_in_constructor' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_state_has_attractor_given_in_constructor'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_state_has_attractor_given_in_constructor'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_has_attractor_given_in_constructor'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_attractor_given_in_constructor' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_attractor_given_in_constructor' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_attractor_given_in_constructor' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_state_has_attractor_given_in_constructor'>
            nextitem: <Function 'test_state_has_elements_given_in_constructor'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_has_attractor_given_in_constructor'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_attractor_given_in_constructor' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_attractor_given_in_constructor' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_attractor_given_in_constructor' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_state_has_attractor_given_in_constructor
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 11, 'test_state_has_attractor_given_in_constructor')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_state_has_elements_given_in_constructor'>
          nextitem: <Function 'test_state_has_individual_elements'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_state_has_elements_given_in_constructor
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 19, 'test_state_has_elements_given_in_constructor')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_state_has_elements_given_in_constructor'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_has_elements_given_in_constructor'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_elements_given_in_constructor' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_elements_given_in_constructor' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_elements_given_in_constructor' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_state_has_elements_given_in_constructor'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_state_has_elements_given_in_constructor'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_has_elements_given_in_constructor'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_elements_given_in_constructor' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_elements_given_in_constructor' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_elements_given_in_constructor' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_state_has_elements_given_in_constructor'>
            nextitem: <Function 'test_state_has_individual_elements'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_has_elements_given_in_constructor'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_elements_given_in_constructor' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_elements_given_in_constructor' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_elements_given_in_constructor' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_state_has_elements_given_in_constructor
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 19, 'test_state_has_elements_given_in_constructor')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_state_has_individual_elements'>
          nextitem: <Function 'test_state_has_rv_given_in_constructor'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_state_has_individual_elements
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 31, 'test_state_has_individual_elements')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_state_has_individual_elements'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_has_individual_elements'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_individual_elements' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_individual_elements' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_individual_elements' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_state_has_individual_elements'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_state_has_individual_elements'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_has_individual_elements'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_individual_elements' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_individual_elements' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_individual_elements' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_state_has_individual_elements'>
            nextitem: <Function 'test_state_has_rv_given_in_constructor'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_has_individual_elements'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_individual_elements' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_individual_elements' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_individual_elements' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_state_has_individual_elements
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 31, 'test_state_has_individual_elements')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_state_has_rv_given_in_constructor'>
          nextitem: <Function 'test_perigee_and_apogee'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_state_has_rv_given_in_constructor
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 47, 'test_state_has_rv_given_in_constructor')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_state_has_rv_given_in_constructor'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_has_rv_given_in_constructor'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_rv_given_in_constructor' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_rv_given_in_constructor' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_rv_given_in_constructor' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_state_has_rv_given_in_constructor'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_state_has_rv_given_in_constructor'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_has_rv_given_in_constructor'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_rv_given_in_constructor' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_rv_given_in_constructor' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_rv_given_in_constructor' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_state_has_rv_given_in_constructor'>
            nextitem: <Function 'test_perigee_and_apogee'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_state_has_rv_given_in_constructor'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_rv_given_in_constructor' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_rv_given_in_constructor' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_state_has_rv_given_in_constructor' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_state_has_rv_given_in_constructor
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 47, 'test_state_has_rv_given_in_constructor')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_perigee_and_apogee'>
          nextitem: <Function 'test_convert_from_rv_to_coe'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_perigee_and_apogee
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 54, 'test_perigee_and_apogee')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_perigee_and_apogee'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_perigee_and_apogee'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perigee_and_apogee' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perigee_and_apogee' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perigee_and_apogee' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_perigee_and_apogee'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_perigee_and_apogee'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_perigee_and_apogee'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perigee_and_apogee' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perigee_and_apogee' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perigee_and_apogee' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_perigee_and_apogee'>
            nextitem: <Function 'test_convert_from_rv_to_coe'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_perigee_and_apogee'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perigee_and_apogee' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perigee_and_apogee' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perigee_and_apogee' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_perigee_and_apogee
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 54, 'test_perigee_and_apogee')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_convert_from_rv_to_coe'>
          nextitem: <Function 'test_convert_from_coe_to_rv'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_rv_to_coe
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 67, 'test_convert_from_rv_to_coe')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_convert_from_rv_to_coe'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_convert_from_rv_to_coe'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_rv_to_coe' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_rv_to_coe' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_rv_to_coe' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_convert_from_rv_to_coe'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_convert_from_rv_to_coe'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_convert_from_rv_to_coe'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_rv_to_coe' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_rv_to_coe' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_rv_to_coe' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_convert_from_rv_to_coe'>
            nextitem: <Function 'test_convert_from_coe_to_rv'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_convert_from_rv_to_coe'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_rv_to_coe' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_rv_to_coe' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_rv_to_coe' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_rv_to_coe
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 67, 'test_convert_from_rv_to_coe')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_convert_from_coe_to_rv'>
          nextitem: <Function 'test_perifocal_points_to_perigee'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_coe_to_rv
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 86, 'test_convert_from_coe_to_rv')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_convert_from_coe_to_rv'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_convert_from_coe_to_rv'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_coe_to_rv' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_coe_to_rv' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_coe_to_rv' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_convert_from_coe_to_rv'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_convert_from_coe_to_rv'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_convert_from_coe_to_rv'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_coe_to_rv' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_coe_to_rv' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_coe_to_rv' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_convert_from_coe_to_rv'>
            nextitem: <Function 'test_perifocal_points_to_perigee'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_convert_from_coe_to_rv'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_coe_to_rv' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_coe_to_rv' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_coe_to_rv' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_convert_from_coe_to_rv
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 86, 'test_convert_from_coe_to_rv')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_perifocal_points_to_perigee'>
          nextitem: <Function 'test_arglat_within_range'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_perifocal_points_to_perigee
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 112, 'test_perifocal_points_to_perigee')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_perifocal_points_to_perigee'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_perifocal_points_to_perigee'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perifocal_points_to_perigee' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perifocal_points_to_perigee' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perifocal_points_to_perigee' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_perifocal_points_to_perigee'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_perifocal_points_to_perigee'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_perifocal_points_to_perigee'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perifocal_points_to_perigee' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perifocal_points_to_perigee' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perifocal_points_to_perigee' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_perifocal_points_to_perigee'>
            nextitem: <Function 'test_arglat_within_range'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_perifocal_points_to_perigee'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perifocal_points_to_perigee' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perifocal_points_to_perigee' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_perifocal_points_to_perigee' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_perifocal_points_to_perigee
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 112, 'test_perifocal_points_to_perigee')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_arglat_within_range'>
          nextitem: <Function 'test_pqw_returns_dimensionless'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_arglat_within_range
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 121, 'test_arglat_within_range')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_arglat_within_range'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_arglat_within_range'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_arglat_within_range' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_arglat_within_range' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_arglat_within_range' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_arglat_within_range'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_arglat_within_range'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_arglat_within_range'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_arglat_within_range' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_arglat_within_range' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_arglat_within_range' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_arglat_within_range'>
            nextitem: <Function 'test_pqw_returns_dimensionless'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_arglat_within_range'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_arglat_within_range' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_arglat_within_range' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_arglat_within_range' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_arglat_within_range
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 121, 'test_arglat_within_range')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_pqw_returns_dimensionless'>
          nextitem: <DoctestItem 'poliastro.twobody.angles.M_to_nu'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_pqw_returns_dimensionless
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 128, 'test_pqw_returns_dimensionless')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_pqw_returns_dimensionless'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_pqw_returns_dimensionless'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_pqw_returns_dimensionless' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_pqw_returns_dimensionless' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_pqw_returns_dimensionless' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_pqw_returns_dimensionless'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_pqw_returns_dimensionless'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_pqw_returns_dimensionless'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_pqw_returns_dimensionless' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_pqw_returns_dimensionless' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_pqw_returns_dimensionless' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_pqw_returns_dimensionless'>
            nextitem: <DoctestItem 'poliastro.twobody.angles.M_to_nu'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_pqw_returns_dimensionless'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_pqw_returns_dimensionless' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_pqw_returns_dimensionless' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/tests/tests_twobody/test_states.py::test_pqw_returns_dimensionless' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/tests/tests_twobody/test_states.py::test_pqw_returns_dimensionless
            location: ('src/poliastro/tests/tests_twobody/test_states.py', 128, 'test_pqw_returns_dimensionless')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <DoctestItem 'poliastro.twobody.angles.M_to_nu'>
          nextitem: <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/twobody/angles.py::poliastro.twobody.angles.M_to_nu
            location: ('src/poliastro/twobody/angles.py', 208, '[doctest] poliastro.twobody.angles.M_to_nu')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <DoctestItem 'poliastro.twobody.angles.M_to_nu'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <DoctestItem 'poliastro.twobody.angles.M_to_nu'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/twobody/angles.py::poliastro.twobody.angles.M_to_nu' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/twobody/angles.py::poliastro.twobody.angles.M_to_nu' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/twobody/angles.py::poliastro.twobody.angles.M_to_nu' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <DoctestItem 'poliastro.twobody.angles.M_to_nu'>
        pytest_runtest_makereport [hook]
            item: <DoctestItem 'poliastro.twobody.angles.M_to_nu'>
            call: <CallInfo when='call' exception: <DocTest poliastro.twobody.angles.M_to_nu from /home/ritiek/poliastro/src/poliastro/twobody/angles.py:208 (2 examples)>>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/twobody/angles.py::poliastro.twobody.angles.M_to_nu' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/twobody/angles.py::poliastro.twobody.angles.M_to_nu' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/twobody/angles.py::poliastro.twobody.angles.M_to_nu' when='call' outcome='failed'>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <DoctestItem 'poliastro.twobody.angles.M_to_nu'>
            call: <CallInfo when='call' exception: <DocTest poliastro.twobody.angles.M_to_nu from /home/ritiek/poliastro/src/poliastro/twobody/angles.py:208 (2 examples)>>
            report: <TestReport 'src/poliastro/twobody/angles.py::poliastro.twobody.angles.M_to_nu' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <DoctestItem 'poliastro.twobody.angles.M_to_nu'>
            nextitem: <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <DoctestItem 'poliastro.twobody.angles.M_to_nu'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/twobody/angles.py::poliastro.twobody.angles.M_to_nu' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/twobody/angles.py::poliastro.twobody.angles.M_to_nu' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/twobody/angles.py::poliastro.twobody.angles.M_to_nu' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/twobody/angles.py::poliastro.twobody.angles.M_to_nu
            location: ('src/poliastro/twobody/angles.py', 208, '[doctest] poliastro.twobody.angles.M_to_nu')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: src/poliastro/twobody/orbit.py::poliastro.twobody.orbit.Orbit.sample
            location: ('src/poliastro/twobody/orbit.py', 258, '[doctest] poliastro.twobody.orbit.Orbit.sample')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/twobody/orbit.py::poliastro.twobody.orbit.Orbit.sample' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/twobody/orbit.py::poliastro.twobody.orbit.Orbit.sample' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/twobody/orbit.py::poliastro.twobody.orbit.Orbit.sample' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>
        pytest_runtest_makereport [hook]
            item: <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>
            call: <CallInfo when='call' exception: <DocTest poliastro.twobody.orbit.Orbit.sample from /home/ritiek/poliastro/src/poliastro/twobody/orbit.py:258 (7 examples)>>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/twobody/orbit.py::poliastro.twobody.orbit.Orbit.sample' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/twobody/orbit.py::poliastro.twobody.orbit.Orbit.sample' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/twobody/orbit.py::poliastro.twobody.orbit.Orbit.sample' when='call' outcome='failed'>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>
            call: <CallInfo when='call' exception: <DocTest poliastro.twobody.orbit.Orbit.sample from /home/ritiek/poliastro/src/poliastro/twobody/orbit.py:258 (7 examples)>>
            report: <TestReport 'src/poliastro/twobody/orbit.py::poliastro.twobody.orbit.Orbit.sample' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='doctest_namespace' scope='session' baseid='' >
              request: <SubRequest 'doctest_namespace' for <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='doctest_namespace' scope='session' baseid='' >
              request: <SubRequest 'doctest_namespace' for <DoctestItem 'poliastro.twobody.angles.M_to_nu'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='doctest_namespace' scope='session' baseid='' >
              request: <SubRequest 'doctest_namespace' for <DoctestItem 'poliastro.maneuver.Maneuver'>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <DoctestItem 'poliastro.twobody.orbit.Orbit.sample'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'src/poliastro/twobody/orbit.py::poliastro.twobody.orbit.Orbit.sample' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'src/poliastro/twobody/orbit.py::poliastro.twobody.orbit.Orbit.sample' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'src/poliastro/twobody/orbit.py::poliastro.twobody.orbit.Orbit.sample' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: src/poliastro/twobody/orbit.py::poliastro.twobody.orbit.Orbit.sample
            location: ('src/poliastro/twobody/orbit.py', 258, '[doctest] poliastro.twobody.orbit.Orbit.sample')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session 'poliastro'>
        exitstatus: 1
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7f3d7c9a4048>
          exitstatus: 1
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x7f3d89f96160>
    finish pytest_unconfigure --> [] [hook]
  finish [config:tmpdir]
